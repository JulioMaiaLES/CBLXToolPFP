{"ast":null,"code":"import { Md5 } from 'md5-typescript';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./http.service\";\nimport * as i2 from \"ngx-cookie-service\";\nimport * as i3 from \"./storage.service\";\nimport * as i4 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, cookieService, storage, router) {\n    this.http = http;\n    this.cookieService = cookieService;\n    this.storage = storage;\n    this.router = router;\n    this.apiUrl = 'http://localhost:8000/';\n  }\n  login(email, password) {\n    const loginData = {\n      email: email,\n      password: password\n    };\n    console.log(\"Sending login data:\", loginData); // Apenas para debug, remover em produção\n    console.log(\"Email\", email, \"Password\", password); // Apenas para debug, remover em produção\n    return this.http.post(`${this.apiUrl}auth-login/`, loginData);\n  }\n  register(data) {\n    return this.http.post(`${this.apiUrl}register/`, data);\n  }\n  getMe() {\n    return this.http.get('core/get-user/');\n  }\n  get ssl() {\n    return location.protocol === 'https:';\n  }\n  /**\n   * Função para setar o token no cookie\n   * @param token Token que vem da API\n   * @param keep Se true, o cookie expira em 60 dias, se false, o cookie expira quando o browser é fechado\n   * @return void\n   *\n   * @author Kauã Landi\n   */\n  setToken(token, keep = false) {\n    if (this.storage.cookies) {\n      this.cookieService.set('token', token, keep ? 60 : undefined, '/', undefined, this.ssl, 'Strict');\n    } else {\n      sessionStorage.setItem('token', token);\n    }\n  }\n  logout() {\n    this.setToken('', false);\n    this.router.navigate(['login/']);\n  }\n  forgotPassword(email) {\n    return this.http.post('core/forgot-password/', {\n      email\n    });\n  }\n  rescurePassword(body) {\n    body['new_password'] = Md5.init(body['new_password']).toUpperCase();\n    return this.http.post('core/change-password-forgot-password/', body);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.CookieService), i0.ɵɵinject(i3.StorageService), i0.ɵɵinject(i4.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Md5","AuthService","constructor","http","cookieService","storage","router","apiUrl","login","email","password","loginData","console","log","post","register","data","getMe","get","ssl","location","protocol","setToken","token","keep","cookies","set","undefined","sessionStorage","setItem","logout","navigate","forgotPassword","rescurePassword","body","init","toUpperCase","_","i0","ɵɵinject","i1","HttpService","i2","CookieService","i3","StorageService","i4","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\lucas\\OneDrive\\Documentos\\GitHub\\CBLXToolPFP\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["//auth.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { IToken, IUser } from '@models/user';\r\nimport { Md5 } from 'md5-typescript';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { BodyJson, HttpService } from './http.service';\r\nimport { StorageService } from './storage.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(\r\n    private http: HttpService,\r\n    private cookieService: CookieService,\r\n    private storage: StorageService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    const loginData = { email: email, password: password };\r\n    console.log(\"Sending login data:\", loginData);  // Apenas para debug, remover em produção\r\n    console.log(\"Email\", email, \"Password\", password);  // Apenas para debug, remover em produção\r\n    return this.http.post<IToken>(`${this.apiUrl}auth-login/`, loginData);\r\n  }\r\n  \r\n\r\n  private apiUrl = 'http://localhost:8000/';\r\n\r\n\r\n  register(data: any): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}register/`, data);\r\n  }\r\n  \r\n\r\n  getMe() {\r\n    return this.http.get<IUser>('core/get-user/');\r\n  }\r\n\r\n  get ssl() {\r\n    return location.protocol === 'https:';\r\n  }\r\n\r\n  /**\r\n   * Função para setar o token no cookie\r\n   * @param token Token que vem da API\r\n   * @param keep Se true, o cookie expira em 60 dias, se false, o cookie expira quando o browser é fechado\r\n   * @return void\r\n   *\r\n   * @author Kauã Landi\r\n   */\r\n  setToken(token: string, keep = false): void {\r\n    if (this.storage.cookies) {\r\n      this.cookieService.set(\r\n        'token',\r\n        token,\r\n        keep ? 60 : undefined,\r\n        '/',\r\n        undefined,\r\n        this.ssl,\r\n        'Strict'\r\n      );\r\n    } else {\r\n      sessionStorage.setItem('token', token);\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    this.setToken('', false);\r\n    this.router.navigate(['login/']);\r\n  }\r\n\r\n  forgotPassword(email: string) {\r\n    return this.http.post('core/forgot-password/', { email });\r\n  }\r\n\r\n  rescurePassword(body: BodyJson) {\r\n    body['new_password'] = Md5.init(body['new_password']).toUpperCase();\r\n    return this.http.post('core/change-password-forgot-password/', body);\r\n  }\r\n}\r\n"],"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;;;;AASpC,OAAM,MAAOC,WAAW;EACtBC,YACUC,IAAiB,EACjBC,aAA4B,EAC5BC,OAAuB,EACvBC,MAAc;IAHd,KAAAH,IAAI,GAAJA,IAAI;IACJ,KAAAC,aAAa,GAAbA,aAAa;IACb,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,MAAM,GAANA,MAAM;IAWR,KAAAC,MAAM,GAAG,wBAAwB;EAVtC;EAEHC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,SAAS,GAAG;MAAEF,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAE;IACtDE,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,SAAS,CAAC,CAAC,CAAE;IAChDC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEJ,KAAK,EAAE,UAAU,EAAEC,QAAQ,CAAC,CAAC,CAAE;IACpD,OAAO,IAAI,CAACP,IAAI,CAACW,IAAI,CAAS,GAAG,IAAI,CAACP,MAAM,aAAa,EAAEI,SAAS,CAAC;EACvE;EAMAI,QAAQA,CAACC,IAAS;IAChB,OAAO,IAAI,CAACb,IAAI,CAACW,IAAI,CAAC,GAAG,IAAI,CAACP,MAAM,WAAW,EAAES,IAAI,CAAC;EACxD;EAGAC,KAAKA,CAAA;IACH,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAQ,gBAAgB,CAAC;EAC/C;EAEA,IAAIC,GAAGA,CAAA;IACL,OAAOC,QAAQ,CAACC,QAAQ,KAAK,QAAQ;EACvC;EAEA;;;;;;;;EAQAC,QAAQA,CAACC,KAAa,EAAEC,IAAI,GAAG,KAAK;IAClC,IAAI,IAAI,CAACnB,OAAO,CAACoB,OAAO,EAAE;MACxB,IAAI,CAACrB,aAAa,CAACsB,GAAG,CACpB,OAAO,EACPH,KAAK,EACLC,IAAI,GAAG,EAAE,GAAGG,SAAS,EACrB,GAAG,EACHA,SAAS,EACT,IAAI,CAACR,GAAG,EACR,QAAQ,CACT;KACF,MAAM;MACLS,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEN,KAAK,CAAC;;EAE1C;EAEAO,MAAMA,CAAA;IACJ,IAAI,CAACR,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC;IACxB,IAAI,CAAChB,MAAM,CAACyB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,cAAcA,CAACvB,KAAa;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACW,IAAI,CAAC,uBAAuB,EAAE;MAAEL;IAAK,CAAE,CAAC;EAC3D;EAEAwB,eAAeA,CAACC,IAAc;IAC5BA,IAAI,CAAC,cAAc,CAAC,GAAGlC,GAAG,CAACmC,IAAI,CAACD,IAAI,CAAC,cAAc,CAAC,CAAC,CAACE,WAAW,EAAE;IACnE,OAAO,IAAI,CAACjC,IAAI,CAACW,IAAI,CAAC,uCAAuC,EAAEoB,IAAI,CAAC;EACtE;EAAC,QAAAG,CAAA,G;qBApEUpC,WAAW,EAAAqC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,cAAA,GAAAP,EAAA,CAAAC,QAAA,CAAAO,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX/C,WAAW;IAAAgD,OAAA,EAAXhD,WAAW,CAAAiD,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
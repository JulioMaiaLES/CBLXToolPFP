{"ast":null,"code":"import utils from '../../scoring/utils.esm.js';\nimport { zxcvbnOptions } from '../../Options.esm.js';\nconst calcAverageDegree = graph => {\n  let average = 0;\n  Object.keys(graph).forEach(key => {\n    const neighbors = graph[key];\n    average += neighbors.filter(entry => !!entry).length;\n  });\n  average /= Object.entries(graph).length;\n  return average;\n};\nconst estimatePossiblePatterns = ({\n  token,\n  graph,\n  turns\n}) => {\n  const startingPosition = Object.keys(zxcvbnOptions.graphs[graph]).length;\n  const averageDegree = calcAverageDegree(zxcvbnOptions.graphs[graph]);\n  let guesses = 0;\n  const tokenLength = token.length;\n  // # estimate the number of possible patterns w/ tokenLength or less with turns or less.\n  for (let i = 2; i <= tokenLength; i += 1) {\n    const possibleTurns = Math.min(turns, i - 1);\n    for (let j = 1; j <= possibleTurns; j += 1) {\n      guesses += utils.nCk(i - 1, j - 1) * startingPosition * averageDegree ** j;\n    }\n  }\n  return guesses;\n};\nvar spatialMatcher = ({\n  graph,\n  token,\n  shiftedCount,\n  turns\n}) => {\n  let guesses = estimatePossiblePatterns({\n    token,\n    graph,\n    turns\n  });\n  // add extra guesses for shifted keys. (% instead of 5, A instead of a.)\n  // math is similar to extra guesses of l33t substitutions in dictionary matches.\n  if (shiftedCount) {\n    const unShiftedCount = token.length - shiftedCount;\n    if (shiftedCount === 0 || unShiftedCount === 0) {\n      guesses *= 2;\n    } else {\n      let shiftedVariations = 0;\n      for (let i = 1; i <= Math.min(shiftedCount, unShiftedCount); i += 1) {\n        shiftedVariations += utils.nCk(shiftedCount + unShiftedCount, i);\n      }\n      guesses *= shiftedVariations;\n    }\n  }\n  return Math.round(guesses);\n};\nexport { spatialMatcher as default };","map":{"version":3,"names":["utils","zxcvbnOptions","calcAverageDegree","graph","average","Object","keys","forEach","key","neighbors","filter","entry","length","entries","estimatePossiblePatterns","token","turns","startingPosition","graphs","averageDegree","guesses","tokenLength","i","possibleTurns","Math","min","j","nCk","spatialMatcher","shiftedCount","unShiftedCount","shiftedVariations","round","default"],"sources":["C:/Users/Julio/Documents/Projects/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/matcher/spatial/scoring.esm.js"],"sourcesContent":["import utils from '../../scoring/utils.esm.js';\r\nimport { zxcvbnOptions } from '../../Options.esm.js';\r\n\r\nconst calcAverageDegree = graph => {\r\n  let average = 0;\r\n  Object.keys(graph).forEach(key => {\r\n    const neighbors = graph[key];\r\n    average += neighbors.filter(entry => !!entry).length;\r\n  });\r\n  average /= Object.entries(graph).length;\r\n  return average;\r\n};\r\nconst estimatePossiblePatterns = ({\r\n  token,\r\n  graph,\r\n  turns\r\n}) => {\r\n  const startingPosition = Object.keys(zxcvbnOptions.graphs[graph]).length;\r\n  const averageDegree = calcAverageDegree(zxcvbnOptions.graphs[graph]);\r\n  let guesses = 0;\r\n  const tokenLength = token.length;\r\n  // # estimate the number of possible patterns w/ tokenLength or less with turns or less.\r\n  for (let i = 2; i <= tokenLength; i += 1) {\r\n    const possibleTurns = Math.min(turns, i - 1);\r\n    for (let j = 1; j <= possibleTurns; j += 1) {\r\n      guesses += utils.nCk(i - 1, j - 1) * startingPosition * averageDegree ** j;\r\n    }\r\n  }\r\n  return guesses;\r\n};\r\nvar spatialMatcher = (({\r\n  graph,\r\n  token,\r\n  shiftedCount,\r\n  turns\r\n}) => {\r\n  let guesses = estimatePossiblePatterns({\r\n    token,\r\n    graph,\r\n    turns\r\n  });\r\n  // add extra guesses for shifted keys. (% instead of 5, A instead of a.)\r\n  // math is similar to extra guesses of l33t substitutions in dictionary matches.\r\n  if (shiftedCount) {\r\n    const unShiftedCount = token.length - shiftedCount;\r\n    if (shiftedCount === 0 || unShiftedCount === 0) {\r\n      guesses *= 2;\r\n    } else {\r\n      let shiftedVariations = 0;\r\n      for (let i = 1; i <= Math.min(shiftedCount, unShiftedCount); i += 1) {\r\n        shiftedVariations += utils.nCk(shiftedCount + unShiftedCount, i);\r\n      }\r\n      guesses *= shiftedVariations;\r\n    }\r\n  }\r\n  return Math.round(guesses);\r\n});\r\n\r\nexport { spatialMatcher as default };\r\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,4BAA4B;AAC9C,SAASC,aAAa,QAAQ,sBAAsB;AAEpD,MAAMC,iBAAiB,GAAGC,KAAK,IAAI;EACjC,IAAIC,OAAO,GAAG,CAAC;EACfC,MAAM,CAACC,IAAI,CAACH,KAAK,CAAC,CAACI,OAAO,CAACC,GAAG,IAAI;IAChC,MAAMC,SAAS,GAAGN,KAAK,CAACK,GAAG,CAAC;IAC5BJ,OAAO,IAAIK,SAAS,CAACC,MAAM,CAACC,KAAK,IAAI,CAAC,CAACA,KAAK,CAAC,CAACC,MAAM;EACtD,CAAC,CAAC;EACFR,OAAO,IAAIC,MAAM,CAACQ,OAAO,CAACV,KAAK,CAAC,CAACS,MAAM;EACvC,OAAOR,OAAO;AAChB,CAAC;AACD,MAAMU,wBAAwB,GAAGA,CAAC;EAChCC,KAAK;EACLZ,KAAK;EACLa;AACF,CAAC,KAAK;EACJ,MAAMC,gBAAgB,GAAGZ,MAAM,CAACC,IAAI,CAACL,aAAa,CAACiB,MAAM,CAACf,KAAK,CAAC,CAAC,CAACS,MAAM;EACxE,MAAMO,aAAa,GAAGjB,iBAAiB,CAACD,aAAa,CAACiB,MAAM,CAACf,KAAK,CAAC,CAAC;EACpE,IAAIiB,OAAO,GAAG,CAAC;EACf,MAAMC,WAAW,GAAGN,KAAK,CAACH,MAAM;EAChC;EACA,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAID,WAAW,EAAEC,CAAC,IAAI,CAAC,EAAE;IACxC,MAAMC,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACT,KAAK,EAAEM,CAAC,GAAG,CAAC,CAAC;IAC5C,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,aAAa,EAAEG,CAAC,IAAI,CAAC,EAAE;MAC1CN,OAAO,IAAIpB,KAAK,CAAC2B,GAAG,CAACL,CAAC,GAAG,CAAC,EAAEI,CAAC,GAAG,CAAC,CAAC,GAAGT,gBAAgB,GAAGE,aAAa,IAAIO,CAAC;IAC5E;EACF;EACA,OAAON,OAAO;AAChB,CAAC;AACD,IAAIQ,cAAc,GAAIA,CAAC;EACrBzB,KAAK;EACLY,KAAK;EACLc,YAAY;EACZb;AACF,CAAC,KAAK;EACJ,IAAII,OAAO,GAAGN,wBAAwB,CAAC;IACrCC,KAAK;IACLZ,KAAK;IACLa;EACF,CAAC,CAAC;EACF;EACA;EACA,IAAIa,YAAY,EAAE;IAChB,MAAMC,cAAc,GAAGf,KAAK,CAACH,MAAM,GAAGiB,YAAY;IAClD,IAAIA,YAAY,KAAK,CAAC,IAAIC,cAAc,KAAK,CAAC,EAAE;MAC9CV,OAAO,IAAI,CAAC;IACd,CAAC,MAAM;MACL,IAAIW,iBAAiB,GAAG,CAAC;MACzB,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIE,IAAI,CAACC,GAAG,CAACI,YAAY,EAAEC,cAAc,CAAC,EAAER,CAAC,IAAI,CAAC,EAAE;QACnES,iBAAiB,IAAI/B,KAAK,CAAC2B,GAAG,CAACE,YAAY,GAAGC,cAAc,EAAER,CAAC,CAAC;MAClE;MACAF,OAAO,IAAIW,iBAAiB;IAC9B;EACF;EACA,OAAOP,IAAI,CAACQ,KAAK,CAACZ,OAAO,CAAC;AAC5B,CAAE;AAEF,SAASQ,cAAc,IAAIK,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
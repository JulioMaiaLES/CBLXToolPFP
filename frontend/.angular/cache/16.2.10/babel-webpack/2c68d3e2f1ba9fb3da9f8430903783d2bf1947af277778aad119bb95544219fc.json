{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nexport let ActComponent = class ActComponent {\n  // actForm: FormGroup;\n  constructor(dialog, dialogRef, sidebarService) {\n    this.dialog = dialog;\n    this.dialogRef = dialogRef;\n    this.sidebarService = sidebarService;\n    this.isMenuHidden = true;\n    this.textAreas = [''];\n    this.files = []; // No changes needed, already correctly typed\n    this.renderedFiles = []; // Properly typed with the interface defined\n    this.images = []; // No changes needed, correctly typed\n    this.fileReader = new FileReader(); // No changes needed, properly initialized\n    this.objectUrls = [];\n    // this.actForm = new FormGroup({\n    //   image: new FormControl('', Validators.required),\n    //   file: new FormControl('', Validators.required),\n    //   text_input: new FormControl('', Validators.required),\n    // });\n  }\n\n  toggleMenu() {\n    this.sidebarService.toggleSidebar(); // Delegate toggling to the SidebarService\n  }\n\n  adicionarLinha() {\n    this.textAreas.push('');\n  }\n  onFileSelected(event) {\n    const inputElement = event?.target;\n    if (inputElement && inputElement.files) {\n      const files = inputElement.files;\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        const renderType = this.determineRenderType(file);\n        const renderedFile = {\n          file,\n          renderType\n        };\n        if (renderType === 'pdf') {\n          renderedFile.downloadUrl = this.getFileUrl(file);\n        }\n        this.renderedFiles.push(renderedFile);\n      }\n    }\n  }\n  determineRenderType(file) {\n    if (file.type.includes('image')) {\n      return 'image';\n    } else if (file.type.includes('pdf')) {\n      return 'pdf';\n    } else {\n      return 'other';\n    }\n  }\n  getFileUrl(file) {\n    const url = URL.createObjectURL(file);\n    this.objectUrls.push(url); // Track URLs for cleanup\n    return url;\n  }\n  cleanupObjectUrls() {\n    this.objectUrls.forEach(url => URL.revokeObjectURL(url));\n    this.objectUrls = [];\n  }\n  downloadFile(file) {\n    const url = this.getFileUrl(file);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = file.name;\n    a.click();\n  }\n  handleKeyboardEvent(event) {\n    if (event.key === '/') {\n      clearTimeout(this.debounceTimer);\n      this.debounceTimer = setTimeout(() => this.openModal(), 300);\n    }\n  }\n  // Helper method to process files\n  processFiles(files) {\n    const fileArray = Array.from(files); // Convert FileList to an array once\n    fileArray.forEach(file => {\n      if (this.isImage(file)) {\n        this.imageRenderer(file); // Process image files\n      } else {\n        this.files.push(file); // Store non-image files in this.files\n      }\n    });\n    // Optional: Log the processed files or remove this in production\n    console.log('Non-image files:', this.files);\n  }\n  // Check if the file is an image based on its type\n  isImage(file) {\n    return file.type.startsWith('image/');\n  }\n  // Image rendering method\n  imageRenderer(file) {\n    this.fileReader.onload = () => {\n      this.images.push({\n        name: file.name,\n        value: this.fileReader.result // Store image as base64 string\n      });\n    };\n\n    this.fileReader.readAsDataURL(file); // Read the image file as a Data URL\n  }\n\n  openModal() {\n    import('@app/components/modal/modal.component').then(({\n      ModalComponent\n    }) => {\n      const dialogRef = this.dialog.open(ModalComponent, {\n        width: '250px'\n      });\n      dialogRef.afterClosed().subscribe(files => {\n        if (files && files.length > 0) {\n          this.processFiles(files); // Delegate file processing to a helper method\n        }\n      });\n    });\n  }\n  // createAct(actData: any){\n  //   this.actService.createEngage(actData).subscribe(\n  //     (response) => {\n  //       console.log('Act created Successfully');\n  //     },\n  //     (error) => {\n  //       console.error('Error creating engage:', error)\n  //     }\n  //   )\n  // }\n  getFileIcon(file) {\n    if (file.type.includes('pdf')) {\n      return '../../../assets/images/pdf.png';\n    } else if (file.type.includes('csv')) {\n      return '../../../assets/images/csv.png';\n    } else if (file.type.includes('ppt')) {\n      return '../../../assets/images/ppt.png';\n    } else if (file.type.includes('xls')) {\n      return '../../../assets/images/xls.png';\n    } else if (file.type.includes('doc') || file.type.includes('word')) {\n      return '../../../assets/images/doc.png';\n    } else {\n      return '../../../assets/images/file.png';\n    }\n  }\n  autoResize(event) {\n    const target = event.target;\n    // Reset height to auto to calculate new height\n    target.style.height = 'auto';\n    // Set new height based on scrollHeight\n    target.style.height = target.scrollHeight + 'px';\n    // Reset width to auto to calculate new width\n    target.style.width = 'auto';\n    // Set new width based on scrollWidth\n    target.style.width = target.scrollWidth + 'px';\n  }\n};\n__decorate([HostListener('document:keydown', ['$event'])], ActComponent.prototype, \"handleKeyboardEvent\", null);\nActComponent = __decorate([Component({\n  selector: 'app-act',\n  templateUrl: './act.component.html',\n  styleUrls: ['./act.component.scss']\n})], ActComponent);","map":{"version":3,"names":["Component","HostListener","ActComponent","constructor","dialog","dialogRef","sidebarService","isMenuHidden","textAreas","files","renderedFiles","images","fileReader","FileReader","objectUrls","toggleMenu","toggleSidebar","adicionarLinha","push","onFileSelected","event","inputElement","target","i","length","file","renderType","determineRenderType","renderedFile","downloadUrl","getFileUrl","type","includes","url","URL","createObjectURL","cleanupObjectUrls","forEach","revokeObjectURL","downloadFile","a","document","createElement","href","download","name","click","handleKeyboardEvent","key","clearTimeout","debounceTimer","setTimeout","openModal","processFiles","fileArray","Array","from","isImage","imageRenderer","console","log","startsWith","onload","value","result","readAsDataURL","then","ModalComponent","open","width","afterClosed","subscribe","getFileIcon","autoResize","style","height","scrollHeight","scrollWidth","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Julio\\Documents\\Projects\\CBLXToolPFP\\frontend\\src\\app\\pages\\act\\act.component.ts"],"sourcesContent":["import { Component, HostListener } from '@angular/core';\r\nimport { ProgressService } from '../../services/progress.service';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ModalComponent } from '@app/components/modal/modal.component';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ActService } from '@app/services/act.service';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { SidebarService } from '../../../app/services/sidebar.service'\r\n\r\n\r\n@Component({\r\n  selector: 'app-act',\r\n  templateUrl: './act.component.html',\r\n  styleUrls: ['./act.component.scss'],\r\n})\r\nexport class ActComponent {\r\n  isMenuHidden: boolean = true;\r\n  textAreas: string[] = [''];\r\n  files: File[] = [];  // No changes needed, already correctly typed\r\n  renderedFiles: RenderedFile[] = [];  // Properly typed with the interface defined\r\n  images: { name: string; value: string }[] = [];  // No changes needed, correctly typed\r\n\r\n  private debounceTimer!: ReturnType<typeof setTimeout>;  // Correct type declaration for debounceTimer\r\n  private fileReader: FileReader = new FileReader();  // No changes needed, properly initialized\r\n  private objectUrls: string[] = [];\r\n\r\n  // actForm: FormGroup;\r\n\r\n  constructor(\r\n    public dialog: MatDialog, \r\n    public dialogRef: MatDialogRef<ModalComponent>, \r\n    private sidebarService: SidebarService,\r\n    // private actService: ActService\r\n  ) {\r\n      // this.actForm = new FormGroup({\r\n      //   image: new FormControl('', Validators.required),\r\n      //   file: new FormControl('', Validators.required),\r\n      //   text_input: new FormControl('', Validators.required),\r\n      // });\r\n  }\r\n\r\n  toggleMenu(): void {\r\n    this.sidebarService.toggleSidebar();  // Delegate toggling to the SidebarService\r\n  }\r\n\r\n  adicionarLinha():void {\r\n    this.textAreas.push('');\r\n  }\r\n\r\n  onFileSelected(event: any): void {\r\n    const inputElement = event?.target as HTMLInputElement;\r\n    if (inputElement && inputElement.files) {\r\n      const files: FileList = inputElement.files;\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file: File = files[i];\r\n        const renderType = this.determineRenderType(file);\r\n        const renderedFile: RenderedFile = { file, renderType };\r\n        if (renderType === 'pdf') {\r\n          renderedFile.downloadUrl = this.getFileUrl(file);\r\n        }\r\n        this.renderedFiles.push(renderedFile);\r\n      }\r\n    }\r\n  }\r\n\r\n  determineRenderType(file: File): 'image' | 'pdf' | 'other' {\r\n    if (file.type.includes('image')) {\r\n      return 'image';\r\n    } else if (file.type.includes('pdf')) {\r\n      return 'pdf';\r\n    } else {\r\n      return 'other';\r\n    }\r\n  }\r\n\r\n  getFileUrl(file: File): string {\r\n    const url = URL.createObjectURL(file);\r\n    this.objectUrls.push(url); // Track URLs for cleanup\r\n    return url;\r\n  }\r\n  \r\n  cleanupObjectUrls(): void {\r\n    this.objectUrls.forEach(url => URL.revokeObjectURL(url));\r\n    this.objectUrls = [];\r\n  }\r\n  \r\n  downloadFile(file: File) {\r\n    const url = this.getFileUrl(file);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = file.name;\r\n    a.click();\r\n  }\r\n\r\n  @HostListener('document:keydown', ['$event'])\r\n  handleKeyboardEvent(event: KeyboardEvent) {\r\n    if (event.key === '/') {\r\n      clearTimeout(this.debounceTimer);\r\n      this.debounceTimer = setTimeout(() => this.openModal(), 300);\r\n    }\r\n  }\r\n\r\n  // Helper method to process files\r\n  private processFiles(files: FileList): void {\r\n    const fileArray = Array.from(files); // Convert FileList to an array once\r\n\r\n    fileArray.forEach(file => {\r\n      if (this.isImage(file)) {\r\n        this.imageRenderer(file); // Process image files\r\n      } else {\r\n        this.files.push(file); // Store non-image files in this.files\r\n      }\r\n    });\r\n\r\n    // Optional: Log the processed files or remove this in production\r\n    console.log('Non-image files:', this.files);\r\n  }\r\n\r\n  // Check if the file is an image based on its type\r\n  private isImage(file: File): boolean {\r\n    return file.type.startsWith('image/');\r\n  }\r\n\r\n // Image rendering method\r\n  private imageRenderer(file: File): void {\r\n    this.fileReader.onload = () => {\r\n      this.images.push({\r\n        name: file.name,\r\n        value: this.fileReader.result as string // Store image as base64 string\r\n      });\r\n    };\r\n    this.fileReader.readAsDataURL(file); // Read the image file as a Data URL\r\n  }\r\n\r\n  openModal(): void {\r\n    import('@app/components/modal/modal.component').then(({ ModalComponent }) => {\r\n      const dialogRef = this.dialog.open(ModalComponent, {\r\n        width: '250px',\r\n      });\r\n  \r\n      dialogRef.afterClosed().subscribe((files: FileList | null) => {\r\n        if (files && files.length > 0) {\r\n          this.processFiles(files); // Delegate file processing to a helper method\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // createAct(actData: any){\r\n  //   this.actService.createEngage(actData).subscribe(\r\n  //     (response) => {\r\n  //       console.log('Act created Successfully');\r\n  //     },\r\n  //     (error) => {\r\n  //       console.error('Error creating engage:', error)\r\n  //     }\r\n  //   )\r\n  // }\r\n\r\n  getFileIcon(file: File) {\r\n    if (file.type.includes('pdf')) {\r\n      return '../../../assets/images/pdf.png';\r\n    } else if (file.type.includes('csv')) {\r\n      return '../../../assets/images/csv.png';\r\n    } else if (file.type.includes('ppt')) {\r\n      return '../../../assets/images/ppt.png';\r\n    } else if (file.type.includes('xls')) {\r\n      return '../../../assets/images/xls.png';\r\n    } else if (file.type.includes('doc') || file.type.includes('word')) {\r\n      return '../../../assets/images/doc.png';\r\n    } else{\r\n      return '../../../assets/images/file.png';\r\n    }\r\n  }\r\n\r\n  autoResize(event: any) {\r\n    const target = event.target;\r\n    // Reset height to auto to calculate new height\r\n    target.style.height = 'auto';\r\n    // Set new height based on scrollHeight\r\n    target.style.height = target.scrollHeight + 'px';\r\n\r\n    // Reset width to auto to calculate new width\r\n    target.style.width = 'auto';\r\n    // Set new width based on scrollWidth\r\n    target.style.width = target.scrollWidth + 'px';\r\n  }\r\n\r\n\r\n}\r\n\r\ninterface RenderedFile {\r\n  file: File;\r\n  renderType: 'image' | 'pdf' | 'other';\r\n  downloadUrl?: string;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
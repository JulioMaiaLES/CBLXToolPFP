{"ast":null,"code":"class TrieNode {\n  constructor(parents = []) {\n    this.parents = parents;\n    // eslint-disable-next-line no-use-before-define\n    this.children = new Map();\n  }\n  addSub(key, ...subs) {\n    const firstChar = key.charAt(0);\n    if (!this.children.has(firstChar)) {\n      this.children.set(firstChar, new TrieNode([...this.parents, firstChar]));\n    }\n    let cur = this.children.get(firstChar);\n    for (let i = 1; i < key.length; i += 1) {\n      const c = key.charAt(i);\n      if (!cur.hasChild(c)) {\n        cur.addChild(c);\n      }\n      cur = cur.getChild(c);\n    }\n    cur.subs = (cur.subs || []).concat(subs);\n    return this;\n  }\n  getChild(child) {\n    return this.children.get(child);\n  }\n  isTerminal() {\n    return !!this.subs;\n  }\n  addChild(child) {\n    if (!this.hasChild(child)) {\n      this.children.set(child, new TrieNode([...this.parents, child]));\n    }\n  }\n  hasChild(child) {\n    return this.children.has(child);\n  }\n}\nexport { TrieNode as default };","map":{"version":3,"names":["TrieNode","constructor","parents","children","Map","addSub","key","subs","firstChar","charAt","has","set","cur","get","i","length","c","hasChild","addChild","getChild","concat","child","isTerminal","default"],"sources":["C:/Users/j-mai/Documents/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/matcher/dictionary/variants/matching/unmunger/TrieNode.esm.js"],"sourcesContent":["class TrieNode {\n  constructor(parents = []) {\n    this.parents = parents;\n    // eslint-disable-next-line no-use-before-define\n    this.children = new Map();\n  }\n  addSub(key, ...subs) {\n    const firstChar = key.charAt(0);\n    if (!this.children.has(firstChar)) {\n      this.children.set(firstChar, new TrieNode([...this.parents, firstChar]));\n    }\n    let cur = this.children.get(firstChar);\n    for (let i = 1; i < key.length; i += 1) {\n      const c = key.charAt(i);\n      if (!cur.hasChild(c)) {\n        cur.addChild(c);\n      }\n      cur = cur.getChild(c);\n    }\n    cur.subs = (cur.subs || []).concat(subs);\n    return this;\n  }\n  getChild(child) {\n    return this.children.get(child);\n  }\n  isTerminal() {\n    return !!this.subs;\n  }\n  addChild(child) {\n    if (!this.hasChild(child)) {\n      this.children.set(child, new TrieNode([...this.parents, child]));\n    }\n  }\n  hasChild(child) {\n    return this.children.has(child);\n  }\n}\n\nexport { TrieNode as default };\n"],"mappings":"AAAA,MAAMA,QAAQ,CAAC;EACbC,WAAWA,CAACC,OAAO,GAAG,EAAE,EAAE;IACxB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB;IACA,IAAI,CAACC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC3B;EACAC,MAAMA,CAACC,GAAG,EAAE,GAAGC,IAAI,EAAE;IACnB,MAAMC,SAAS,GAAGF,GAAG,CAACG,MAAM,CAAC,CAAC,CAAC;IAC/B,IAAI,CAAC,IAAI,CAACN,QAAQ,CAACO,GAAG,CAACF,SAAS,CAAC,EAAE;MACjC,IAAI,CAACL,QAAQ,CAACQ,GAAG,CAACH,SAAS,EAAE,IAAIR,QAAQ,CAAC,CAAC,GAAG,IAAI,CAACE,OAAO,EAAEM,SAAS,CAAC,CAAC,CAAC;IAC1E;IACA,IAAII,GAAG,GAAG,IAAI,CAACT,QAAQ,CAACU,GAAG,CAACL,SAAS,CAAC;IACtC,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,GAAG,CAACS,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MACtC,MAAME,CAAC,GAAGV,GAAG,CAACG,MAAM,CAACK,CAAC,CAAC;MACvB,IAAI,CAACF,GAAG,CAACK,QAAQ,CAACD,CAAC,CAAC,EAAE;QACpBJ,GAAG,CAACM,QAAQ,CAACF,CAAC,CAAC;MACjB;MACAJ,GAAG,GAAGA,GAAG,CAACO,QAAQ,CAACH,CAAC,CAAC;IACvB;IACAJ,GAAG,CAACL,IAAI,GAAG,CAACK,GAAG,CAACL,IAAI,IAAI,EAAE,EAAEa,MAAM,CAACb,IAAI,CAAC;IACxC,OAAO,IAAI;EACb;EACAY,QAAQA,CAACE,KAAK,EAAE;IACd,OAAO,IAAI,CAAClB,QAAQ,CAACU,GAAG,CAACQ,KAAK,CAAC;EACjC;EACAC,UAAUA,CAAA,EAAG;IACX,OAAO,CAAC,CAAC,IAAI,CAACf,IAAI;EACpB;EACAW,QAAQA,CAACG,KAAK,EAAE;IACd,IAAI,CAAC,IAAI,CAACJ,QAAQ,CAACI,KAAK,CAAC,EAAE;MACzB,IAAI,CAAClB,QAAQ,CAACQ,GAAG,CAACU,KAAK,EAAE,IAAIrB,QAAQ,CAAC,CAAC,GAAG,IAAI,CAACE,OAAO,EAAEmB,KAAK,CAAC,CAAC,CAAC;IAClE;EACF;EACAJ,QAAQA,CAACI,KAAK,EAAE;IACd,OAAO,IAAI,CAAClB,QAAQ,CAACO,GAAG,CAACW,KAAK,CAAC;EACjC;AACF;AAEA,SAASrB,QAAQ,IAAIuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
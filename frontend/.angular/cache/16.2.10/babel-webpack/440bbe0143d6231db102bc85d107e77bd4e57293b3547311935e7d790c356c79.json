{"ast":null,"code":"import { zxcvbnOptions } from '../../../../Options.esm.js';\nimport getCleanPasswords from './unmunger/getCleanPasswords.esm.js';\nconst getExtras = (passwordWithSubs, i, j) => {\n  const previousChanges = passwordWithSubs.changes.filter(changes => {\n    return changes.i < i;\n  });\n  const iUnsubbed = previousChanges.reduce((value, change) => {\n    return value - change.letter.length + change.substitution.length;\n  }, i);\n  const usedChanges = passwordWithSubs.changes.filter(changes => {\n    return changes.i >= i && changes.i <= j;\n  });\n  const jUnsubbed = usedChanges.reduce((value, change) => {\n    return value - change.letter.length + change.substitution.length;\n  }, j - i + iUnsubbed);\n  const filtered = [];\n  const subDisplay = [];\n  usedChanges.forEach(value => {\n    const existingIndex = filtered.findIndex(t => {\n      return t.letter === value.letter && t.substitution === value.substitution;\n    });\n    if (existingIndex < 0) {\n      filtered.push({\n        letter: value.letter,\n        substitution: value.substitution\n      });\n      subDisplay.push(`${value.substitution} -> ${value.letter}`);\n    }\n  });\n  return {\n    i: iUnsubbed,\n    j: jUnsubbed,\n    subs: filtered,\n    subDisplay: subDisplay.join(', ')\n  };\n};\n/*\r\n * -------------------------------------------------------------------------------\r\n *  Dictionary l33t matching -----------------------------------------------------\r\n * -------------------------------------------------------------------------------\r\n */\nclass MatchL33t {\n  constructor(defaultMatch) {\n    this.defaultMatch = defaultMatch;\n  }\n  isAlreadyIncluded(matches, newMatch) {\n    return matches.some(l33tMatch => {\n      return Object.entries(l33tMatch).every(([key, value]) => {\n        return key === 'subs' || value === newMatch[key];\n      });\n    });\n  }\n  match({\n    password\n  }) {\n    const matches = [];\n    const subbedPasswords = getCleanPasswords(password, zxcvbnOptions.l33tMaxSubstitutions, zxcvbnOptions.trieNodeRoot);\n    let hasFullMatch = false;\n    let isFullSubstitution = true;\n    subbedPasswords.forEach(subbedPassword => {\n      if (hasFullMatch) {\n        return;\n      }\n      const matchedDictionary = this.defaultMatch({\n        password: subbedPassword.password,\n        useLevenshtein: isFullSubstitution\n      });\n      // only the first entry has a full substitution\n      isFullSubstitution = false;\n      matchedDictionary.forEach(match => {\n        if (!hasFullMatch) {\n          hasFullMatch = match.i === 0 && match.j === password.length - 1;\n        }\n        const extras = getExtras(subbedPassword, match.i, match.j);\n        const token = password.slice(extras.i, +extras.j + 1 || 9e9);\n        const newMatch = {\n          ...match,\n          l33t: true,\n          token,\n          ...extras\n        };\n        const alreadyIncluded = this.isAlreadyIncluded(matches, newMatch);\n        // only return the matches that contain an actual substitution\n        if (token.toLowerCase() !== match.matchedWord && !alreadyIncluded) {\n          matches.push(newMatch);\n        }\n      });\n    });\n    // filter single-character l33t matches to reduce noise.\n    // otherwise '1' matches 'i', '4' matches 'a', both very common English words\n    // with low dictionary rank.\n    return matches.filter(match => match.token.length > 1);\n  }\n}\nexport { MatchL33t as default };","map":{"version":3,"names":["zxcvbnOptions","getCleanPasswords","getExtras","passwordWithSubs","i","j","previousChanges","changes","filter","iUnsubbed","reduce","value","change","letter","length","substitution","usedChanges","jUnsubbed","filtered","subDisplay","forEach","existingIndex","findIndex","t","push","subs","join","MatchL33t","constructor","defaultMatch","isAlreadyIncluded","matches","newMatch","some","l33tMatch","Object","entries","every","key","match","password","subbedPasswords","l33tMaxSubstitutions","trieNodeRoot","hasFullMatch","isFullSubstitution","subbedPassword","matchedDictionary","useLevenshtein","extras","token","slice","l33t","alreadyIncluded","toLowerCase","matchedWord","default"],"sources":["C:/Users/lucas/OneDrive/Documentos/GitHub/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/matcher/dictionary/variants/matching/l33t.esm.js"],"sourcesContent":["import { zxcvbnOptions } from '../../../../Options.esm.js';\r\nimport getCleanPasswords from './unmunger/getCleanPasswords.esm.js';\r\n\r\nconst getExtras = (passwordWithSubs, i, j) => {\r\n  const previousChanges = passwordWithSubs.changes.filter(changes => {\r\n    return changes.i < i;\r\n  });\r\n  const iUnsubbed = previousChanges.reduce((value, change) => {\r\n    return value - change.letter.length + change.substitution.length;\r\n  }, i);\r\n  const usedChanges = passwordWithSubs.changes.filter(changes => {\r\n    return changes.i >= i && changes.i <= j;\r\n  });\r\n  const jUnsubbed = usedChanges.reduce((value, change) => {\r\n    return value - change.letter.length + change.substitution.length;\r\n  }, j - i + iUnsubbed);\r\n  const filtered = [];\r\n  const subDisplay = [];\r\n  usedChanges.forEach(value => {\r\n    const existingIndex = filtered.findIndex(t => {\r\n      return t.letter === value.letter && t.substitution === value.substitution;\r\n    });\r\n    if (existingIndex < 0) {\r\n      filtered.push({\r\n        letter: value.letter,\r\n        substitution: value.substitution\r\n      });\r\n      subDisplay.push(`${value.substitution} -> ${value.letter}`);\r\n    }\r\n  });\r\n  return {\r\n    i: iUnsubbed,\r\n    j: jUnsubbed,\r\n    subs: filtered,\r\n    subDisplay: subDisplay.join(', ')\r\n  };\r\n};\r\n/*\r\n * -------------------------------------------------------------------------------\r\n *  Dictionary l33t matching -----------------------------------------------------\r\n * -------------------------------------------------------------------------------\r\n */\r\nclass MatchL33t {\r\n  constructor(defaultMatch) {\r\n    this.defaultMatch = defaultMatch;\r\n  }\r\n  isAlreadyIncluded(matches, newMatch) {\r\n    return matches.some(l33tMatch => {\r\n      return Object.entries(l33tMatch).every(([key, value]) => {\r\n        return key === 'subs' || value === newMatch[key];\r\n      });\r\n    });\r\n  }\r\n  match({\r\n    password\r\n  }) {\r\n    const matches = [];\r\n    const subbedPasswords = getCleanPasswords(password, zxcvbnOptions.l33tMaxSubstitutions, zxcvbnOptions.trieNodeRoot);\r\n    let hasFullMatch = false;\r\n    let isFullSubstitution = true;\r\n    subbedPasswords.forEach(subbedPassword => {\r\n      if (hasFullMatch) {\r\n        return;\r\n      }\r\n      const matchedDictionary = this.defaultMatch({\r\n        password: subbedPassword.password,\r\n        useLevenshtein: isFullSubstitution\r\n      });\r\n      // only the first entry has a full substitution\r\n      isFullSubstitution = false;\r\n      matchedDictionary.forEach(match => {\r\n        if (!hasFullMatch) {\r\n          hasFullMatch = match.i === 0 && match.j === password.length - 1;\r\n        }\r\n        const extras = getExtras(subbedPassword, match.i, match.j);\r\n        const token = password.slice(extras.i, +extras.j + 1 || 9e9);\r\n        const newMatch = {\r\n          ...match,\r\n          l33t: true,\r\n          token,\r\n          ...extras\r\n        };\r\n        const alreadyIncluded = this.isAlreadyIncluded(matches, newMatch);\r\n        // only return the matches that contain an actual substitution\r\n        if (token.toLowerCase() !== match.matchedWord && !alreadyIncluded) {\r\n          matches.push(newMatch);\r\n        }\r\n      });\r\n    });\r\n    // filter single-character l33t matches to reduce noise.\r\n    // otherwise '1' matches 'i', '4' matches 'a', both very common English words\r\n    // with low dictionary rank.\r\n    return matches.filter(match => match.token.length > 1);\r\n  }\r\n}\r\n\r\nexport { MatchL33t as default };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { SEPERATOR_CHARS } from '../../data/const.esm.js';\nconst separatorRegex = new RegExp(`[${SEPERATOR_CHARS.join('')}]`);\n/*\r\n *-------------------------------------------------------------------------------\r\n * separators (any semi-repeated special character) -----------------------------\r\n *-------------------------------------------------------------------------------\r\n */\nclass MatchSeparator {\n  static getMostUsedSeparatorChar(password) {\n    const mostUsedSeperators = [...password.split('').filter(c => separatorRegex.test(c)).reduce((memo, c) => {\n      const m = memo.get(c);\n      if (m) {\n        memo.set(c, m + 1);\n      } else {\n        memo.set(c, 1);\n      }\n      return memo;\n    }, new Map()).entries()].sort(([_a, a], [_b, b]) => b - a);\n    if (!mostUsedSeperators.length) return undefined;\n    const match = mostUsedSeperators[0];\n    // If the special character is only used once, don't treat it like a separator\n    if (match[1] < 2) return undefined;\n    return match[0];\n  }\n  static getSeparatorRegex(separator) {\n    return new RegExp(`([^${separator}\\n])(${separator})(?!${separator})`, 'g');\n    // negative lookbehind can be added again in a few years when it is more supported by the browsers (currently 2023)\n    // https://github.com/zxcvbn-ts/zxcvbn/issues/202\n    // return new RegExp(`(?<!${separator})(${separator})(?!${separator})`, 'g')\n  }\n  // eslint-disable-next-line max-statements\n  match({\n    password\n  }) {\n    const result = [];\n    if (password.length === 0) return result;\n    const mostUsedSpecial = MatchSeparator.getMostUsedSeparatorChar(password);\n    if (mostUsedSpecial === undefined) return result;\n    const isSeparator = MatchSeparator.getSeparatorRegex(mostUsedSpecial);\n    // eslint-disable-next-line no-restricted-syntax\n    for (const match of password.matchAll(isSeparator)) {\n      // eslint-disable-next-line no-continue\n      if (match.index === undefined) continue;\n      // add one to the index because we changed the regex from negative lookbehind to something simple.\n      // this simple approach uses the first character before the separater too but we only need the index of the separater\n      // https://github.com/zxcvbn-ts/zxcvbn/issues/202\n      const i = match.index + 1;\n      result.push({\n        pattern: 'separator',\n        token: mostUsedSpecial,\n        i,\n        j: i\n      });\n    }\n    return result;\n  }\n}\nexport { MatchSeparator as default };","map":{"version":3,"names":["SEPERATOR_CHARS","separatorRegex","RegExp","join","MatchSeparator","getMostUsedSeparatorChar","password","mostUsedSeperators","split","filter","c","test","reduce","memo","m","get","set","Map","entries","sort","_a","a","_b","b","length","undefined","match","getSeparatorRegex","separator","result","mostUsedSpecial","isSeparator","matchAll","index","i","push","pattern","token","j","default"],"sources":["C:/Users/Julio/Documents/Projects/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/matcher/separator/matching.esm.js"],"sourcesContent":["import { SEPERATOR_CHARS } from '../../data/const.esm.js';\r\n\r\nconst separatorRegex = new RegExp(`[${SEPERATOR_CHARS.join('')}]`);\r\n/*\r\n *-------------------------------------------------------------------------------\r\n * separators (any semi-repeated special character) -----------------------------\r\n *-------------------------------------------------------------------------------\r\n */\r\nclass MatchSeparator {\r\n  static getMostUsedSeparatorChar(password) {\r\n    const mostUsedSeperators = [...password.split('').filter(c => separatorRegex.test(c)).reduce((memo, c) => {\r\n      const m = memo.get(c);\r\n      if (m) {\r\n        memo.set(c, m + 1);\r\n      } else {\r\n        memo.set(c, 1);\r\n      }\r\n      return memo;\r\n    }, new Map()).entries()].sort(([_a, a], [_b, b]) => b - a);\r\n    if (!mostUsedSeperators.length) return undefined;\r\n    const match = mostUsedSeperators[0];\r\n    // If the special character is only used once, don't treat it like a separator\r\n    if (match[1] < 2) return undefined;\r\n    return match[0];\r\n  }\r\n  static getSeparatorRegex(separator) {\r\n    return new RegExp(`([^${separator}\\n])(${separator})(?!${separator})`, 'g');\r\n    // negative lookbehind can be added again in a few years when it is more supported by the browsers (currently 2023)\r\n    // https://github.com/zxcvbn-ts/zxcvbn/issues/202\r\n    // return new RegExp(`(?<!${separator})(${separator})(?!${separator})`, 'g')\r\n  }\r\n  // eslint-disable-next-line max-statements\r\n  match({\r\n    password\r\n  }) {\r\n    const result = [];\r\n    if (password.length === 0) return result;\r\n    const mostUsedSpecial = MatchSeparator.getMostUsedSeparatorChar(password);\r\n    if (mostUsedSpecial === undefined) return result;\r\n    const isSeparator = MatchSeparator.getSeparatorRegex(mostUsedSpecial);\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const match of password.matchAll(isSeparator)) {\r\n      // eslint-disable-next-line no-continue\r\n      if (match.index === undefined) continue;\r\n      // add one to the index because we changed the regex from negative lookbehind to something simple.\r\n      // this simple approach uses the first character before the separater too but we only need the index of the separater\r\n      // https://github.com/zxcvbn-ts/zxcvbn/issues/202\r\n      const i = match.index + 1;\r\n      result.push({\r\n        pattern: 'separator',\r\n        token: mostUsedSpecial,\r\n        i,\r\n        j: i\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport { MatchSeparator as default };\r\n\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,yBAAyB;AAEzD,MAAMC,cAAc,GAAG,IAAIC,MAAM,CAAE,IAAGF,eAAe,CAACG,IAAI,CAAC,EAAE,CAAE,GAAE,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,CAAC;EACnB,OAAOC,wBAAwBA,CAACC,QAAQ,EAAE;IACxC,MAAMC,kBAAkB,GAAG,CAAC,GAAGD,QAAQ,CAACE,KAAK,CAAC,EAAE,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIT,cAAc,CAACU,IAAI,CAACD,CAAC,CAAC,CAAC,CAACE,MAAM,CAAC,CAACC,IAAI,EAAEH,CAAC,KAAK;MACxG,MAAMI,CAAC,GAAGD,IAAI,CAACE,GAAG,CAACL,CAAC,CAAC;MACrB,IAAII,CAAC,EAAE;QACLD,IAAI,CAACG,GAAG,CAACN,CAAC,EAAEI,CAAC,GAAG,CAAC,CAAC;MACpB,CAAC,MAAM;QACLD,IAAI,CAACG,GAAG,CAACN,CAAC,EAAE,CAAC,CAAC;MAChB;MACA,OAAOG,IAAI;IACb,CAAC,EAAE,IAAII,GAAG,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,EAAE,EAAEC,CAAC,CAAC,EAAE,CAACC,EAAE,EAAEC,CAAC,CAAC,KAAKA,CAAC,GAAGF,CAAC,CAAC;IAC1D,IAAI,CAACd,kBAAkB,CAACiB,MAAM,EAAE,OAAOC,SAAS;IAChD,MAAMC,KAAK,GAAGnB,kBAAkB,CAAC,CAAC,CAAC;IACnC;IACA,IAAImB,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,OAAOD,SAAS;IAClC,OAAOC,KAAK,CAAC,CAAC,CAAC;EACjB;EACA,OAAOC,iBAAiBA,CAACC,SAAS,EAAE;IAClC,OAAO,IAAI1B,MAAM,CAAE,MAAK0B,SAAU,QAAOA,SAAU,OAAMA,SAAU,GAAE,EAAE,GAAG,CAAC;IAC3E;IACA;IACA;EACF;EACA;EACAF,KAAKA,CAAC;IACJpB;EACF,CAAC,EAAE;IACD,MAAMuB,MAAM,GAAG,EAAE;IACjB,IAAIvB,QAAQ,CAACkB,MAAM,KAAK,CAAC,EAAE,OAAOK,MAAM;IACxC,MAAMC,eAAe,GAAG1B,cAAc,CAACC,wBAAwB,CAACC,QAAQ,CAAC;IACzE,IAAIwB,eAAe,KAAKL,SAAS,EAAE,OAAOI,MAAM;IAChD,MAAME,WAAW,GAAG3B,cAAc,CAACuB,iBAAiB,CAACG,eAAe,CAAC;IACrE;IACA,KAAK,MAAMJ,KAAK,IAAIpB,QAAQ,CAAC0B,QAAQ,CAACD,WAAW,CAAC,EAAE;MAClD;MACA,IAAIL,KAAK,CAACO,KAAK,KAAKR,SAAS,EAAE;MAC/B;MACA;MACA;MACA,MAAMS,CAAC,GAAGR,KAAK,CAACO,KAAK,GAAG,CAAC;MACzBJ,MAAM,CAACM,IAAI,CAAC;QACVC,OAAO,EAAE,WAAW;QACpBC,KAAK,EAAEP,eAAe;QACtBI,CAAC;QACDI,CAAC,EAAEJ;MACL,CAAC,CAAC;IACJ;IACA,OAAOL,MAAM;EACf;AACF;AAEA,SAASzB,cAAc,IAAImC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CompressorService {\n  constructor() {\n    this.max_width = 800;\n    this.max_height = 800;\n  }\n  compress(file, width, height) {\n    this.max_width = width || 800;\n    this.max_height = height || 800;\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    return Observable.create(observer => {\n      reader.onload = ev => {\n        const img = new Image();\n        img.src = ev.target.result || '';\n        img.onload = () => {\n          const elem = document.createElement('canvas');\n          let width = img.width;\n          let height = img.height;\n          if (width > height) {\n            if (width > this.max_width) {\n              height = Math.round(height *= this.max_width / width);\n              width = this.max_width;\n            }\n          } else {\n            if (height > this.max_height) {\n              width = Math.round(width *= this.max_height / height);\n              height = this.max_height;\n            }\n          }\n          elem.width = width;\n          elem.height = height;\n          const ctx = elem.getContext('2d');\n          ctx.drawImage(img, 0, 0, width, height);\n          const base64img = ctx.canvas.toDataURL('image/png');\n          observer.next(base64img);\n        };\n        reader.onerror = error => observer.error(error);\n      };\n    });\n  }\n  static #_ = this.ɵfac = function CompressorService_Factory(t) {\n    return new (t || CompressorService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CompressorService,\n    factory: CompressorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Observable","CompressorService","constructor","max_width","max_height","compress","file","width","height","reader","FileReader","readAsDataURL","create","observer","onload","ev","img","Image","src","target","result","elem","document","createElement","Math","round","ctx","getContext","drawImage","base64img","canvas","toDataURL","next","onerror","error","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Julio\\Documents\\Projects\\CBLXToolPFP\\frontend\\src\\app\\services\\compressor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CompressorService {\r\n  max_width = 800;\r\n  max_height = 800;\r\n\r\n  compress(file: File, width?: number, height?: number): Observable<string> {\r\n    this.max_width = width || 800;\r\n    this.max_height = height || 800;\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n\r\n    return Observable.create((observer: Observer<string>) => {\r\n      reader.onload = (ev) => {\r\n        const img = new Image();\r\n        img.src = ((ev.target as FileReader).result as string) || '';\r\n\r\n        img.onload = () => {\r\n          const elem = document.createElement('canvas');\r\n          let width = img.width;\r\n          let height = img.height;\r\n\r\n          if (width > height) {\r\n            if (width > this.max_width) {\r\n              height = Math.round((height *= this.max_width / width));\r\n              width = this.max_width;\r\n            }\r\n          } else {\r\n            if (height > this.max_height) {\r\n              width = Math.round((width *= this.max_height / height));\r\n              height = this.max_height;\r\n            }\r\n          }\r\n\r\n          elem.width = width;\r\n          elem.height = height;\r\n          const ctx = <CanvasRenderingContext2D>elem.getContext('2d');\r\n          ctx.drawImage(img, 0, 0, width, height);\r\n\r\n          const base64img = ctx.canvas.toDataURL('image/png');\r\n          observer.next(base64img);\r\n        };\r\n\r\n        reader.onerror = (error) => observer.error(error);\r\n      };\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,UAAU,QAAkB,MAAM;;AAK3C,OAAM,MAAOC,iBAAiB;EAH9BC,YAAA;IAIE,KAAAC,SAAS,GAAG,GAAG;IACf,KAAAC,UAAU,GAAG,GAAG;;EAEhBC,QAAQA,CAACC,IAAU,EAAEC,KAAc,EAAEC,MAAe;IAClD,IAAI,CAACL,SAAS,GAAGI,KAAK,IAAI,GAAG;IAC7B,IAAI,CAACH,UAAU,GAAGI,MAAM,IAAI,GAAG;IAE/B,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;IAC/BD,MAAM,CAACE,aAAa,CAACL,IAAI,CAAC;IAE1B,OAAON,UAAU,CAACY,MAAM,CAAEC,QAA0B,IAAI;MACtDJ,MAAM,CAACK,MAAM,GAAIC,EAAE,IAAI;QACrB,MAAMC,GAAG,GAAG,IAAIC,KAAK,EAAE;QACvBD,GAAG,CAACE,GAAG,GAAKH,EAAE,CAACI,MAAqB,CAACC,MAAiB,IAAI,EAAE;QAE5DJ,GAAG,CAACF,MAAM,GAAG,MAAK;UAChB,MAAMO,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;UAC7C,IAAIhB,KAAK,GAAGS,GAAG,CAACT,KAAK;UACrB,IAAIC,MAAM,GAAGQ,GAAG,CAACR,MAAM;UAEvB,IAAID,KAAK,GAAGC,MAAM,EAAE;YAClB,IAAID,KAAK,GAAG,IAAI,CAACJ,SAAS,EAAE;cAC1BK,MAAM,GAAGgB,IAAI,CAACC,KAAK,CAAEjB,MAAM,IAAI,IAAI,CAACL,SAAS,GAAGI,KAAM,CAAC;cACvDA,KAAK,GAAG,IAAI,CAACJ,SAAS;;WAEzB,MAAM;YACL,IAAIK,MAAM,GAAG,IAAI,CAACJ,UAAU,EAAE;cAC5BG,KAAK,GAAGiB,IAAI,CAACC,KAAK,CAAElB,KAAK,IAAI,IAAI,CAACH,UAAU,GAAGI,MAAO,CAAC;cACvDA,MAAM,GAAG,IAAI,CAACJ,UAAU;;;UAI5BiB,IAAI,CAACd,KAAK,GAAGA,KAAK;UAClBc,IAAI,CAACb,MAAM,GAAGA,MAAM;UACpB,MAAMkB,GAAG,GAA6BL,IAAI,CAACM,UAAU,CAAC,IAAI,CAAC;UAC3DD,GAAG,CAACE,SAAS,CAACZ,GAAG,EAAE,CAAC,EAAE,CAAC,EAAET,KAAK,EAAEC,MAAM,CAAC;UAEvC,MAAMqB,SAAS,GAAGH,GAAG,CAACI,MAAM,CAACC,SAAS,CAAC,WAAW,CAAC;UACnDlB,QAAQ,CAACmB,IAAI,CAACH,SAAS,CAAC;QAC1B,CAAC;QAEDpB,MAAM,CAACwB,OAAO,GAAIC,KAAK,IAAKrB,QAAQ,CAACqB,KAAK,CAACA,KAAK,CAAC;MACnD,CAAC;IACH,CAAC,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBA7CUlC,iBAAiB;EAAA;EAAA,QAAAmC,EAAA,G;WAAjBnC,iBAAiB;IAAAoC,OAAA,EAAjBpC,iBAAiB,CAAAqC,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
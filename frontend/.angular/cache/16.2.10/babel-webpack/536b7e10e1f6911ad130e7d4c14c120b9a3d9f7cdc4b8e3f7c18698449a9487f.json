{"ast":null,"code":"import { __decorate } from \"tslib\";\n// engage.component.ts\nimport { Component, HostListener } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let EngageComponent = class EngageComponent {\n  toggleMenu() {\n    this.sidebarService.toggleSidebar(); // Delegate toggling to the SidebarService\n  }\n\n  constructor(fb, engageService, dialog, dialogRef, progressService, sidebarService) {\n    this.fb = fb;\n    this.engageService = engageService;\n    this.dialog = dialog;\n    this.dialogRef = dialogRef;\n    this.progressService = progressService;\n    this.sidebarService = sidebarService;\n    this.engageData = {\n      big_idea: [],\n      essential_question: [],\n      challenge: []\n    };\n    this.isMenuHidden = true; // Explicitly declare boolean type (optional)\n    this.files = []; // No changes needed, already correctly typed\n    this.renderedFiles = []; // Properly typed with the interface defined\n    this.images = []; // No changes needed, correctly typed\n    this.fileReader = new FileReader(); // No changes needed, properly initialized\n    this.objectUrls = []; // Initialized properly to hold URLs\n  }\n\n  ngOnInit() {\n    this.engageForm = this.fb.group({\n      big_idea: this.fb.array([this.createField()]),\n      essential_question: this.fb.array([this.createField()]),\n      challenge: this.fb.array([this.createField()])\n    });\n    this.loadEngageData();\n  }\n  loadEngageData() {\n    this.engageService.getEngage().subscribe({\n      next: response => {\n        if (response.data) {\n          this.engageData = response.data;\n          this.populateForm();\n          console.log('Engage data loaded successfully', this.engageData);\n        } else {\n          console.error('Unexpected response format:', response);\n        }\n      },\n      error: error => console.error('Failed to load engage data:', error)\n    });\n  }\n  populateForm() {\n    // Destructure engageData with default values\n    const {\n      big_idea = '',\n      essential_question = '',\n      challenge = ''\n    } = this.engageData;\n    // Convert to arrays properly\n    this.setFields('big_idea', this.convertToArray(big_idea));\n    this.setFields('essential_question', this.convertToArray(essential_question));\n    this.setFields('challenge', this.convertToArray(challenge));\n  }\n  // Update this function to handle empty strings correctly\n  convertToArray(data) {\n    if (Array.isArray(data)) {\n      return data;\n    } else if (typeof data === 'string') {\n      if (data.trim() === '') {\n        return ['']; // Return array with an empty string to create a text area\n      }\n\n      return data.split(','); // Split by commas or another delimiter if needed\n    }\n\n    return []; // Return an empty array if the data is null or not a valid string\n  }\n\n  setFields(fieldName, fieldData) {\n    const formArray = this.engageForm.get(fieldName);\n    formArray.clear(); // Clear existing FormArray\n    // Create form controls for each entry in fieldData, including empty strings\n    fieldData.forEach(data => {\n      formArray.push(this.fb.group({\n        content: [data, Validators.required]\n      }));\n    });\n  }\n  get bigIdeaFields() {\n    return this.engageForm.get('big_idea');\n  }\n  get essentialQuestionFields() {\n    return this.engageForm.get('essential_question');\n  }\n  get challengeFields() {\n    return this.engageForm.get('challenge');\n  }\n  createField() {\n    return this.fb.group({\n      content: ['', Validators.required]\n    });\n  }\n  addFields(fieldName, count) {\n    const control = this.engageForm.get(fieldName);\n    // Instead of pushing multiple at once, map through and add each individually\n    for (let i = 0; i < count; i++) {\n      control.push(this.createField());\n    }\n  }\n  saveDataWithDebounce(formData) {\n    // Clear the existing timeout if there's one\n    if (this.saveTimeout) clearTimeout(this.saveTimeout);\n    // Set a new timeout to debounce the save operation\n    this.saveTimeout = setTimeout(() => {\n      this.saveData(formData).subscribe({\n        next: response => console.log('Data saved successfully', response),\n        error: error => console.error('Failed to save data:', error)\n      });\n    }, 500); // Adjust debounce time as needed\n  }\n\n  onFormSubmit(event, fieldName, index) {\n    event.preventDefault();\n    const fieldArray = this.engageForm.get(fieldName);\n    const field = fieldArray.at(index); // Get the specific field by index\n    if (!field.valid) {\n      console.log('Field is empty or invalid. Aborting submission.');\n      return;\n    }\n    // Get the new value from the form field\n    const fieldValue = field.get('content')?.value.trim();\n    if (fieldValue) {\n      // Ensure engageData is properly updated\n      if (Array.isArray(this.engageData[fieldName])) {\n        // If engageData[fieldName] is an array, update it accordingly\n        this.engageData[fieldName].splice(index, 1, fieldValue);\n      } else {\n        // Otherwise, assign the new value directly\n        this.engageData[fieldName] = fieldValue;\n      }\n    }\n    // Save all filled fields with debounce to avoid repeated saves\n    this.saveDataWithDebounce(this.engageData);\n    // Optionally, add a new field after the current one is submitted\n    this.addFields(fieldName, 1);\n  }\n  saveData(formData) {\n    return this.engageService.createOrUpdateEngage(formData);\n  }\n  updateProgress() {\n    this.progressService.answeredQuestions++;\n    this.progressService.engageProgress = Math.round(this.progressService.answeredQuestions / this.progressService.totalQuestions * 100);\n  }\n  onFileSelected(event) {\n    const inputElement = event?.target;\n    if (inputElement && inputElement.files) {\n      const files = inputElement.files;\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        const renderType = this.determineRenderType(file);\n        const renderedFile = {\n          file,\n          renderType\n        };\n        if (renderType === 'pdf') {\n          renderedFile.downloadUrl = this.getFileUrl(file);\n        }\n        this.renderedFiles.push(renderedFile);\n      }\n    }\n  }\n  determineRenderType(file) {\n    if (file.type.includes('image')) {\n      return 'image';\n    } else if (file.type.includes('pdf')) {\n      return 'pdf';\n    } else {\n      return 'other';\n    }\n  }\n  getFileUrl(file) {\n    const url = URL.createObjectURL(file);\n    this.objectUrls.push(url); // Track URLs for cleanup\n    return url;\n  }\n  cleanupObjectUrls() {\n    this.objectUrls.forEach(url => URL.revokeObjectURL(url));\n    this.objectUrls = [];\n  }\n  downloadFile(file) {\n    const url = this.getFileUrl(file);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = file.name;\n    a.click();\n  }\n  handleKeyboardEvent(event) {\n    if (event.key === '/') {\n      clearTimeout(this.debounceTimer);\n      this.debounceTimer = setTimeout(() => this.openModal(), 300);\n    }\n  }\n  openModal() {\n    import('@app/components/modal/modal.component').then(({\n      ModalComponent\n    }) => {\n      const dialogRef = this.dialog.open(ModalComponent, {\n        width: '250px'\n      });\n      dialogRef.afterClosed().subscribe(files => {\n        if (files && files.length > 0) {\n          this.processFiles(files); // Delegate file processing to a helper method\n        }\n      });\n    });\n  }\n  // Helper method to process files\n  processFiles(files) {\n    const fileArray = Array.from(files); // Convert FileList to an array once\n    fileArray.forEach(file => {\n      if (this.isImage(file)) {\n        this.imageRenderer(file); // Process image files\n      } else {\n        this.files.push(file); // Store non-image files in this.files\n      }\n    });\n    // Optional: Log the processed files or remove this in production\n    console.log('Non-image files:', this.files);\n  }\n  // Check if the file is an image based on its type\n  isImage(file) {\n    return file.type.startsWith('image/');\n  }\n  // Image rendering method\n  imageRenderer(file) {\n    this.fileReader.onload = () => {\n      this.images.push({\n        name: file.name,\n        value: this.fileReader.result // Store image as base64 string\n      });\n    };\n\n    this.fileReader.readAsDataURL(file); // Read the image file as a Data URL\n  }\n\n  autoResize(event) {\n    const target = event.target;\n    if (target.scrollHeight !== target.clientHeight) {\n      target.style.height = 'auto';\n      target.style.height = target.scrollHeight + 'px';\n    }\n  }\n};\n__decorate([HostListener('document:keydown', ['$event'])], EngageComponent.prototype, \"handleKeyboardEvent\", null);\nEngageComponent = __decorate([Component({\n  selector: 'app-engage',\n  templateUrl: './engage.component.html',\n  styleUrls: ['./engage.component.scss']\n})], EngageComponent);","map":{"version":3,"names":["Component","HostListener","Validators","EngageComponent","toggleMenu","sidebarService","toggleSidebar","constructor","fb","engageService","dialog","dialogRef","progressService","engageData","big_idea","essential_question","challenge","isMenuHidden","files","renderedFiles","images","fileReader","FileReader","objectUrls","ngOnInit","engageForm","group","array","createField","loadEngageData","getEngage","subscribe","next","response","data","populateForm","console","log","error","setFields","convertToArray","Array","isArray","trim","split","fieldName","fieldData","formArray","get","clear","forEach","push","content","required","bigIdeaFields","essentialQuestionFields","challengeFields","addFields","count","control","i","saveDataWithDebounce","formData","saveTimeout","clearTimeout","setTimeout","saveData","onFormSubmit","event","index","preventDefault","fieldArray","field","at","valid","fieldValue","value","splice","createOrUpdateEngage","updateProgress","answeredQuestions","engageProgress","Math","round","totalQuestions","onFileSelected","inputElement","target","length","file","renderType","determineRenderType","renderedFile","downloadUrl","getFileUrl","type","includes","url","URL","createObjectURL","cleanupObjectUrls","revokeObjectURL","downloadFile","a","document","createElement","href","download","name","click","handleKeyboardEvent","key","debounceTimer","openModal","then","ModalComponent","open","width","afterClosed","processFiles","fileArray","from","isImage","imageRenderer","startsWith","onload","result","readAsDataURL","autoResize","scrollHeight","clientHeight","style","height","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Julio\\Documents\\Projects\\CBLXToolPFP\\frontend\\src\\app\\pages\\engage\\engage.component.ts"],"sourcesContent":["// engage.component.ts\r\nimport { Component, HostListener, OnInit } from '@angular/core';\r\nimport { ProgressService } from '../../services/progress.service';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ModalComponent } from '@app/components/modal/modal.component';\r\nimport { EngageService } from '@app/services/engage.service';\r\nimport { FormArray, FormControl, FormGroup, Validators, FormBuilder} from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { SidebarService } from '../../../app/services/sidebar.service'\r\n\r\n@Component({\r\n  selector: 'app-engage',\r\n  templateUrl: './engage.component.html',\r\n  styleUrls: ['./engage.component.scss'],\r\n})\r\nexport class EngageComponent implements OnInit{\r\n  \r\n  engageData: {\r\n    [key: string]: string[];  // Allow indexing with a string key\r\n    big_idea: string[];\r\n    essential_question: string[];\r\n    challenge: string[];\r\n  } = { big_idea: [], essential_question: [], challenge: [] };\r\n  \r\n  \r\n  isMenuHidden: boolean = true;  // Explicitly declare boolean type (optional)\r\n  files: File[] = [];  // No changes needed, already correctly typed\r\n  renderedFiles: RenderedFile[] = [];  // Properly typed with the interface defined\r\n  images: { name: string; value: string }[] = [];  // No changes needed, correctly typed\r\n\r\n  engageForm!: FormGroup;  // Initialized in ngOnInit, so non-null assertion is fine\r\n\r\n  private debounceTimer!: ReturnType<typeof setTimeout>;  // Correct type declaration for debounceTimer\r\n  private fileReader: FileReader = new FileReader();  // No changes needed, properly initialized\r\n  private objectUrls: string[] = [];  // Initialized properly to hold URLs\r\n  private saveTimeout!: ReturnType<typeof setTimeout>; // Declare saveTimeout\r\n\r\n\r\n  toggleMenu(): void {\r\n    this.sidebarService.toggleSidebar();  // Delegate toggling to the SidebarService\r\n  }\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private engageService: EngageService,\r\n    public dialog: MatDialog,\r\n    public dialogRef: MatDialogRef<ModalComponent>,\r\n    private progressService: ProgressService,\r\n    private sidebarService: SidebarService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.engageForm = this.fb.group({\r\n      big_idea: this.fb.array([this.createField()]),\r\n      essential_question: this.fb.array([this.createField()]),\r\n      challenge: this.fb.array([this.createField()]),\r\n    });\r\n\r\n    this.loadEngageData();\r\n  }\r\n\r\n  loadEngageData(): void {\r\n    this.engageService.getEngage().subscribe({\r\n      next: (response) => {\r\n        if (response.data) {\r\n          this.engageData = response.data;\r\n          this.populateForm();\r\n          console.log('Engage data loaded successfully', this.engageData);\r\n        } else {\r\n          console.error('Unexpected response format:', response);\r\n        }\r\n      },\r\n      error: (error) => console.error('Failed to load engage data:', error),\r\n    });\r\n  }\r\n  \r\n\r\n  populateForm(): void {\r\n    // Destructure engageData with default values\r\n    const { big_idea = '', essential_question = '', challenge = '' } = this.engageData;\r\n  \r\n    // Convert to arrays properly\r\n    this.setFields('big_idea', this.convertToArray(big_idea));\r\n    this.setFields('essential_question', this.convertToArray(essential_question));\r\n    this.setFields('challenge', this.convertToArray(challenge));\r\n  }\r\n  \r\n  // Update this function to handle empty strings correctly\r\n  convertToArray(data: string | string[]): string[] {\r\n    if (Array.isArray(data)) {\r\n      return data;\r\n    } else if (typeof data === 'string') {\r\n      if (data.trim() === '') {\r\n        return ['']; // Return array with an empty string to create a text area\r\n      }\r\n      return data.split(','); // Split by commas or another delimiter if needed\r\n    }\r\n    return []; // Return an empty array if the data is null or not a valid string\r\n  }\r\n  \r\n  \r\n  \r\n  setFields(fieldName: string, fieldData: string[]): void {\r\n    const formArray = this.engageForm.get(fieldName) as FormArray;\r\n    formArray.clear(); // Clear existing FormArray\r\n    \r\n    // Create form controls for each entry in fieldData, including empty strings\r\n    fieldData.forEach(data => {\r\n      formArray.push(this.fb.group({\r\n        content: [data, Validators.required],\r\n      }));\r\n    });\r\n  }\r\n  \r\n\r\n  get bigIdeaFields(): FormArray {\r\n    return this.engageForm.get('big_idea') as FormArray;\r\n  }\r\n\r\n  get essentialQuestionFields(): FormArray {\r\n    return this.engageForm.get('essential_question') as FormArray;\r\n  }\r\n\r\n  get challengeFields(): FormArray {\r\n    return this.engageForm.get('challenge') as FormArray;\r\n  }\r\n\r\n  createField(): FormGroup {\r\n    return this.fb.group({\r\n      content: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  addFields(fieldName: string, count: number): void {\r\n    const control = this.engageForm.get(fieldName) as FormArray;\r\n    \r\n    // Instead of pushing multiple at once, map through and add each individually\r\n    for (let i = 0; i < count; i++) {\r\n      control.push(this.createField());\r\n    }\r\n  }\r\n  \r\n  saveDataWithDebounce(formData: { [key: string]: string[] }): void {\r\n    // Clear the existing timeout if there's one\r\n    if (this.saveTimeout) clearTimeout(this.saveTimeout);\r\n  \r\n    // Set a new timeout to debounce the save operation\r\n    this.saveTimeout = setTimeout(() => {\r\n      this.saveData(formData).subscribe({\r\n        next: (response) => console.log('Data saved successfully', response),\r\n        error: (error) => console.error('Failed to save data:', error),\r\n      });\r\n    }, 500); // Adjust debounce time as needed\r\n  }\r\n  \r\n\r\n  onFormSubmit(event: Event, fieldName: string, index: number): void {\r\n    event.preventDefault();\r\n  \r\n    const fieldArray = this.engageForm.get(fieldName) as FormArray;\r\n    const field = fieldArray.at(index); // Get the specific field by index\r\n  \r\n    if (!field.valid) {\r\n      console.log('Field is empty or invalid. Aborting submission.');\r\n      return;\r\n    }\r\n  \r\n    // Get the new value from the form field\r\n    const fieldValue = field.get('content')?.value.trim();\r\n  \r\n    if (fieldValue) {\r\n      // Ensure engageData is properly updated\r\n      if (Array.isArray(this.engageData[fieldName])) {\r\n        // If engageData[fieldName] is an array, update it accordingly\r\n        this.engageData[fieldName].splice(index, 1, fieldValue);\r\n      } else {\r\n        // Otherwise, assign the new value directly\r\n        this.engageData[fieldName] = fieldValue;\r\n      }\r\n    }\r\n  \r\n    // Save all filled fields with debounce to avoid repeated saves\r\n    this.saveDataWithDebounce(this.engageData);\r\n  \r\n    // Optionally, add a new field after the current one is submitted\r\n    this.addFields(fieldName, 1);\r\n  }\r\n  \r\n\r\n  saveData(formData: any): Observable<any> {\r\n    return this.engageService.createOrUpdateEngage(formData);\r\n  }\r\n\r\n  updateProgress() {\r\n    this.progressService.answeredQuestions++;\r\n    this.progressService.engageProgress = Math.round((this.progressService.answeredQuestions / this.progressService.totalQuestions) * 100);\r\n  }\r\n\r\n  onFileSelected(event: any): void {\r\n    const inputElement = event?.target as HTMLInputElement;\r\n    if (inputElement && inputElement.files) {\r\n      const files: FileList = inputElement.files;\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file: File = files[i];\r\n        const renderType = this.determineRenderType(file);\r\n        const renderedFile: RenderedFile = { file, renderType };\r\n        if (renderType === 'pdf') {\r\n          renderedFile.downloadUrl = this.getFileUrl(file);\r\n        }\r\n        this.renderedFiles.push(renderedFile);\r\n      }\r\n    }\r\n  }\r\n\r\n  determineRenderType(file: File): 'image' | 'pdf' | 'other' {\r\n    if (file.type.includes('image')) {\r\n      return 'image';\r\n    } else if (file.type.includes('pdf')) {\r\n      return 'pdf';\r\n    } else {\r\n      return 'other';\r\n    }\r\n  }\r\n\r\n  getFileUrl(file: File): string {\r\n    const url = URL.createObjectURL(file);\r\n    this.objectUrls.push(url); // Track URLs for cleanup\r\n    return url;\r\n  }\r\n  \r\n  cleanupObjectUrls(): void {\r\n    this.objectUrls.forEach(url => URL.revokeObjectURL(url));\r\n    this.objectUrls = [];\r\n  }\r\n  \r\n  downloadFile(file: File) {\r\n    const url = this.getFileUrl(file);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = file.name;\r\n    a.click();\r\n  }\r\n\r\n  @HostListener('document:keydown', ['$event'])\r\n  handleKeyboardEvent(event: KeyboardEvent) {\r\n    if (event.key === '/') {\r\n      clearTimeout(this.debounceTimer);\r\n      this.debounceTimer = setTimeout(() => this.openModal(), 300);\r\n    }\r\n  }\r\n\r\n\r\n  openModal(): void {\r\n    import('@app/components/modal/modal.component').then(({ ModalComponent }) => {\r\n      const dialogRef = this.dialog.open(ModalComponent, {\r\n        width: '250px',\r\n      });\r\n  \r\n      dialogRef.afterClosed().subscribe((files: FileList | null) => {\r\n        if (files && files.length > 0) {\r\n          this.processFiles(files); // Delegate file processing to a helper method\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  // Helper method to process files\r\n  private processFiles(files: FileList): void {\r\n    const fileArray = Array.from(files); // Convert FileList to an array once\r\n\r\n    fileArray.forEach(file => {\r\n      if (this.isImage(file)) {\r\n        this.imageRenderer(file); // Process image files\r\n      } else {\r\n        this.files.push(file); // Store non-image files in this.files\r\n      }\r\n    });\r\n\r\n    // Optional: Log the processed files or remove this in production\r\n    console.log('Non-image files:', this.files);\r\n  }\r\n\r\n  // Check if the file is an image based on its type\r\n  private isImage(file: File): boolean {\r\n    return file.type.startsWith('image/');\r\n  }\r\n\r\n // Image rendering method\r\n  private imageRenderer(file: File): void {\r\n    this.fileReader.onload = () => {\r\n      this.images.push({\r\n        name: file.name,\r\n        value: this.fileReader.result as string // Store image as base64 string\r\n      });\r\n    };\r\n    this.fileReader.readAsDataURL(file); // Read the image file as a Data URL\r\n  }\r\n  \r\n  autoResize(event: any) {\r\n    const target = event.target;\r\n    if (target.scrollHeight !== target.clientHeight) {\r\n      target.style.height = 'auto';\r\n      target.style.height = target.scrollHeight + 'px';\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n\r\ninterface RenderedFile {\r\n  file: File;\r\n  renderType: 'image' | 'pdf' | 'other';\r\n  downloadUrl?: string;\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
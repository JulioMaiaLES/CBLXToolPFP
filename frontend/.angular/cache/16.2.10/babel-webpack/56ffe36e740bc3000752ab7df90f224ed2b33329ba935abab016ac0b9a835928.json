{"ast":null,"code":"import utils from '../../../../scoring/utils.esm.js';\nconst countSubstring = (string, substring) => {\n  let count = 0;\n  let pos = string.indexOf(substring);\n  while (pos >= 0) {\n    count += 1;\n    pos = string.indexOf(substring, pos + substring.length);\n  }\n  return count;\n};\nconst getCounts = ({\n  sub,\n  token\n}) => {\n  // lower-case match.token before calculating: capitalization shouldn't affect l33t calc.\n  const tokenLower = token.toLowerCase();\n  // num of subbed chars\n  const subbedCount = countSubstring(tokenLower, sub.substitution);\n  // num of unsubbed chars\n  const unsubbedCount = countSubstring(tokenLower, sub.letter);\n  return {\n    subbedCount,\n    unsubbedCount\n  };\n};\nvar l33tVariant = ({\n  l33t,\n  subs,\n  token\n}) => {\n  if (!l33t) {\n    return 1;\n  }\n  let variations = 1;\n  subs.forEach(sub => {\n    const {\n      subbedCount,\n      unsubbedCount\n    } = getCounts({\n      sub,\n      token\n    });\n    if (subbedCount === 0 || unsubbedCount === 0) {\n      // for this sub, password is either fully subbed (444) or fully unsubbed (aaa)\n      // treat that as doubling the space (attacker needs to try fully subbed chars in addition to\n      // unsubbed.)\n      variations *= 2;\n    } else {\n      // this case is similar to capitalization:\n      // with aa44a, U = 3, S = 2, attacker needs to try unsubbed + one sub + two subs\n      const p = Math.min(unsubbedCount, subbedCount);\n      let possibilities = 0;\n      for (let i = 1; i <= p; i += 1) {\n        possibilities += utils.nCk(unsubbedCount + subbedCount, i);\n      }\n      variations *= possibilities;\n    }\n  });\n  return variations;\n};\nexport { l33tVariant as default };","map":{"version":3,"names":["utils","countSubstring","string","substring","count","pos","indexOf","length","getCounts","sub","token","tokenLower","toLowerCase","subbedCount","substitution","unsubbedCount","letter","l33tVariant","l33t","subs","variations","forEach","p","Math","min","possibilities","i","nCk","default"],"sources":["C:/Users/j-mai/Documents/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/matcher/dictionary/variants/scoring/l33t.esm.js"],"sourcesContent":["import utils from '../../../../scoring/utils.esm.js';\n\nconst countSubstring = (string, substring) => {\n  let count = 0;\n  let pos = string.indexOf(substring);\n  while (pos >= 0) {\n    count += 1;\n    pos = string.indexOf(substring, pos + substring.length);\n  }\n  return count;\n};\nconst getCounts = ({\n  sub,\n  token\n}) => {\n  // lower-case match.token before calculating: capitalization shouldn't affect l33t calc.\n  const tokenLower = token.toLowerCase();\n  // num of subbed chars\n  const subbedCount = countSubstring(tokenLower, sub.substitution);\n  // num of unsubbed chars\n  const unsubbedCount = countSubstring(tokenLower, sub.letter);\n  return {\n    subbedCount,\n    unsubbedCount\n  };\n};\nvar l33tVariant = (({\n  l33t,\n  subs,\n  token\n}) => {\n  if (!l33t) {\n    return 1;\n  }\n  let variations = 1;\n  subs.forEach(sub => {\n    const {\n      subbedCount,\n      unsubbedCount\n    } = getCounts({\n      sub,\n      token\n    });\n    if (subbedCount === 0 || unsubbedCount === 0) {\n      // for this sub, password is either fully subbed (444) or fully unsubbed (aaa)\n      // treat that as doubling the space (attacker needs to try fully subbed chars in addition to\n      // unsubbed.)\n      variations *= 2;\n    } else {\n      // this case is similar to capitalization:\n      // with aa44a, U = 3, S = 2, attacker needs to try unsubbed + one sub + two subs\n      const p = Math.min(unsubbedCount, subbedCount);\n      let possibilities = 0;\n      for (let i = 1; i <= p; i += 1) {\n        possibilities += utils.nCk(unsubbedCount + subbedCount, i);\n      }\n      variations *= possibilities;\n    }\n  });\n  return variations;\n});\n\nexport { l33tVariant as default };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kCAAkC;AAEpD,MAAMC,cAAc,GAAGA,CAACC,MAAM,EAAEC,SAAS,KAAK;EAC5C,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,GAAG,GAAGH,MAAM,CAACI,OAAO,CAACH,SAAS,CAAC;EACnC,OAAOE,GAAG,IAAI,CAAC,EAAE;IACfD,KAAK,IAAI,CAAC;IACVC,GAAG,GAAGH,MAAM,CAACI,OAAO,CAACH,SAAS,EAAEE,GAAG,GAAGF,SAAS,CAACI,MAAM,CAAC;EACzD;EACA,OAAOH,KAAK;AACd,CAAC;AACD,MAAMI,SAAS,GAAGA,CAAC;EACjBC,GAAG;EACHC;AACF,CAAC,KAAK;EACJ;EACA,MAAMC,UAAU,GAAGD,KAAK,CAACE,WAAW,CAAC,CAAC;EACtC;EACA,MAAMC,WAAW,GAAGZ,cAAc,CAACU,UAAU,EAAEF,GAAG,CAACK,YAAY,CAAC;EAChE;EACA,MAAMC,aAAa,GAAGd,cAAc,CAACU,UAAU,EAAEF,GAAG,CAACO,MAAM,CAAC;EAC5D,OAAO;IACLH,WAAW;IACXE;EACF,CAAC;AACH,CAAC;AACD,IAAIE,WAAW,GAAIA,CAAC;EAClBC,IAAI;EACJC,IAAI;EACJT;AACF,CAAC,KAAK;EACJ,IAAI,CAACQ,IAAI,EAAE;IACT,OAAO,CAAC;EACV;EACA,IAAIE,UAAU,GAAG,CAAC;EAClBD,IAAI,CAACE,OAAO,CAACZ,GAAG,IAAI;IAClB,MAAM;MACJI,WAAW;MACXE;IACF,CAAC,GAAGP,SAAS,CAAC;MACZC,GAAG;MACHC;IACF,CAAC,CAAC;IACF,IAAIG,WAAW,KAAK,CAAC,IAAIE,aAAa,KAAK,CAAC,EAAE;MAC5C;MACA;MACA;MACAK,UAAU,IAAI,CAAC;IACjB,CAAC,MAAM;MACL;MACA;MACA,MAAME,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACT,aAAa,EAAEF,WAAW,CAAC;MAC9C,IAAIY,aAAa,GAAG,CAAC;MACrB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIJ,CAAC,EAAEI,CAAC,IAAI,CAAC,EAAE;QAC9BD,aAAa,IAAIzB,KAAK,CAAC2B,GAAG,CAACZ,aAAa,GAAGF,WAAW,EAAEa,CAAC,CAAC;MAC5D;MACAN,UAAU,IAAIK,aAAa;IAC7B;EACF,CAAC,CAAC;EACF,OAAOL,UAAU;AACnB,CAAE;AAEF,SAASH,WAAW,IAAIW,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Julio/Documents/Projects/CBLXToolPFP/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { Observable, from, map, mergeMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/compressor.service\";\nexport class InputFileDirective {\n  constructor(compressor) {\n    this.compressor = compressor;\n    this.upload = new EventEmitter();\n    this.allImages = files => {\n      return Array.from(files).every(file => file.type.startsWith('image'));\n    };\n    this.readPdf = file => {\n      const reader = new FileReader();\n      const observable = new Observable(ob => {\n        reader.onload = () => {\n          ob.next(reader.result);\n          ob.complete();\n        };\n      });\n      reader.readAsDataURL(file);\n      return observable;\n    };\n    this.recursiveCompress = (image, index, array) => {\n      return this.compressor.compress(image).pipe(map(response => {\n        return {\n          data: response,\n          index,\n          array\n        };\n      }));\n    };\n  }\n  handleInputChange(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    const files = evt.target.files;\n    if (!files || !files.length) return;\n    if (this.allImages(files)) {\n      this.onImage(files);\n      console.log('image');\n    } else {\n      this.onPdf(files);\n      console.log('pdf');\n    }\n  }\n  onPdf(files) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const pdfs = from(files).pipe(mergeMap(file => _this.readPdf(file)));\n      pdfs.subscribe(result => {\n        _this.upload.emit(result);\n      });\n    })();\n  }\n  onImage(files) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const compress = from(files).pipe(mergeMap((file, index) => _this2.recursiveCompress(file, index, files)));\n      compress.subscribe(res => {\n        _this2.upload.emit(res.data);\n      });\n    })();\n  }\n  static #_ = this.ɵfac = function InputFileDirective_Factory(t) {\n    return new (t || InputFileDirective)(i0.ɵɵdirectiveInject(i1.CompressorService));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: InputFileDirective,\n    selectors: [[\"\", \"inputFile\", \"\"]],\n    hostBindings: function InputFileDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"change\", function InputFileDirective_change_HostBindingHandler($event) {\n          return ctx.handleInputChange($event);\n        });\n      }\n    },\n    outputs: {\n      upload: \"upload\"\n    }\n  });\n}","map":{"version":3,"names":["EventEmitter","Observable","from","map","mergeMap","InputFileDirective","constructor","compressor","upload","allImages","files","Array","every","file","type","startsWith","readPdf","reader","FileReader","observable","ob","onload","next","result","complete","readAsDataURL","recursiveCompress","image","index","array","compress","pipe","response","data","handleInputChange","evt","preventDefault","stopPropagation","target","length","onImage","console","log","onPdf","_this","_asyncToGenerator","pdfs","subscribe","emit","_this2","res","_","i0","ɵɵdirectiveInject","i1","CompressorService","_2","selectors","hostBindings","InputFileDirective_HostBindings","rf","ctx","$event"],"sources":["C:\\Users\\Julio\\Documents\\Projects\\CBLXToolPFP\\frontend\\src\\app\\directives\\input-file.directive.ts"],"sourcesContent":["import { Directive, EventEmitter, HostListener, Output } from '@angular/core';\r\nimport { Observable, from, map, mergeMap } from 'rxjs';\r\nimport { CompressorService } from '../services/compressor.service';\r\n\r\n@Directive({\r\n  selector: '[inputFile]',\r\n})\r\nexport class InputFileDirective {\r\n  @Output() upload = new EventEmitter<string>();\r\n\r\n  constructor(private compressor: CompressorService) {}\r\n\r\n  @HostListener('change', ['$event']) handleInputChange(evt: Event) {\r\n    evt.preventDefault();\r\n    evt.stopPropagation();\r\n    const files = (evt.target as HTMLInputElement).files;\r\n    if (!files || !files.length) return;\r\n\r\n    if (this.allImages(files)) {\r\n      this.onImage(files);\r\n      console.log('image');\r\n    } else {\r\n      this.onPdf(files);\r\n      console.log('pdf');\r\n    }\r\n  }\r\n\r\n  allImages = (files: FileList) => {\r\n    return Array.from(files).every((file) => file.type.startsWith('image'));\r\n  };\r\n\r\n  async onPdf(files: FileList) {\r\n    const pdfs = from(files).pipe(mergeMap((file) => this.readPdf(file)));\r\n\r\n    pdfs.subscribe((result: string) => {\r\n      this.upload.emit(result);\r\n    });\r\n  }\r\n\r\n  readPdf = (file: File) => {\r\n    const reader = new FileReader();\r\n    const observable = new Observable<string>((ob) => {\r\n      reader.onload = () => {\r\n        ob.next(reader.result as string);\r\n        ob.complete();\r\n      };\r\n    });\r\n\r\n    reader.readAsDataURL(file);\r\n\r\n    return observable;\r\n  };\r\n\r\n  async onImage(files: FileList) {\r\n    const compress = from(files).pipe(\r\n      mergeMap((file, index) => this.recursiveCompress(file, index, files))\r\n    );\r\n\r\n    compress.subscribe((res) => {\r\n      this.upload.emit(res.data);\r\n    });\r\n  }\r\n\r\n  recursiveCompress = (image: File, index: number, array: FileList) => {\r\n    return this.compressor.compress(image).pipe(\r\n      map((response) => {\r\n        return {\r\n          data: response,\r\n          index,\r\n          array,\r\n        };\r\n      })\r\n    );\r\n  };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
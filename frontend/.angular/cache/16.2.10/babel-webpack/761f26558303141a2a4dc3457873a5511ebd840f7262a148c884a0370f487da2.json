{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class SidebarService {\n  constructor() {\n    this.isHidden = new BehaviorSubject(true); // Using BehaviorSubject to track sidebar state\n  }\n  // Optionally, add a method to set the state explicitly\n  setSidebarState(state) {\n    this.isHidden.next(state); // Update BehaviorSubject value\n  }\n  // Method to get the current state of the sidebar\n  getSidebarState() {\n    return this.isHidden.value;\n  }\n  // Method to toggle the sidebar\n  toggleSidebar() {\n    this.isHidden.next(!this.isHidden.value); // Toggle the current state\n  }\n  // Method to get the observable of the sidebar state\n  getSidebarStateObservable() {\n    return this.isHidden.asObservable(); // Return observable for subscribing to state changes\n  }\n  static #_ = this.ɵfac = function SidebarService_Factory(t) {\n    return new (t || SidebarService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SidebarService,\n    factory: SidebarService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","SidebarService","constructor","isHidden","setSidebarState","state","next","getSidebarState","value","toggleSidebar","getSidebarStateObservable","asObservable","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\lucas\\OneDrive\\Documentos\\GitHub\\CBLXToolPFP\\frontend\\src\\app\\services\\sidebar.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SidebarService {\r\n  private isHidden = new BehaviorSubject<boolean>(true);  // Using BehaviorSubject to track sidebar state\r\n\r\n  // Optionally, add a method to set the state explicitly\r\n  setSidebarState(state: boolean): void {\r\n    this.isHidden.next(state);  // Update BehaviorSubject value\r\n  }\r\n\r\n  // Method to get the current state of the sidebar\r\n  getSidebarState(): boolean {\r\n    return this.isHidden.value;\r\n  }\r\n\r\n  // Method to toggle the sidebar\r\n  toggleSidebar(): void {\r\n    this.isHidden.next(!this.isHidden.value);  // Toggle the current state\r\n  }\r\n\r\n  // Method to get the observable of the sidebar state\r\n  getSidebarStateObservable() {\r\n    return this.isHidden.asObservable();  // Return observable for subscribing to state changes\r\n  }\r\n\r\n}"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,cAAc;EAH3BC,YAAA;IAIU,KAAAC,QAAQ,GAAG,IAAIH,eAAe,CAAU,IAAI,CAAC,CAAC,CAAE;;EAExD;EACAI,eAAeA,CAACC,KAAc;IAC5B,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACD,KAAK,CAAC,CAAC,CAAE;EAC9B;EAEA;EACAE,eAAeA,CAAA;IACb,OAAO,IAAI,CAACJ,QAAQ,CAACK,KAAK;EAC5B;EAEA;EACAC,aAAaA,CAAA;IACX,IAAI,CAACN,QAAQ,CAACG,IAAI,CAAC,CAAC,IAAI,CAACH,QAAQ,CAACK,KAAK,CAAC,CAAC,CAAE;EAC7C;EAEA;EACAE,yBAAyBA,CAAA;IACvB,OAAO,IAAI,CAACP,QAAQ,CAACQ,YAAY,EAAE,CAAC,CAAE;EACxC;EAAC,QAAAC,CAAA,G;qBArBUX,cAAc;EAAA;EAAA,QAAAY,EAAA,G;WAAdZ,cAAc;IAAAa,OAAA,EAAdb,cAAc,CAAAc,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
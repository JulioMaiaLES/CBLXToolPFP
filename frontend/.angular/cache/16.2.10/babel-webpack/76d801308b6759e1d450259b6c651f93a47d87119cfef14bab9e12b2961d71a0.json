{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class FormErrorPipe {\n  constructor() {\n    this.error_prefix = 'errors.form';\n  }\n  transform(value) {\n    if (value) {\n      const key = Object.keys(value)[0];\n      return this.error_prefix + '.' + key;\n    }\n    return '';\n  }\n  static #_ = this.ɵfac = function FormErrorPipe_Factory(t) {\n    return new (t || FormErrorPipe)();\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"formError\",\n    type: FormErrorPipe,\n    pure: true\n  });\n}","map":{"version":3,"names":["FormErrorPipe","constructor","error_prefix","transform","value","key","Object","keys","_","_2","pure"],"sources":["C:\\Users\\lucas\\OneDrive\\Documentos\\GitHub\\CBLXToolPFP\\frontend\\src\\app\\pipes\\form-error.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ValidationErrors } from '@angular/forms';\r\n\r\n@Pipe({\r\n  name: 'formError',\r\n})\r\nexport class FormErrorPipe implements PipeTransform {\r\n  error_prefix = 'errors.form';\r\n\r\n  transform(value: ValidationErrors | null): string {\r\n    if (value) {\r\n      const key = Object.keys(value)[0];\r\n      return this.error_prefix + '.' + key;\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n"],"mappings":";AAMA,OAAM,MAAOA,aAAa;EAH1BC,YAAA;IAIE,KAAAC,YAAY,GAAG,aAAa;;EAE5BC,SAASA,CAACC,KAA8B;IACtC,IAAIA,KAAK,EAAE;MACT,MAAMC,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;MACjC,OAAO,IAAI,CAACF,YAAY,GAAG,GAAG,GAAGG,GAAG;;IAGtC,OAAO,EAAE;EACX;EAAC,QAAAG,CAAA,G;qBAVUR,aAAa;EAAA;EAAA,QAAAS,EAAA,G;;UAAbT,aAAa;IAAAU,IAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
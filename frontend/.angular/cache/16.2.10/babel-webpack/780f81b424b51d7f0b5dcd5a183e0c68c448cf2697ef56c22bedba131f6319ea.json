{"ast":null,"code":"import { ALL_LOWER, ALL_UPPER, ALL_DIGIT } from '../../data/const.esm.js';\n\n/*\n *-------------------------------------------------------------------------------\n * sequences (abcdef) ------------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchSequence {\n  constructor() {\n    this.MAX_DELTA = 5;\n  }\n  // eslint-disable-next-line max-statements\n  match({\n    password\n  }) {\n    /*\n     * Identifies sequences by looking for repeated differences in unicode codepoint.\n     * this allows skipping, such as 9753, and also matches some extended unicode sequences\n     * such as Greek and Cyrillic alphabets.\n     *\n     * for example, consider the input 'abcdb975zy'\n     *\n     * password: a   b   c   d   b    9   7   5   z   y\n     * index:    0   1   2   3   4    5   6   7   8   9\n     * delta:      1   1   1  -2  -41  -2  -2  69   1\n     *\n     * expected result:\n     * [(i, j, delta), ...] = [(0, 3, 1), (5, 7, -2), (8, 9, 1)]\n     */\n    const result = [];\n    if (password.length === 1) {\n      return [];\n    }\n    let i = 0;\n    let lastDelta = null;\n    const passwordLength = password.length;\n    for (let k = 1; k < passwordLength; k += 1) {\n      const delta = password.charCodeAt(k) - password.charCodeAt(k - 1);\n      if (lastDelta == null) {\n        lastDelta = delta;\n      }\n      if (delta !== lastDelta) {\n        const j = k - 1;\n        this.update({\n          i,\n          j,\n          delta: lastDelta,\n          password,\n          result\n        });\n        i = j;\n        lastDelta = delta;\n      }\n    }\n    this.update({\n      i,\n      j: passwordLength - 1,\n      delta: lastDelta,\n      password,\n      result\n    });\n    return result;\n  }\n  update({\n    i,\n    j,\n    delta,\n    password,\n    result\n  }) {\n    if (j - i > 1 || Math.abs(delta) === 1) {\n      const absoluteDelta = Math.abs(delta);\n      if (absoluteDelta > 0 && absoluteDelta <= this.MAX_DELTA) {\n        const token = password.slice(i, +j + 1 || 9e9);\n        const {\n          sequenceName,\n          sequenceSpace\n        } = this.getSequence(token);\n        return result.push({\n          pattern: 'sequence',\n          i,\n          j,\n          token: password.slice(i, +j + 1 || 9e9),\n          sequenceName,\n          sequenceSpace,\n          ascending: delta > 0\n        });\n      }\n    }\n    return null;\n  }\n  getSequence(token) {\n    // TODO conservatively stick with roman alphabet size.\n    //  (this could be improved)\n    let sequenceName = 'unicode';\n    let sequenceSpace = 26;\n    if (ALL_LOWER.test(token)) {\n      sequenceName = 'lower';\n      sequenceSpace = 26;\n    } else if (ALL_UPPER.test(token)) {\n      sequenceName = 'upper';\n      sequenceSpace = 26;\n    } else if (ALL_DIGIT.test(token)) {\n      sequenceName = 'digits';\n      sequenceSpace = 10;\n    }\n    return {\n      sequenceName,\n      sequenceSpace\n    };\n  }\n}\nexport { MatchSequence as default };","map":{"version":3,"names":["ALL_LOWER","ALL_UPPER","ALL_DIGIT","MatchSequence","constructor","MAX_DELTA","match","password","result","length","i","lastDelta","passwordLength","k","delta","charCodeAt","j","update","Math","abs","absoluteDelta","token","slice","sequenceName","sequenceSpace","getSequence","push","pattern","ascending","test","default"],"sources":["C:/Users/j-mai/Documents/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/matcher/sequence/matching.esm.js"],"sourcesContent":["import { ALL_LOWER, ALL_UPPER, ALL_DIGIT } from '../../data/const.esm.js';\n\n/*\n *-------------------------------------------------------------------------------\n * sequences (abcdef) ------------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchSequence {\n  constructor() {\n    this.MAX_DELTA = 5;\n  }\n  // eslint-disable-next-line max-statements\n  match({\n    password\n  }) {\n    /*\n     * Identifies sequences by looking for repeated differences in unicode codepoint.\n     * this allows skipping, such as 9753, and also matches some extended unicode sequences\n     * such as Greek and Cyrillic alphabets.\n     *\n     * for example, consider the input 'abcdb975zy'\n     *\n     * password: a   b   c   d   b    9   7   5   z   y\n     * index:    0   1   2   3   4    5   6   7   8   9\n     * delta:      1   1   1  -2  -41  -2  -2  69   1\n     *\n     * expected result:\n     * [(i, j, delta), ...] = [(0, 3, 1), (5, 7, -2), (8, 9, 1)]\n     */\n    const result = [];\n    if (password.length === 1) {\n      return [];\n    }\n    let i = 0;\n    let lastDelta = null;\n    const passwordLength = password.length;\n    for (let k = 1; k < passwordLength; k += 1) {\n      const delta = password.charCodeAt(k) - password.charCodeAt(k - 1);\n      if (lastDelta == null) {\n        lastDelta = delta;\n      }\n      if (delta !== lastDelta) {\n        const j = k - 1;\n        this.update({\n          i,\n          j,\n          delta: lastDelta,\n          password,\n          result\n        });\n        i = j;\n        lastDelta = delta;\n      }\n    }\n    this.update({\n      i,\n      j: passwordLength - 1,\n      delta: lastDelta,\n      password,\n      result\n    });\n    return result;\n  }\n  update({\n    i,\n    j,\n    delta,\n    password,\n    result\n  }) {\n    if (j - i > 1 || Math.abs(delta) === 1) {\n      const absoluteDelta = Math.abs(delta);\n      if (absoluteDelta > 0 && absoluteDelta <= this.MAX_DELTA) {\n        const token = password.slice(i, +j + 1 || 9e9);\n        const {\n          sequenceName,\n          sequenceSpace\n        } = this.getSequence(token);\n        return result.push({\n          pattern: 'sequence',\n          i,\n          j,\n          token: password.slice(i, +j + 1 || 9e9),\n          sequenceName,\n          sequenceSpace,\n          ascending: delta > 0\n        });\n      }\n    }\n    return null;\n  }\n  getSequence(token) {\n    // TODO conservatively stick with roman alphabet size.\n    //  (this could be improved)\n    let sequenceName = 'unicode';\n    let sequenceSpace = 26;\n    if (ALL_LOWER.test(token)) {\n      sequenceName = 'lower';\n      sequenceSpace = 26;\n    } else if (ALL_UPPER.test(token)) {\n      sequenceName = 'upper';\n      sequenceSpace = 26;\n    } else if (ALL_DIGIT.test(token)) {\n      sequenceName = 'digits';\n      sequenceSpace = 10;\n    }\n    return {\n      sequenceName,\n      sequenceSpace\n    };\n  }\n}\n\nexport { MatchSequence as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
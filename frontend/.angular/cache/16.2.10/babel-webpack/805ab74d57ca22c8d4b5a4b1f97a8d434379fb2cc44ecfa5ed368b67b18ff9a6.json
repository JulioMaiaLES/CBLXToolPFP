{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/lucas/OneDrive/Documentos/GitHub/CBLXToolPFP/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, inject, Injectable, ElementRef, Renderer2, makeEnvironmentProviders, Directive, Input, Output, HostListener, Pipe } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: ['.', ','],\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // eslint-disable-next-line @typescript-eslint/quotes\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  apm: false,\n  leadZero: false,\n  keepCharacterPositions: false,\n  triggerOnMaskChange: false,\n  inputTransformFn: value => value,\n  outputTransformFn: value => value,\n  maskFilled: new EventEmitter(),\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    U: {\n      pattern: new RegExp('[A-Z]')\n    },\n    L: {\n      pattern: new RegExp('[a-z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nconst timeMasks = [\"Hh:m0:s0\" /* MaskExpression.HOURS_MINUTES_SECONDS */, \"Hh:m0\" /* MaskExpression.HOURS_MINUTES */, \"m0:s0\" /* MaskExpression.MINUTES_SECONDS */];\n\nconst withoutValidation = [\"percent\" /* MaskExpression.PERCENT */, \"Hh\" /* MaskExpression.HOURS_HOUR */, \"s0\" /* MaskExpression.SECONDS */, \"m0\" /* MaskExpression.MINUTES */, \"separator\" /* MaskExpression.SEPARATOR */, \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */, \"d0/M0\" /* MaskExpression.DAYS_MONTHS */, \"d0\" /* MaskExpression.DAYS */, \"M0\" /* MaskExpression.MONTHS */];\n\nclass NgxMaskApplierService {\n  constructor() {\n    this._config = inject(NGX_MASK_CONFIG);\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.hiddenInput = this._config.hiddenInput;\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.specialCharacters = this._config.specialCharacters;\n    this.patterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n    this.leadZero = this._config.leadZero;\n    this.apm = this._config.apm;\n    this.inputTransformFn = this._config.inputTransformFn;\n    this.outputTransformFn = this._config.outputTransformFn;\n    this.keepCharacterPositions = this._config.keepCharacterPositions;\n    this._shift = new Set();\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.showKeepCharacterExp = '';\n    this.shownMaskExpression = '';\n    this.deletedSpecialCharacter = false;\n    this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n      let x = [];\n      let decimalChar = '';\n      if (Array.isArray(decimalChars)) {\n        const regExp = new RegExp(decimalChars.map(v => '[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v).join('|'));\n        x = str.split(regExp);\n        decimalChar = str.match(regExp)?.[0] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n      } else {\n        x = str.split(decimalChars);\n        decimalChar = decimalChars;\n      }\n      const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : \"\" /* MaskExpression.EMPTY_STRING */;\n      let res = x[0] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n      const separatorLimit = this.separatorLimit.replace(/\\s/g, \"\" /* MaskExpression.EMPTY_STRING */);\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === \"-\" /* MaskExpression.MINUS */) {\n          res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n      const rgx = /(\\d+)(\\d{3})/;\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n      return res + decimals.substring(0, precision + 1);\n    };\n    this.percentage = str => {\n      const sanitizedStr = str.replace(',', '.');\n      const value = Number(sanitizedStr);\n      return !isNaN(value) && value >= 0 && value <= 100;\n    };\n    this.getPrecision = maskExpression => {\n      const x = maskExpression.split(\".\" /* MaskExpression.DOT */);\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n      return Infinity;\n    };\n    this.checkAndRemoveSuffix = inputValue => {\n      for (let i = this.suffix?.length - 1; i >= 0; i--) {\n        const substr = this.suffix.substring(i, this.suffix?.length);\n        if (inputValue.includes(substr) && i !== this.suffix?.length - 1 && (i - 1 < 0 || !inputValue.includes(this.suffix.substring(i - 1, this.suffix?.length)))) {\n          return inputValue.replace(substr, \"\" /* MaskExpression.EMPTY_STRING */);\n        }\n      }\n\n      return inputValue;\n    };\n    this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n      if (precision < Infinity) {\n        // TODO need think about decimalMarker\n        if (Array.isArray(decimalMarker)) {\n          const marker = decimalMarker.find(dm => dm !== this.thousandSeparator);\n          // eslint-disable-next-line no-param-reassign\n          decimalMarker = marker ? marker : decimalMarker[0];\n        }\n        const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n        const precisionMatch = inputValue.match(precisionRegEx);\n        const precisionMatchLength = (precisionMatch && precisionMatch[0]?.length) ?? 0;\n        if (precisionMatchLength - 1 > precision) {\n          const diff = precisionMatchLength - 1 - precision;\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n        if (precision === 0 && this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n      return inputValue;\n    };\n  }\n  applyMaskWithPattern(inputValue, maskAndPattern) {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    if (!maskExpression || typeof inputValue !== 'string') {\n      return \"\" /* MaskExpression.EMPTY_STRING */;\n    }\n\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n    if (inputValue.slice(0, this.prefix.length) === this.prefix && !this.showMaskTyped) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n    if (!!this.suffix && inputValue?.length > 0) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkAndRemoveSuffix(inputValue);\n    }\n    if (inputValue === '(' && this.prefix) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = '';\n    }\n    const inputArray = inputValue.toString().split(\"\" /* MaskExpression.EMPTY_STRING */);\n    if (this.allowNegativeNumbers && inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */) {\n      // eslint-disable-next-line no-param-reassign\n      result += inputValue.slice(cursor, cursor + 1);\n    }\n    if (maskExpression === \"IP\" /* MaskExpression.IP */) {\n      const valuesIP = inputValue.split(\".\" /* MaskExpression.DOT */);\n      this.ipError = this._validIP(valuesIP);\n      // eslint-disable-next-line no-param-reassign\n      maskExpression = '099.099.099.099';\n    }\n    const arr = [];\n    for (let i = 0; i < inputValue.length; i++) {\n      if (inputValue[i]?.match('\\\\d')) {\n        arr.push(inputValue[i] ?? \"\" /* MaskExpression.EMPTY_STRING */);\n      }\n    }\n\n    if (maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n      this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n      if (arr.length > 11) {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        maskExpression = '000.000.000-00';\n      }\n    }\n    if (maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */)) {\n      if (inputValue.match('[a-z]|[A-Z]') ||\n      // eslint-disable-next-line no-useless-escape\n      inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/) && !backspaced) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n        const precision = this.getPrecision(maskExpression);\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n      const decimalMarker = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* MaskExpression.DOT */;\n      if (inputValue.indexOf(decimalMarker) > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf(decimalMarker)))) {\n        let base = inputValue.substring(0, inputValue.indexOf(decimalMarker) - 1);\n        if (this.allowNegativeNumbers && inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */ && !backspaced) {\n          base = inputValue.substring(0, inputValue.indexOf(decimalMarker));\n        }\n        // eslint-disable-next-line no-param-reassign\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf(decimalMarker), inputValue.length)}`;\n      }\n      let value = '';\n      this.allowNegativeNumbers && inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */ ? value = inputValue.slice(cursor + 1, cursor + inputValue.length) : value = inputValue;\n      if (this.percentage(value)) {\n        result = this._splitPercentZero(inputValue);\n      } else {\n        result = this._splitPercentZero(inputValue.substring(0, inputValue.length - 1));\n      }\n    } else if (maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n      if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._stripToDecimal(inputValue);\n      }\n      // eslint-disable-next-line no-param-reassign\n      inputValue = inputValue[0] === '-' && this.allowNegativeNumbers ? inputValue.length > 2 && inputValue[1] === '0' && inputValue[2] !== this.thousandSeparator && !this._compareOrIncludes(inputValue[2], this.decimalMarker, this.thousandSeparator) && !backspaced ? inputValue.slice(0, inputValue.length - 1) : inputValue : inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.thousandSeparator && !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) && !backspaced ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n      if (backspaced) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator) ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n      }\n      // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n      const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n      let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n      //.replace(decimalMarkerEscaped, '');\n      if (Array.isArray(this.decimalMarker)) {\n        for (const marker of this.decimalMarker) {\n          invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), \"\" /* MaskExpression.EMPTY_STRING */);\n        }\n      } else {\n        invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n      }\n      const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n      if (inputValue.match(invalidCharRegexp) || inputValue.length === 1 && this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator)) {\n        // eslint-disable-next-line no-param-reassign\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n      const precision = this.getPrecision(maskExpression);\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n      const commaShift = result.indexOf(\",\" /* MaskExpression.COMMA */) - inputValue.indexOf(\",\" /* MaskExpression.COMMA */);\n      const shiftStep = result.length - inputValue.length;\n      if (shiftStep > 0 && result[position] !== this.thousandSeparator) {\n        backspaceShift = true;\n        let _shift = 0;\n        do {\n          this._shift.add(position + _shift);\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (result[position - 1] === this.decimalMarker || shiftStep === -4 || shiftStep === -3 || result[position] === \",\" /* MaskExpression.COMMA */) {\n        this._shift.clear();\n        this._shift.add(position - 1);\n      } else if (commaShift !== 0 && position > 0 && !(result.indexOf(\",\" /* MaskExpression.COMMA */) >= position && position > 3) || !(result.indexOf(\".\" /* MaskExpression.DOT */) >= position && position > 3) && shiftStep <= 0) {\n        this._shift.clear();\n        backspaceShift = true;\n        shift = shiftStep;\n        // eslint-disable-next-line no-param-reassign\n        position += shiftStep;\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for (\n      // eslint-disable-next-line\n      let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i] ?? \"\" /* MaskExpression.EMPTY_STRING */) {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n        const symbolStarInPattern = (\"*\" /* MaskExpression.SYMBOL_STAR */ in this.patterns);\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) && maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */) {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) && maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ && !symbolStarInPattern) {\n          result += inputSymbol;\n          multi = true;\n        } else if (maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */ && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n          if (maskExpression[cursor] === \"H\" /* MaskExpression.HOURS */) {\n            if (this.apm ? Number(inputSymbol) > 9 : Number(inputSymbol) > 2) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === \"h\" /* MaskExpression.HOUR */) {\n            if (this.apm ? result.length === 1 && Number(result) > 1 || result === '1' && Number(inputSymbol) > 2 || inputValue.slice(cursor - 1, cursor).length === 1 && Number(inputValue.slice(cursor - 1, cursor)) > 2 || inputValue.slice(cursor - 1, cursor) === '1' && Number(inputSymbol) > 2 : result === '2' && Number(inputSymbol) > 3 || (result.slice(cursor - 2, cursor) === '2' || result.slice(cursor - 3, cursor) === '2' || result.slice(cursor - 4, cursor) === '2' || result.slice(cursor - 1, cursor) === '2') && Number(inputSymbol) > 3 && cursor > 10) {\n              // eslint-disable-next-line no-param-reassign\n              position = position + 1;\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === \"m\" /* MaskExpression.MINUTE */ || maskExpression[cursor] === \"s\" /* MaskExpression.SECOND */) {\n            if (Number(inputSymbol) > 5) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          const daysCount = 31;\n          const inputValueCursor = inputValue[cursor];\n          const inputValueCursorPlusOne = inputValue[cursor + 1];\n          const inputValueCursorPlusTwo = inputValue[cursor + 2];\n          const inputValueCursorMinusOne = inputValue[cursor - 1];\n          const inputValueCursorMinusTwo = inputValue[cursor - 2];\n          const inputValueCursorMinusThree = inputValue[cursor - 3];\n          const inputValueSliceMinusThreeMinusOne = inputValue.slice(cursor - 3, cursor - 1);\n          const inputValueSliceMinusOnePlusOne = inputValue.slice(cursor - 1, cursor + 1);\n          const inputValueSliceCursorPlusTwo = inputValue.slice(cursor, cursor + 2);\n          const inputValueSliceMinusTwoCursor = inputValue.slice(cursor - 2, cursor);\n          if (maskExpression[cursor] === \"d\" /* MaskExpression.DAY */) {\n            const maskStartWithMonth = maskExpression.slice(0, 2) === \"M0\" /* MaskExpression.MONTHS */;\n            const startWithMonthInput = maskExpression.slice(0, 2) === \"M0\" /* MaskExpression.MONTHS */ && this.specialCharacters.includes(inputValueCursorMinusTwo);\n            if (Number(inputSymbol) > 3 && this.leadZeroDateTime || !maskStartWithMonth && (Number(inputValueSliceCursorPlusTwo) > daysCount || Number(inputValueSliceMinusOnePlusOne) > daysCount || this.specialCharacters.includes(inputValueCursorPlusOne)) || (startWithMonthInput ? Number(inputValueSliceMinusOnePlusOne) > daysCount || !this.specialCharacters.includes(inputValueCursor) && this.specialCharacters.includes(inputValueCursorPlusTwo) || this.specialCharacters.includes(inputValueCursor) : Number(inputValueSliceCursorPlusTwo) > daysCount || this.specialCharacters.includes(inputValueCursorPlusOne))) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === \"M\" /* MaskExpression.MONTH */) {\n            const monthsCount = 12;\n            // mask without day\n            const withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValueSliceCursorPlusTwo) > monthsCount || this.specialCharacters.includes(inputValueCursorPlusOne));\n            // day<10 && month<12 for input\n            const specialChart = maskExpression.slice(cursor + 2, cursor + 3);\n            const day1monthInput = inputValueSliceMinusThreeMinusOne.includes(specialChart) && (this.specialCharacters.includes(inputValueCursorMinusTwo) && Number(inputValueSliceMinusOnePlusOne) > monthsCount && !this.specialCharacters.includes(inputValueCursor) || this.specialCharacters.includes(inputValueCursor) || this.specialCharacters.includes(inputValueCursorMinusThree) && Number(inputValueSliceMinusTwoCursor) > monthsCount && !this.specialCharacters.includes(inputValueCursorMinusOne) || this.specialCharacters.includes(inputValueCursorMinusOne));\n            //  month<12 && day<10 for input\n            const day2monthInput = Number(inputValueSliceMinusThreeMinusOne) <= daysCount && !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) && this.specialCharacters.includes(inputValueCursorMinusOne) && (Number(inputValueSliceCursorPlusTwo) > monthsCount || this.specialCharacters.includes(inputValueCursorPlusOne));\n            // cursor === 5 && without days\n            const day2monthInputDot = Number(inputValueSliceCursorPlusTwo) > monthsCount && cursor === 5 || this.specialCharacters.includes(inputValueCursorPlusOne) && cursor === 5;\n            // // day<10 && month<12 for paste whole data\n            const day1monthPaste = Number(inputValueSliceMinusThreeMinusOne) > daysCount && !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) && !this.specialCharacters.includes(inputValueSliceMinusTwoCursor) && Number(inputValueSliceMinusTwoCursor) > monthsCount;\n            // 10<day<31 && month<12 for paste whole data\n            const day2monthPaste = Number(inputValueSliceMinusThreeMinusOne) <= daysCount && !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) && !this.specialCharacters.includes(inputValueCursorMinusOne) && Number(inputValueSliceMinusOnePlusOne) > monthsCount;\n            if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthPaste || day1monthPaste || day2monthInput || day2monthInputDot && !this.leadZeroDateTime) {\n              // eslint-disable-next-line no-param-reassign\n              position = !this.leadZeroDateTime ? position + 1 : position;\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          result += inputSymbol;\n          cursor++;\n        } else if (inputSymbol === \" \" /* MaskExpression.WHITE_SPACE */ && maskExpression[cursor] === \" \" /* MaskExpression.WHITE_SPACE */ || inputSymbol === \"/\" /* MaskExpression.SLASH */ && maskExpression[cursor] === \"/\" /* MaskExpression.SLASH */) {\n          result += inputSymbol;\n          cursor++;\n        } else if (this.specialCharacters.indexOf(maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n          i--;\n        } else if (maskExpression[cursor] === \"9\" /* MaskExpression.NUMBER_NINE */ && this.showMaskTyped) {\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n        } else if (this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */] && this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.optional) {\n          if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00' && !maskExpression.match(/^9+\\.0+$/) && !this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.optional) {\n            result += inputArray[cursor];\n          }\n          if (maskExpression.includes(\"9\" /* MaskExpression.NUMBER_NINE */ + \"*\" /* MaskExpression.SYMBOL_STAR */) && maskExpression.includes(\"0\" /* MaskExpression.NUMBER_ZERO */ + \"*\" /* MaskExpression.SYMBOL_STAR */)) {\n            cursor++;\n          }\n          cursor++;\n          i--;\n        } else if (this.maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ && this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */ && this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.showMaskTyped && this.specialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter && this.placeHolderCharacter.length === 1) {\n          stepBack = true;\n        }\n      }\n    }\n    if (result.length + 1 === maskExpression.length && this.specialCharacters.indexOf(maskExpression[maskExpression.length - 1] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n    let newPosition = position + 1;\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n    let actualShift = justPasted && !maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) ? cursor : this._shift.has(position) ? shift : 0;\n    if (stepBack) {\n      actualShift--;\n    }\n    cb(actualShift, backspaceShift);\n    if (shift < 0) {\n      this._shift.clear();\n    }\n    let onlySpecial = false;\n    if (backspaced) {\n      onlySpecial = inputArray.every(char => this.specialCharacters.includes(char));\n    }\n    let res = `${this.prefix}${onlySpecial ? \"\" /* MaskExpression.EMPTY_STRING */ : result}${this.suffix}`;\n    if (result.length === 0) {\n      res = !this.dropSpecialCharacters ? `${this.prefix}${result}` : `${result}`;\n    }\n    if (result.includes(\"-\" /* MaskExpression.MINUS */) && this.prefix && this.allowNegativeNumbers) {\n      if (backspaced && result === \"-\" /* MaskExpression.MINUS */) {\n        return '';\n      }\n      res = `${\"-\" /* MaskExpression.MINUS */}${this.prefix}${result.split(\"-\" /* MaskExpression.MINUS */).join(\"\" /* MaskExpression.EMPTY_STRING */)}${this.suffix}`;\n    }\n    return res;\n  }\n  _findDropSpecialChar(inputSymbol) {\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      return this.dropSpecialCharacters.find(val => val === inputSymbol);\n    }\n    return this._findSpecialChar(inputSymbol);\n  }\n  _findSpecialChar(inputSymbol) {\n    return this.specialCharacters.find(val => val === inputSymbol);\n  }\n  _checkSymbolMask(inputSymbol, maskSymbol) {\n    this.patterns = this.customPattern ? this.customPattern : this.patterns;\n    return (this.patterns[maskSymbol]?.pattern && this.patterns[maskSymbol]?.pattern.test(inputSymbol)) ?? false;\n  }\n  _stripToDecimal(str) {\n    return str.split(\"\" /* MaskExpression.EMPTY_STRING */).filter((i, idx) => {\n      const isDecimalMarker = typeof this.decimalMarker === 'string' ? i === this.decimalMarker :\n      // TODO (inepipenko) use utility type\n      this.decimalMarker.includes(i);\n      return i.match('^-?\\\\d') || i === this.thousandSeparator || isDecimalMarker || i === \"-\" /* MaskExpression.MINUS */ && idx === 0 && this.allowNegativeNumbers;\n    }).join(\"\" /* MaskExpression.EMPTY_STRING */);\n  }\n\n  _charToRegExpExpression(char) {\n    // if (Array.isArray(char)) {\n    // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n    // }\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n    }\n    return char;\n  }\n  _shiftStep(maskExpression, cursor, inputLength) {\n    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n    this._shift.add(shiftStep + this.prefix.length || 0);\n  }\n  _compareOrIncludes(value, comparedValue, excludedValue) {\n    return Array.isArray(comparedValue) ? comparedValue.filter(v => v !== excludedValue).includes(value) : value === comparedValue;\n  }\n  _validIP(valuesIP) {\n    return !(valuesIP.length === 4 && !valuesIP.some((value, index) => {\n      if (valuesIP.length !== index + 1) {\n        return value === \"\" /* MaskExpression.EMPTY_STRING */ || Number(value) > 255;\n      }\n      return value === \"\" /* MaskExpression.EMPTY_STRING */ || Number(value.substring(0, 3)) > 255;\n    }));\n  }\n  _splitPercentZero(value) {\n    const decimalIndex = typeof this.decimalMarker === 'string' ? value.indexOf(this.decimalMarker) : value.indexOf(\".\" /* MaskExpression.DOT */);\n    if (decimalIndex === -1) {\n      const parsedValue = parseInt(value, 10);\n      return isNaN(parsedValue) ? \"\" /* MaskExpression.EMPTY_STRING */ : parsedValue.toString();\n    } else {\n      const integerPart = parseInt(value.substring(0, decimalIndex), 10);\n      const decimalPart = value.substring(decimalIndex + 1);\n      const integerString = isNaN(integerPart) ? '' : integerPart.toString();\n      const decimal = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* MaskExpression.DOT */;\n      return integerString === \"\" /* MaskExpression.EMPTY_STRING */ ? \"\" /* MaskExpression.EMPTY_STRING */ : integerString + decimal + decimalPart;\n    }\n  }\n  static #_ = this.ɵfac = function NgxMaskApplierService_Factory(t) {\n    return new (t || NgxMaskApplierService)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxMaskApplierService,\n    factory: NgxMaskApplierService.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskApplierService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass NgxMaskService extends NgxMaskApplierService {\n  constructor() {\n    super(...arguments);\n    this.isNumberValue = false;\n    this.maskIsShown = '';\n    this.selStart = null;\n    this.selEnd = null;\n    /**\r\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\r\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\r\n     */\n    this.writingValue = false;\n    this.maskChanged = false;\n    this._maskExpressionArray = [];\n    this.triggerOnMaskChange = false;\n    this._previousValue = '';\n    this._currentValue = '';\n    this._emitValue = false;\n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    this.onChange = _ => {};\n    this._elementRef = inject(ElementRef, {\n      optional: true\n    });\n    this.document = inject(DOCUMENT);\n    this._config = inject(NGX_MASK_CONFIG);\n    this._renderer = inject(Renderer2, {\n      optional: true\n    });\n  }\n  // eslint-disable-next-line complexity\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    if (!maskExpression) {\n      return inputValue !== this.actualValue ? this.actualValue : inputValue;\n    }\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : \"\" /* MaskExpression.EMPTY_STRING */;\n    if (this.maskExpression === \"IP\" /* MaskExpression.IP */ && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* MaskExpression.HASH */);\n    }\n\n    if (this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */ && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* MaskExpression.HASH */);\n    }\n\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown;\n    }\n    const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] ?? \"\" /* MaskExpression.EMPTY_STRING */ : \"\" /* MaskExpression.EMPTY_STRING */;\n    let newInputValue = '';\n    if (this.hiddenInput !== undefined && !this.writingValue) {\n      let actualResult = inputValue && inputValue.length === 1 ? inputValue.split(\"\" /* MaskExpression.EMPTY_STRING */) : this.actualValue.split(\"\" /* MaskExpression.EMPTY_STRING */);\n      // eslint-disable  @typescript-eslint/no-unused-expressions\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      if (typeof this.selStart === 'object' && typeof this.selEnd === 'object') {\n        this.selStart = Number(this.selStart);\n        this.selEnd = Number(this.selEnd);\n      } else {\n        inputValue !== \"\" /* MaskExpression.EMPTY_STRING */ && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? backspaced ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(inputValue.length - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = [];\n      }\n      if (this.showMaskTyped) {\n        if (!this.hiddenInput) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = this.removeMask(inputValue);\n        }\n      }\n      // eslint-enable  @typescript-eslint/no-unused-expressions\n      newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join(\"\" /* MaskExpression.EMPTY_STRING */)) : inputValue;\n    }\n    if (justPasted && (this.hiddenInput || !this.hiddenInput)) {\n      newInputValue = inputValue;\n    }\n    if (backspaced && this.specialCharacters.indexOf(this.maskExpression[position] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1 && this.showMaskTyped) {\n      newInputValue = this._currentValue;\n    }\n    if (this.deletedSpecialCharacter && position) {\n      if (this.specialCharacters.includes(this.actualValue.slice(position, position + 1))) {\n        // eslint-disable-next-line no-param-reassign\n        position = position + 1;\n      } else if (maskExpression.slice(position - 1, position + 1) !== \"M0\" /* MaskExpression.MONTHS */) {\n        // eslint-disable-next-line no-param-reassign\n        position = position - 2;\n      }\n      // eslint-disable-next-line no-param-reassign\n      this.deletedSpecialCharacter = false;\n    }\n    if (this.showMaskTyped && this.placeHolderCharacter.length === 1 && !this.leadZeroDateTime) {\n      // eslint-disable-next-line no-param-reassign\n      inputValue = this.removeMask(inputValue);\n    }\n    if (this.maskChanged) {\n      newInputValue = inputValue;\n    } else {\n      newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    }\n    if (this.showMaskTyped && this.keepCharacterPositions && this.actualValue && !justPasted) {\n      const value = this.dropSpecialCharacters ? this.removeMask(this.actualValue) : this.actualValue;\n      this.formControlResult(value);\n      return this.actualValue ? this.actualValue : this.prefix + this.maskIsShown + this.suffix;\n    }\n    const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n    this.actualValue = this.getActualValue(result);\n    // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n    if (this.thousandSeparator === \".\" /* MaskExpression.DOT */ && this.decimalMarker === \".\" /* MaskExpression.DOT */) {\n      this.decimalMarker = \",\" /* MaskExpression.COMMA */;\n    }\n    // b) remove decimal marker from list of special characters to mask\n    if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && this.dropSpecialCharacters === true) {\n      this.specialCharacters = this.specialCharacters.filter(item => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n      );\n    }\n\n    if (result || result === '') {\n      this._previousValue = this._currentValue;\n      this._currentValue = result;\n      this._emitValue = this._previousValue !== this._currentValue || this.maskChanged || this._previousValue === this._currentValue && justPasted;\n    }\n    this._emitValue ? this.formControlResult(result) : '';\n    if (!this.showMaskTyped || this.showMaskTyped && this.hiddenInput) {\n      if (this.hiddenInput) {\n        if (backspaced) {\n          return this.hideInput(result, this.maskExpression);\n        }\n        return this.hideInput(result, this.maskExpression) + this.maskIsShown.slice(result.length);\n      }\n      return result;\n    }\n    const resLen = result.length;\n    const prefNmask = this.prefix + this.maskIsShown;\n    if (this.maskExpression.includes(\"H\" /* MaskExpression.HOURS */)) {\n      const countSkipedSymbol = this._numberSkipedSymbols(result);\n      return result + prefNmask.slice(resLen + countSkipedSymbol);\n    } else if (this.maskExpression === \"IP\" /* MaskExpression.IP */ || this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n      return result + prefNmask;\n    }\n    return result + prefNmask.slice(resLen);\n  }\n  // get the number of characters that were shifted\n  _numberSkipedSymbols(value) {\n    const regex = /(^|\\D)(\\d\\D)/g;\n    let match = regex.exec(value);\n    let countSkipedSymbol = 0;\n    while (match != null) {\n      countSkipedSymbol += 1;\n      match = regex.exec(value);\n    }\n    return countSkipedSymbol;\n  }\n  applyValueChanges(position, justPasted, backspaced,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n  cb = () => {}) {\n    const formElement = this._elementRef?.nativeElement;\n    if (!formElement) {\n      return;\n    }\n    formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n    if (formElement === this._getActiveElement()) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n  hideInput(inputValue, maskExpression) {\n    return inputValue.split(\"\" /* MaskExpression.EMPTY_STRING */).map((curr, index) => {\n      if (this.patterns && this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */] && this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.symbol) {\n        return this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.symbol;\n      }\n      return curr;\n    }).join(\"\" /* MaskExpression.EMPTY_STRING */);\n  }\n  // this function is not necessary, it checks result against maskExpression\n  getActualValue(res) {\n    const compare = res.split(\"\" /* MaskExpression.EMPTY_STRING */).filter((symbol, i) => {\n      const maskChar = this.maskExpression[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n      return this._checkSymbolMask(symbol, maskChar) || this.specialCharacters.includes(maskChar) && symbol === maskChar;\n    });\n    if (compare.join(\"\" /* MaskExpression.EMPTY_STRING */) === res) {\n      return compare.join(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n\n    return res;\n  }\n  shiftTypedSymbols(inputValue) {\n    let symbolToReplace = '';\n    const newInputValue = inputValue && inputValue.split(\"\" /* MaskExpression.EMPTY_STRING */).map((currSymbol, index) => {\n      if (this.specialCharacters.includes(inputValue[index + 1] ?? \"\" /* MaskExpression.EMPTY_STRING */) && inputValue[index + 1] !== this.maskExpression[index + 1]) {\n        symbolToReplace = currSymbol;\n        return inputValue[index + 1];\n      }\n      if (symbolToReplace.length) {\n        const replaceSymbol = symbolToReplace;\n        symbolToReplace = \"\" /* MaskExpression.EMPTY_STRING */;\n        return replaceSymbol;\n      }\n      return currSymbol;\n    }) || [];\n    return newInputValue.join(\"\" /* MaskExpression.EMPTY_STRING */);\n  }\n  /**\r\n   * Convert number value to string\r\n   * 3.1415 -> '3.1415'\r\n   * 1e-7 -> '0.0000001'\r\n   */\n  numberToString(value) {\n    if (!value && value !== 0 || this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && (this.leadZero || !this.dropSpecialCharacters) || this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && this.separatorLimit.length > 14 && String(value).length > 14) {\n      return String(value);\n    }\n    return Number(value).toLocaleString('fullwide', {\n      useGrouping: false,\n      maximumFractionDigits: 20\n    }).replace(`/${\"-\" /* MaskExpression.MINUS */}/`, \"-\" /* MaskExpression.MINUS */);\n  }\n\n  showMaskInInput(inputVal) {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === \"IP\" /* MaskExpression.IP */) {\n          return this._checkForIp(inputVal);\n        }\n        if (this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n      if (this.placeHolderCharacter.length === this.maskExpression.length) {\n        return this.placeHolderCharacter;\n      }\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n    return '';\n  }\n  clearIfNotMatchFn() {\n    const formElement = this._elementRef?.nativeElement;\n    if (!formElement) {\n      return;\n    }\n    if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(this.placeHolderCharacter, \"\" /* MaskExpression.EMPTY_STRING */).length) {\n      this.formElementProperty = ['value', \"\" /* MaskExpression.EMPTY_STRING */];\n      this.applyMask('', this.maskExpression);\n    }\n  }\n  set formElementProperty([name, value]) {\n    if (!this._renderer || !this._elementRef) {\n      return;\n    }\n    Promise.resolve().then(() => this._renderer?.setProperty(this._elementRef?.nativeElement, name, value));\n  }\n  checkDropSpecialCharAmount(mask) {\n    const chars = mask.split(\"\" /* MaskExpression.EMPTY_STRING */).filter(item => this._findDropSpecialChar(item));\n    return chars.length;\n  }\n  removeMask(inputValue) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\n  }\n  _checkForIp(inputVal) {\n    if (inputVal === \"#\" /* MaskExpression.HASH */) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    const arr = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = inputVal[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n      if (!value) {\n        continue;\n      }\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n    return '';\n  }\n  _checkForCpfCnpj(inputVal) {\n    const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    if (inputVal === \"#\" /* MaskExpression.HASH */) {\n      return cpf;\n    }\n    const arr = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      const value = inputVal[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n      if (!value) {\n        continue;\n      }\n      if (value.match('\\\\d')) {\n        arr.push(value);\n      }\n    }\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n    if (arr.length === 11) {\n      return '';\n    }\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n      return cnpj.slice(15, cnpj.length);\n    }\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n    return '';\n  }\n  /**\r\n   * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\r\n   */\n  _getActiveElement(document = this.document) {\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  /**\r\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\r\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\r\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\r\n   * model value too. Therefore, we don't trigger onChange in this scenario.\r\n   * @param inputValue the current form input value\r\n   */\n  formControlResult(inputValue) {\n    if (this.writingValue || !this.triggerOnMaskChange && this.maskChanged) {\n      this.maskChanged ? this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue)))))) : '';\n      this.maskChanged = false;\n      return;\n    }\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)))));\n    } else if (this.dropSpecialCharacters || !this.dropSpecialCharacters && this.prefix === inputValue) {\n      this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))));\n    } else {\n      this.onChange(this.outputTransformFn(this._toNumber(inputValue)));\n    }\n  }\n  _toNumber(value) {\n    if (!this.isNumberValue || value === \"\" /* MaskExpression.EMPTY_STRING */) {\n      return value;\n    }\n    if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && (this.leadZero || !this.dropSpecialCharacters)) {\n      return value;\n    }\n    if (String(value).length > 16 && this.separatorLimit.length > 14) {\n      return String(value);\n    }\n    const num = Number(value);\n    if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && Number.isNaN(num)) {\n      const val = String(value).replace(',', '.');\n      return Number(val);\n    }\n    return Number.isNaN(num) ? value : num;\n  }\n  _removeMask(value, specialCharactersForRemove) {\n    if (this.maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */) && value.includes(\".\" /* MaskExpression.DOT */)) {\n      return value;\n    }\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), \"\" /* MaskExpression.EMPTY_STRING */) : value;\n  }\n  _removePrefix(value) {\n    if (!this.prefix) {\n      return value;\n    }\n    return value ? value.replace(this.prefix, \"\" /* MaskExpression.EMPTY_STRING */) : value;\n  }\n  _removeSuffix(value) {\n    if (!this.suffix) {\n      return value;\n    }\n    return value ? value.replace(this.suffix, \"\" /* MaskExpression.EMPTY_STRING */) : value;\n  }\n  _retrieveSeparatorValue(result) {\n    let specialCharacters = Array.isArray(this.dropSpecialCharacters) ? this.specialCharacters.filter(v => {\n      return this.dropSpecialCharacters.includes(v);\n    }) : this.specialCharacters;\n    if (!this.deletedSpecialCharacter && this._checkPatternForSpace() && result.includes(\" \" /* MaskExpression.WHITE_SPACE */)) {\n      specialCharacters = specialCharacters.filter(char => char !== \" \" /* MaskExpression.WHITE_SPACE */);\n    }\n\n    return this._removeMask(result, specialCharacters);\n  }\n  _regExpForRemove(specialCharactersForRemove) {\n    return new RegExp(specialCharactersForRemove.map(item => `\\\\${item}`).join('|'), 'gi');\n  }\n  _replaceDecimalMarkerToDot(value) {\n    const markers = Array.isArray(this.decimalMarker) ? this.decimalMarker : [this.decimalMarker];\n    return value.replace(this._regExpForRemove(markers), \".\" /* MaskExpression.DOT */);\n  }\n\n  _checkSymbols(result) {\n    if (result === \"\" /* MaskExpression.EMPTY_STRING */) {\n      return result;\n    }\n    if (this.maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */) && this.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n      // eslint-disable-next-line no-param-reassign\n      result = result.replace(\",\" /* MaskExpression.COMMA */, \".\" /* MaskExpression.DOT */);\n    }\n\n    const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n    const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n    if (!this.isNumberValue) {\n      return separatorValue;\n    }\n    if (separatorPrecision) {\n      if (result === this.decimalMarker) {\n        return null;\n      }\n      if (this.separatorLimit.length > 14) {\n        return String(separatorValue);\n      }\n      return this._checkPrecision(this.maskExpression, separatorValue);\n    } else {\n      return separatorValue;\n    }\n  }\n  _checkPatternForSpace() {\n    for (const key in this.patterns) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.patterns[key] && this.patterns[key]?.hasOwnProperty('pattern')) {\n        const patternString = this.patterns[key]?.pattern.toString();\n        const pattern = this.patterns[key]?.pattern;\n        if (patternString?.includes(\" \" /* MaskExpression.WHITE_SPACE */) && pattern?.test(this.maskExpression)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  // TODO should think about helpers or separting decimal precision to own property\n  _retrieveSeparatorPrecision(maskExpretion) {\n    const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n  _checkPrecision(separatorExpression, separatorValue) {\n    const separatorPrecision = separatorExpression.slice(10, 11);\n    if (separatorExpression.indexOf('2') > 0 || this.leadZero && Number(separatorPrecision) > 1) {\n      if (this.decimalMarker === \",\" /* MaskExpression.COMMA */ && this.leadZero) {\n        // eslint-disable-next-line no-param-reassign\n        separatorValue = separatorValue.replace(',', '.');\n      }\n      return this.leadZero ? Number(separatorValue).toFixed(Number(separatorPrecision)) : Number(separatorValue).toFixed(2);\n    }\n    return this.numberToString(separatorValue);\n  }\n  _repeatPatternSymbols(maskExp) {\n    return maskExp.match(/{[0-9]+}/) && maskExp.split(\"\" /* MaskExpression.EMPTY_STRING */).reduce((accum, currVal, index) => {\n      this._start = currVal === \"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */ ? index : this._start;\n      if (currVal !== \"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */) {\n        return this._findSpecialChar(currVal) ? accum + currVal : accum;\n      }\n      this._end = index;\n      const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n      const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n      if (maskExp.slice(0, this._start).length > 1 && maskExp.includes(\"S\" /* MaskExpression.LETTER_S */)) {\n        const symbols = maskExp.slice(0, this._start - 1);\n        return symbols.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) ? accum + replaceWith : symbols + accum + replaceWith;\n      } else {\n        return accum + replaceWith;\n      }\n    }, '') || maskExp;\n  }\n  currentLocaleDecimalMarker() {\n    return 1.1.toLocaleString().substring(1, 2);\n  }\n  static #_ = this.ɵfac = /* @__PURE__ */function () {\n    let ɵNgxMaskService_BaseFactory;\n    return function NgxMaskService_Factory(t) {\n      return (ɵNgxMaskService_BaseFactory || (ɵNgxMaskService_BaseFactory = i0.ɵɵgetInheritedFactory(NgxMaskService)))(t || NgxMaskService);\n    };\n  }();\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxMaskService,\n    factory: NgxMaskService.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\r\n * @internal\r\n */\nfunction _configFactory() {\n  const initConfig = inject(INITIAL_CONFIG);\n  const configValue = inject(NEW_CONFIG);\n  return configValue instanceof Function ? {\n    ...initConfig,\n    ...configValue()\n  } : {\n    ...initConfig,\n    ...configValue\n  };\n}\nfunction provideNgxMask(configValue) {\n  return [{\n    provide: NEW_CONFIG,\n    useValue: configValue\n  }, {\n    provide: INITIAL_CONFIG,\n    useValue: initialConfig\n  }, {\n    provide: NGX_MASK_CONFIG,\n    useFactory: _configFactory\n  }, NgxMaskService];\n}\nfunction provideEnvironmentNgxMask(configValue) {\n  return makeEnvironmentProviders(provideNgxMask(configValue));\n}\nclass NgxMaskDirective {\n  constructor() {\n    // eslint-disable-next-line @angular-eslint/no-input-rename\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this.leadZero = null;\n    this.triggerOnMaskChange = null;\n    this.apm = null;\n    this.inputTransformFn = null;\n    this.outputTransformFn = null;\n    this.keepCharacterPositions = null;\n    this.maskFilled = new EventEmitter();\n    this._maskValue = '';\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._justPasted = false;\n    this._isFocused = false;\n    /**For IME composition event */\n    this._isComposing = false;\n    this.document = inject(DOCUMENT);\n    this._maskService = inject(NgxMaskService, {\n      self: true\n    });\n    this._config = inject(NGX_MASK_CONFIG);\n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    this.onChange = _ => {};\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    this.onTouch = () => {};\n  }\n  ngOnChanges(changes) {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n      leadZeroDateTime,\n      leadZero,\n      triggerOnMaskChange,\n      apm,\n      inputTransformFn,\n      outputTransformFn,\n      keepCharacterPositions\n    } = changes;\n    if (maskExpression) {\n      if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n        this._maskService.maskChanged = true;\n      }\n      if (maskExpression.currentValue && maskExpression.currentValue.split(\"||\" /* MaskExpression.OR */).length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split(\"||\" /* MaskExpression.OR */).sort((a, b) => {\n          return a.length - b.length;\n        });\n        this._setMask();\n      } else {\n        this._maskExpressionArray = [];\n        this._maskValue = maskExpression.currentValue || \"\" /* MaskExpression.EMPTY_STRING */;\n        this._maskService.maskExpression = this._maskValue;\n      }\n    }\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.specialCharacters = this._maskService.specialCharacters.filter(c => c !== \"-\" /* MaskExpression.MINUS */);\n      }\n    }\n\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.specialCharacters = specialCharacters.currentValue || [];\n      }\n    }\n    // Only overwrite the mask available patterns if a pattern has actually been passed in\n    if (patterns && patterns.currentValue) {\n      this._maskService.patterns = patterns.currentValue;\n    }\n    if (apm && apm.currentValue) {\n      this._maskService.apm = apm.currentValue;\n    }\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n      if (showMaskTyped.previousValue === false && showMaskTyped.currentValue === true && this._isFocused) {\n        requestAnimationFrame(() => {\n          this._maskService._elementRef?.nativeElement.click();\n        });\n      }\n    }\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n    if (leadZeroDateTime) {\n      this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n    }\n    if (leadZero) {\n      this._maskService.leadZero = leadZero.currentValue;\n    }\n    if (triggerOnMaskChange) {\n      this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n    }\n    if (inputTransformFn) {\n      this._maskService.inputTransformFn = inputTransformFn.currentValue;\n    }\n    if (outputTransformFn) {\n      this._maskService.outputTransformFn = outputTransformFn.currentValue;\n    }\n    if (keepCharacterPositions) {\n      this._maskService.keepCharacterPositions = keepCharacterPositions.currentValue;\n    }\n    this._applyMask();\n  }\n  // eslint-disable-next-line complexity\n  validate({\n    value\n  }) {\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskValue.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n      return null;\n    }\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n      if (this._maskValue.startsWith(\"percent\" /* MaskExpression.PERCENT */)) {\n        return null;\n      }\n      for (const key in this._maskService.patterns) {\n        if (this._maskService.patterns[key]?.optional) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt = this._maskValue.split(\"\" /* MaskExpression.EMPTY_STRING */).filter(i => i === key).join(\"\" /* MaskExpression.EMPTY_STRING */);\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n      if (this._maskValue.indexOf(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) === 1 && value.toString().length === this._maskValue.length + Number((this._maskValue.split(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)[1] ?? \"\" /* MaskExpression.EMPTY_STRING */).split(\"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */)[0]) - 4) {\n        return null;\n      } else if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) > 1 && value.toString().length < this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) || this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) > 1 && value.toString().length < this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) || this._maskValue.indexOf(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) === 1) {\n        return this._createValidationError(value);\n      }\n      if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) === -1 || this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) === -1) {\n        // eslint-disable-next-line no-param-reassign\n        value = typeof value === 'number' ? String(value) : value;\n        const array = this._maskValue.split('*');\n        const length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkDropSpecialCharAmount(this._maskValue) - counterOfOpt : this.prefix ? this._maskValue.length + this.prefix.length - counterOfOpt : this._maskValue.length - counterOfOpt;\n        if (array.length === 1) {\n          if (value.toString().length < length) {\n            return this._createValidationError(value);\n          }\n        }\n        if (array.length > 1) {\n          const lastIndexArray = array[array.length - 1];\n          if (lastIndexArray && this._maskService.specialCharacters.includes(lastIndexArray[0]) && String(value).includes(lastIndexArray[0] ?? '') && !this.dropSpecialCharacters) {\n            const special = value.split(lastIndexArray[0]);\n            return special[special.length - 1].length === lastIndexArray.length - 1 ? null : this._createValidationError(value);\n          } else if ((lastIndexArray && !this._maskService.specialCharacters.includes(lastIndexArray[0]) || !lastIndexArray || this._maskService.dropSpecialCharacters) && value.length >= length - 1) {\n            return null;\n          } else {\n            return this._createValidationError(value);\n          }\n        }\n      }\n      if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) === 1 || this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) === 1) {\n        return null;\n      }\n    }\n    if (value) {\n      this.maskFilled.emit();\n      return null;\n    }\n    return null;\n  }\n  onPaste() {\n    this._justPasted = true;\n  }\n  onFocus() {\n    this._isFocused = true;\n  }\n  onModelChange(value) {\n    // on form reset we need to update the actualValue\n    if ((value === \"\" /* MaskExpression.EMPTY_STRING */ || value === null || value === undefined) && this._maskService.actualValue) {\n      this._maskService.actualValue = this._maskService.getActualValue(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n  }\n\n  onInput(e) {\n    // If IME is composing text, we wait for the composed text.\n    if (this._isComposing) return;\n    const el = e.target;\n    const transformedValue = this._maskService.inputTransformFn(el.value);\n    if (el.type !== 'number') {\n      if (typeof transformedValue === 'string' || typeof transformedValue === 'number') {\n        el.value = transformedValue.toString();\n        this._inputValue = el.value;\n        this._setMask();\n        if (!this._maskValue) {\n          this.onChange(el.value);\n          return;\n        }\n        let position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n        if (this.showMaskTyped && this.keepCharacterPositions && this._maskService.placeHolderCharacter.length === 1) {\n          const inputSymbol = el.value.slice(position - 1, position);\n          const prefixLength = this.prefix.length;\n          const checkSymbols = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position - 1 - prefixLength] ?? \"\" /* MaskExpression.EMPTY_STRING */);\n          const checkSpecialCharacter = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position + 1 - prefixLength] ?? \"\" /* MaskExpression.EMPTY_STRING */);\n          const selectRangeBackspace = this._maskService.selStart === this._maskService.selEnd;\n          const selStart = Number(this._maskService.selStart) - prefixLength ?? '';\n          const selEnd = Number(this._maskService.selEnd) - prefixLength ?? '';\n          if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\n            if (!selectRangeBackspace) {\n              if (this._maskService.selStart === prefixLength) {\n                this._maskService.actualValue = this.prefix + this._maskService.maskIsShown.slice(0, selEnd) + this._inputValue.split(this.prefix).join('');\n              } else if (this._maskService.selStart === this._maskService.maskIsShown.length + prefixLength) {\n                this._maskService.actualValue = this._inputValue + this._maskService.maskIsShown.slice(selStart, selEnd);\n              } else {\n                this._maskService.actualValue = this.prefix + this._inputValue.split(this.prefix).join('').slice(0, selStart) + this._maskService.maskIsShown.slice(selStart, selEnd) + this._maskService.actualValue.slice(selEnd + prefixLength, this._maskService.maskIsShown.length + prefixLength) + this.suffix;\n              }\n            } else if (!this._maskService.specialCharacters.includes(this._maskService.maskExpression.slice(position - this.prefix.length, position + 1 - this.prefix.length)) && selectRangeBackspace) {\n              if (selStart === 1 && this.prefix) {\n                this._maskService.actualValue = this.prefix + this._maskService.placeHolderCharacter + el.value.split(this.prefix).join('').split(this.suffix).join('') + this.suffix;\n                position = position - 1;\n              } else {\n                const part1 = el.value.substring(0, position);\n                const part2 = el.value.substring(position);\n                this._maskService.actualValue = part1 + this._maskService.placeHolderCharacter + part2;\n              }\n            }\n          }\n          if (this._code !== \"Backspace\" /* MaskExpression.BACKSPACE */) {\n            if (!checkSymbols && !checkSpecialCharacter && selectRangeBackspace) {\n              position = Number(el.selectionStart) - 1;\n            } else if (this._maskService.specialCharacters.includes(el.value.slice(position, position + 1)) && checkSpecialCharacter && !this._maskService.specialCharacters.includes(el.value.slice(position + 1, position + 2))) {\n              this._maskService.actualValue = el.value.slice(0, position - 1) + el.value.slice(position, position + 1) + inputSymbol + el.value.slice(position + 2);\n              position = position + 1;\n            } else if (checkSymbols) {\n              this._maskService.actualValue = el.value.slice(0, position - 1) + inputSymbol + el.value.slice(position + 1).split(this.suffix).join('') + this.suffix;\n            }\n          }\n        }\n        let caretShift = 0;\n        let backspaceShift = false;\n        if (this._code === \"Delete\" /* MaskExpression.DELETE */ && \"separator\" /* MaskExpression.SEPARATOR */) {\n          this._maskService.deletedSpecialCharacter = true;\n        }\n        if (this._inputValue.length >= this._maskService.maskExpression.length - 1 && this._code !== \"Backspace\" /* MaskExpression.BACKSPACE */ && this._maskService.maskExpression === \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */ && position < 10) {\n          const inputSymbol = this._inputValue.slice(position - 1, position);\n          el.value = this._inputValue.slice(0, position - 1) + inputSymbol + this._inputValue.slice(position + 1);\n        }\n        if (this._maskService.maskExpression === \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */ && this.leadZeroDateTime) {\n          if (position < 3 && Number(el.value) > 31 && Number(el.value) < 40 || position === 5 && Number(el.value.slice(3, 5)) > 12) {\n            position = position + 2;\n          }\n        }\n        if (this._maskService.maskExpression === \"Hh:m0:s0\" /* MaskExpression.HOURS_MINUTES_SECONDS */ && this.apm) {\n          if (this._justPasted && el.value.slice(0, 2) === \"00\" /* MaskExpression.DOUBLE_ZERO */) {\n            el.value = el.value.slice(1, 2) + el.value.slice(2, el.value.length);\n          }\n          el.value = el.value === \"00\" /* MaskExpression.DOUBLE_ZERO */ ? \"0\" /* MaskExpression.NUMBER_ZERO */ : el.value;\n        }\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ || this._code === \"Delete\" /* MaskExpression.DELETE */, (shift, _backspaceShift) => {\n          this._justPasted = false;\n          caretShift = shift;\n          backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this._getActiveElement() !== el) {\n          return;\n        }\n        // update position after applyValueChanges to prevent cursor on wrong position when it has an array of maskExpression\n        if (this._maskExpressionArray.length) {\n          if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\n            position = this.specialCharacters.includes(this._inputValue.slice(position - 1, position)) ? position - 1 : position;\n          } else {\n            position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n          }\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ && !backspaceShift ? 0 : caretShift);\n        if (positionToApply > this._getActualInputLength()) {\n          positionToApply = this._getActualInputLength();\n        }\n        if (positionToApply < 0) {\n          positionToApply = 0;\n        }\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n      } else {\n        console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof transformedValue);\n      }\n    } else {\n      this._maskService.applyValueChanges(el.value.length, this._justPasted, this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ || this._code === \"Delete\" /* MaskExpression.DELETE */);\n    }\n  }\n  // IME starts\n  onCompositionStart() {\n    this._isComposing = true;\n  }\n  // IME completes\n  onCompositionEnd(e) {\n    this._isComposing = false;\n    this._justPasted = true;\n    this.onInput(e);\n  }\n  onBlur(e) {\n    if (this._maskValue) {\n      const el = e.target;\n      if (this.leadZero && el.value.length > 0 && typeof this.decimalMarker === 'string') {\n        const maskExpression = this._maskService.maskExpression;\n        const precision = Number(this._maskService.maskExpression.slice(maskExpression.length - 1, maskExpression.length));\n        if (precision > 1) {\n          el.value = this.suffix ? el.value.split(this.suffix).join('') : el.value;\n          const decimalPart = el.value.split(this.decimalMarker)[1];\n          el.value = el.value.includes(this.decimalMarker) ? el.value + \"0\" /* MaskExpression.NUMBER_ZERO */.repeat(precision - decimalPart.length) + this.suffix : el.value + this.decimalMarker + \"0\" /* MaskExpression.NUMBER_ZERO */.repeat(precision) + this.suffix;\n          this._maskService.actualValue = el.value;\n        }\n      }\n      this._maskService.clearIfNotMatchFn();\n    }\n    this._isFocused = false;\n    this.onTouch();\n  }\n  onClick(e) {\n    if (!this._maskValue) {\n      return;\n    }\n    const el = e.target;\n    const posStart = 0;\n    const posEnd = 0;\n    if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length &&\n    // eslint-disable-next-line\n    e.keyCode !== 38) {\n      if (this._maskService.showMaskTyped && !this.keepCharacterPositions) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    }\n    const nextValue = el && (el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value);\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n    if (el && el.value !== nextValue) {\n      el.value = nextValue;\n    }\n    /** fix of cursor position with prefix when mouse click occur */\n    if (el && el.type !== 'number' && (el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n    /** select only inserted text */\n    if (el && el.selectionEnd > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  }\n  // eslint-disable-next-line complexity\n  onKeyDown(e) {\n    if (!this._maskValue) {\n      return;\n    }\n    if (this._isComposing) {\n      // User finalize their choice from IME composition, so trigger onInput() for the composed text.\n      if (e.key === 'Enter') this.onCompositionEnd(e);\n      return;\n    }\n    this._code = e.code ? e.code : e.key;\n    const el = e.target;\n    this._inputValue = el.value;\n    this._setMask();\n    if (el.type !== 'number') {\n      if (e.key === \"ArrowUp\" /* MaskExpression.ARROW_UP */) {\n        e.preventDefault();\n      }\n      if (e.key === \"ArrowLeft\" /* MaskExpression.ARROW_LEFT */ || e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ || e.key === \"Delete\" /* MaskExpression.DELETE */) {\n        if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && el.value.length === 0) {\n          el.selectionStart = el.selectionEnd;\n        }\n        if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && el.selectionStart !== 0) {\n          // If specialChars is false, (shouldn't ever happen) then set to the defaults\n          this.specialCharacters = this.specialCharacters?.length ? this.specialCharacters : this._config.specialCharacters;\n          if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n            el.setSelectionRange(this.prefix.length, el.selectionEnd);\n          } else {\n            if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n              while (this.specialCharacters.includes((this._inputValue[el.selectionStart - 1] ?? \"\" /* MaskExpression.EMPTY_STRING */).toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n                el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n              }\n            }\n          }\n        }\n        this.checkSelectionOnDeletion(el);\n        if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n          e.preventDefault();\n        }\n        const cursorStart = el.selectionStart;\n        if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n          this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n          this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n        }\n      }\n      if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      } else if (e.code === 'KeyA' && e.ctrlKey || e.code === 'KeyA' && e.metaKey // Cmd + A (Mac)\n      ) {\n        el.setSelectionRange(0, this._getActualInputLength());\n        e.preventDefault();\n      }\n      this._maskService.selStart = el.selectionStart;\n      this._maskService.selEnd = el.selectionEnd;\n    }\n  }\n  /** It writes the value in the input */\n  writeValue(controlValue) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (typeof controlValue === 'object' && controlValue !== null && 'value' in controlValue) {\n        if ('disable' in controlValue) {\n          _this.setDisabledState(Boolean(controlValue.disable));\n        }\n        // eslint-disable-next-line no-param-reassign\n        controlValue = controlValue.value;\n      }\n      if (controlValue !== null) {\n        // eslint-disable-next-line no-param-reassign\n        controlValue = _this.inputTransformFn ? _this.inputTransformFn(controlValue) : controlValue;\n      }\n      if (typeof controlValue === 'string' || typeof controlValue === 'number' || controlValue === null || controlValue === undefined) {\n        if (controlValue === null || controlValue === undefined) {\n          _this._maskService._currentValue = '';\n          _this._maskService._previousValue = '';\n        }\n        // eslint-disable-next-line no-param-reassign\n        let inputValue = controlValue;\n        if (typeof inputValue === 'number' || _this._maskValue.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = String(inputValue);\n          const localeDecimalMarker = _this._maskService.currentLocaleDecimalMarker();\n          if (!Array.isArray(_this._maskService.decimalMarker)) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = _this._maskService.decimalMarker !== localeDecimalMarker ? inputValue.replace(localeDecimalMarker, _this._maskService.decimalMarker) : inputValue;\n          }\n          if (_this._maskService.leadZero && inputValue && _this.maskExpression && _this.dropSpecialCharacters !== false) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = _this._maskService._checkPrecision(_this._maskService.maskExpression, inputValue);\n          }\n          if (_this._maskService.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.toString().replace(\".\" /* MaskExpression.DOT */, \",\" /* MaskExpression.COMMA */);\n          }\n\n          if (_this.maskExpression?.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && _this.leadZero) {\n            requestAnimationFrame(() => {\n              _this._maskService.applyMask(inputValue?.toString() ?? '', _this._maskService.maskExpression);\n            });\n          }\n          _this._maskService.isNumberValue = true;\n        }\n        if (typeof inputValue !== 'string') {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = '';\n        }\n        _this._inputValue = inputValue;\n        _this._setMask();\n        if (inputValue && _this._maskService.maskExpression || _this._maskService.maskExpression && (_this._maskService.prefix || _this._maskService.showMaskTyped)) {\n          // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n          typeof _this.inputTransformFn !== 'function' ? _this._maskService.writingValue = true : '';\n          _this._maskService.formElementProperty = ['value', _this._maskService.applyMask(inputValue, _this._maskService.maskExpression)];\n          // Let the service know we've finished writing value\n          typeof _this.inputTransformFn !== 'function' ? _this._maskService.writingValue = false : '';\n        } else {\n          _this._maskService.formElementProperty = ['value', inputValue];\n        }\n        _this._inputValue = inputValue;\n      } else {\n        console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof controlValue);\n      }\n    })();\n  }\n  registerOnChange(fn) {\n    this._maskService.onChange = this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n  }\n  _getActiveElement(document = this.document) {\n    const shadowRootEl = document?.activeElement?.shadowRoot;\n    if (!shadowRootEl?.activeElement) {\n      return document.activeElement;\n    } else {\n      return this._getActiveElement(shadowRootEl);\n    }\n  }\n  checkSelectionOnDeletion(el) {\n    el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n    el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n  }\n  /** It disables the input element */\n  setDisabledState(isDisabled) {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _applyMask() {\n    this._maskService.maskExpression = this._maskService._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n  }\n  _validateTime(value) {\n    const rowMaskLen = this._maskValue.split(\"\" /* MaskExpression.EMPTY_STRING */).filter(s => s !== ':').length;\n    if (!value) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n\n    if (+(value[value.length - 1] ?? -1) === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n    return null;\n  }\n  _getActualInputLength() {\n    return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n  }\n  _createValidationError(actualValue) {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue\n      }\n    };\n  }\n  _setMask() {\n    this._maskExpressionArray.some(mask => {\n      const specialChart = mask.split(\"\" /* MaskExpression.EMPTY_STRING */).some(char => this._maskService.specialCharacters.includes(char));\n      if (specialChart && this._inputValue && !mask.includes(\"S\" /* MaskExpression.LETTER_S */) || mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)) {\n        const test = this._maskService.removeMask(this._inputValue)?.length <= this._maskService.removeMask(mask)?.length;\n        if (test) {\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) ? this._maskService._repeatPatternSymbols(mask) : mask;\n          return test;\n        } else {\n          const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = expression.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) ? this._maskService._repeatPatternSymbols(expression) : expression;\n        }\n      } else {\n        const check = this._inputValue?.split(\"\" /* MaskExpression.EMPTY_STRING */).every((character, index) => {\n          const indexMask = mask.charAt(index);\n          return this._maskService._checkSymbolMask(character, indexMask);\n        });\n        if (check) {\n          this._maskValue = this.maskExpression = this._maskService.maskExpression = mask;\n          return check;\n        }\n      }\n    });\n  }\n  static #_ = this.ɵfac = function NgxMaskDirective_Factory(t) {\n    return new (t || NgxMaskDirective)();\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxMaskDirective,\n    selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n    hostBindings: function NgxMaskDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"paste\", function NgxMaskDirective_paste_HostBindingHandler() {\n          return ctx.onPaste();\n        })(\"focus\", function NgxMaskDirective_focus_HostBindingHandler($event) {\n          return ctx.onFocus($event);\n        })(\"ngModelChange\", function NgxMaskDirective_ngModelChange_HostBindingHandler($event) {\n          return ctx.onModelChange($event);\n        })(\"input\", function NgxMaskDirective_input_HostBindingHandler($event) {\n          return ctx.onInput($event);\n        })(\"compositionstart\", function NgxMaskDirective_compositionstart_HostBindingHandler($event) {\n          return ctx.onCompositionStart($event);\n        })(\"compositionend\", function NgxMaskDirective_compositionend_HostBindingHandler($event) {\n          return ctx.onCompositionEnd($event);\n        })(\"blur\", function NgxMaskDirective_blur_HostBindingHandler($event) {\n          return ctx.onBlur($event);\n        })(\"click\", function NgxMaskDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"keydown\", function NgxMaskDirective_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n    },\n    inputs: {\n      maskExpression: [\"mask\", \"maskExpression\"],\n      specialCharacters: \"specialCharacters\",\n      patterns: \"patterns\",\n      prefix: \"prefix\",\n      suffix: \"suffix\",\n      thousandSeparator: \"thousandSeparator\",\n      decimalMarker: \"decimalMarker\",\n      dropSpecialCharacters: \"dropSpecialCharacters\",\n      hiddenInput: \"hiddenInput\",\n      showMaskTyped: \"showMaskTyped\",\n      placeHolderCharacter: \"placeHolderCharacter\",\n      shownMaskExpression: \"shownMaskExpression\",\n      showTemplate: \"showTemplate\",\n      clearIfNotMatch: \"clearIfNotMatch\",\n      validation: \"validation\",\n      separatorLimit: \"separatorLimit\",\n      allowNegativeNumbers: \"allowNegativeNumbers\",\n      leadZeroDateTime: \"leadZeroDateTime\",\n      leadZero: \"leadZero\",\n      triggerOnMaskChange: \"triggerOnMaskChange\",\n      apm: \"apm\",\n      inputTransformFn: \"inputTransformFn\",\n      outputTransformFn: \"outputTransformFn\",\n      keepCharacterPositions: \"keepCharacterPositions\"\n    },\n    outputs: {\n      maskFilled: \"maskFilled\"\n    },\n    exportAs: [\"mask\", \"ngxMask\"],\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: NgxMaskDirective,\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: NgxMaskDirective,\n      multi: true\n    }, NgxMaskService]), i0.ɵɵNgOnChangesFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[mask], textarea[mask]',\n      standalone: true,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NgxMaskDirective,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: NgxMaskDirective,\n        multi: true\n      }, NgxMaskService],\n      exportAs: 'mask,ngxMask'\n    }]\n  }], null, {\n    maskExpression: [{\n      type: Input,\n      args: ['mask']\n    }],\n    specialCharacters: [{\n      type: Input\n    }],\n    patterns: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    decimalMarker: [{\n      type: Input\n    }],\n    dropSpecialCharacters: [{\n      type: Input\n    }],\n    hiddenInput: [{\n      type: Input\n    }],\n    showMaskTyped: [{\n      type: Input\n    }],\n    placeHolderCharacter: [{\n      type: Input\n    }],\n    shownMaskExpression: [{\n      type: Input\n    }],\n    showTemplate: [{\n      type: Input\n    }],\n    clearIfNotMatch: [{\n      type: Input\n    }],\n    validation: [{\n      type: Input\n    }],\n    separatorLimit: [{\n      type: Input\n    }],\n    allowNegativeNumbers: [{\n      type: Input\n    }],\n    leadZeroDateTime: [{\n      type: Input\n    }],\n    leadZero: [{\n      type: Input\n    }],\n    triggerOnMaskChange: [{\n      type: Input\n    }],\n    apm: [{\n      type: Input\n    }],\n    inputTransformFn: [{\n      type: Input\n    }],\n    outputTransformFn: [{\n      type: Input\n    }],\n    keepCharacterPositions: [{\n      type: Input\n    }],\n    maskFilled: [{\n      type: Output\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['focus', ['$event']]\n    }],\n    onModelChange: [{\n      type: HostListener,\n      args: ['ngModelChange', ['$event']]\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    onCompositionStart: [{\n      type: HostListener,\n      args: ['compositionstart', ['$event']]\n    }],\n    onCompositionEnd: [{\n      type: HostListener,\n      args: ['compositionend', ['$event']]\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur', ['$event']]\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\nclass NgxMaskPipe {\n  constructor() {\n    this.defaultOptions = {};\n    this._maskService = inject(NgxMaskService);\n    this._maskExpressionArray = [];\n    this.mask = '';\n  }\n  transform(value, mask, {\n    patterns,\n    ...config\n  } = {}) {\n    const currentConfig = {\n      maskExpression: mask,\n      ...this.defaultOptions,\n      ...config,\n      patterns: {\n        ...this._maskService.patterns,\n        ...patterns\n      }\n    };\n    Object.entries(currentConfig).forEach(([key, value]) => {\n      //eslint-disable-next-line  @typescript-eslint/no-explicit-any\n      this._maskService[key] = value;\n    });\n    if (mask.includes('||')) {\n      if (mask.split('||').length > 1) {\n        this._maskExpressionArray = mask.split('||').sort((a, b) => {\n          return a.length - b.length;\n        });\n        this._setMask(value);\n        return this._maskService.applyMask(`${value}`, this.mask);\n      } else {\n        this._maskExpressionArray = [];\n        return this._maskService.applyMask(`${value}`, this.mask);\n      }\n    }\n    if (mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)) {\n      return this._maskService.applyMask(`${value}`, this._maskService._repeatPatternSymbols(mask));\n    }\n    if (mask.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n      if (config.decimalMarker) {\n        this._maskService.decimalMarker = config.decimalMarker;\n      }\n      if (config.thousandSeparator) {\n        this._maskService.thousandSeparator = config.thousandSeparator;\n      }\n      if (config.leadZero) {\n        // eslint-disable-next-line no-param-reassign\n        this._maskService.leadZero = config.leadZero;\n      }\n      // eslint-disable-next-line no-param-reassign\n      value = String(value);\n      const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n      if (!Array.isArray(this._maskService.decimalMarker)) {\n        // eslint-disable-next-line no-param-reassign\n        value = this._maskService.decimalMarker !== localeDecimalMarker ? value.replace(localeDecimalMarker, this._maskService.decimalMarker) : value;\n      }\n      if (this._maskService.leadZero && value && this._maskService.dropSpecialCharacters !== false) {\n        // eslint-disable-next-line no-param-reassign\n        value = this._maskService._checkPrecision(mask, value);\n      }\n      if (this._maskService.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n        // eslint-disable-next-line no-param-reassign\n        value = value.toString().replace(\".\" /* MaskExpression.DOT */, \",\" /* MaskExpression.COMMA */);\n      }\n\n      this._maskService.isNumberValue = true;\n    }\n    if (value === null || value === undefined) {\n      return this._maskService.applyMask('', mask);\n    }\n    return this._maskService.applyMask(`${value}`, mask);\n  }\n  _setMask(value) {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some(mask => {\n        const test = this._maskService.removeMask(value)?.length <= this._maskService.removeMask(mask)?.length;\n        if (value && test) {\n          this.mask = mask;\n          return test;\n        } else {\n          const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n          this.mask = expression;\n        }\n      });\n    }\n  }\n  static #_ = this.ɵfac = function NgxMaskPipe_Factory(t) {\n    return new (t || NgxMaskPipe)();\n  };\n  static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"mask\",\n    type: NgxMaskPipe,\n    pure: true,\n    standalone: true\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mask',\n      pure: true,\n      standalone: true\n    }]\n  }], null, null);\n})();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskDirective, NgxMaskPipe, NgxMaskService, initialConfig, provideEnvironmentNgxMask, provideNgxMask, timeMasks, withoutValidation };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","inject","Injectable","ElementRef","Renderer2","makeEnvironmentProviders","Directive","Input","Output","HostListener","Pipe","DOCUMENT","NG_VALUE_ACCESSOR","NG_VALIDATORS","NGX_MASK_CONFIG","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","apm","leadZero","keepCharacterPositions","triggerOnMaskChange","inputTransformFn","value","outputTransformFn","maskFilled","patterns","pattern","RegExp","optional","X","symbol","A","S","U","L","d","m","M","H","h","s","timeMasks","withoutValidation","NgxMaskApplierService","constructor","_config","_shift","Set","maskExpression","actualValue","showKeepCharacterExp","deletedSpecialCharacter","_formatWithSeparators","str","thousandSeparatorChar","decimalChars","precision","x","decimalChar","Array","isArray","regExp","map","v","indexOf","join","split","match","decimals","length","res","replace","slice","rgx","test","substring","percentage","sanitizedStr","Number","isNaN","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","i","substr","includes","checkInputPrecision","marker","find","dm","precisionRegEx","_charToRegExpExpression","precisionMatch","precisionMatchLength","diff","_compareOrIncludes","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","valuesIP","ipError","_validIP","arr","push","cpfCnpjError","startsWith","_stripToDecimal","base","_splitPercentZero","thousandSeparatorCharEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","symbolStarInPattern","_checkSymbolMask","_shiftStep","daysCount","inputValueCursor","inputValueCursorPlusOne","inputValueCursorPlusTwo","inputValueCursorMinusOne","inputValueCursorMinusTwo","inputValueCursorMinusThree","inputValueSliceMinusThreeMinusOne","inputValueSliceMinusOnePlusOne","inputValueSliceCursorPlusTwo","inputValueSliceMinusTwoCursor","maskStartWithMonth","startWithMonthInput","monthsCount","withoutDays","specialChart","day1monthInput","day2monthInput","day2monthInputDot","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","_findDropSpecialChar","val","maskSymbol","filter","idx","isDecimalMarker","charsToEscape","inputLength","comparedValue","excludedValue","some","index","decimalIndex","parsedValue","parseInt","integerPart","decimalPart","integerString","decimal","_","ɵfac","NgxMaskApplierService_Factory","t","_2","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","NgxMaskService","arguments","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","_maskExpressionArray","_previousValue","_currentValue","_emitValue","onChange","_elementRef","document","_renderer","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","removeMask","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","regex","exec","applyValueChanges","formElement","nativeElement","_getActiveElement","clearIfNotMatchFn","curr","compare","maskChar","symbolToReplace","currSymbol","replaceSymbol","numberToString","String","toLocaleString","useGrouping","maximumFractionDigits","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","checkDropSpecialCharAmount","chars","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","shadowRootEl","activeElement","shadowRoot","_toNumber","_checkSymbols","num","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","_checkPatternForSpace","_replaceDecimalMarkerToDot","markers","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","key","hasOwnProperty","patternString","maskExpretion","matcher","separatorExpression","toFixed","_repeatPatternSymbols","maskExp","reduce","accum","currVal","_start","_end","repeatNumber","replaceWith","symbols","currentLocaleDecimalMarker","ɵNgxMaskService_BaseFactory","NgxMaskService_Factory","ɵɵgetInheritedFactory","_configFactory","initConfig","configValue","Function","provideNgxMask","provide","useValue","useFactory","provideEnvironmentNgxMask","NgxMaskDirective","_maskValue","_position","_justPasted","_isFocused","_isComposing","_maskService","self","onTouch","ngOnChanges","changes","currentValue","previousValue","firstChange","sort","a","b","_setMask","c","requestAnimationFrame","click","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","lastIndexOf","opt","array","lastIndexArray","special","emit","onPaste","onFocus","onModelChange","onInput","e","el","target","transformedValue","_inputValue","selectionStart","prefixLength","checkSymbols","checkSpecialCharacter","selectRangeBackspace","_code","part1","part2","caretShift","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","console","warn","onCompositionStart","onCompositionEnd","onBlur","repeat","onClick","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","checkSelectionOnDeletion","cursorStart","readOnly","ctrlKey","metaKey","writeValue","controlValue","_this","_asyncToGenerator","setDisabledState","disable","localeDecimalMarker","registerOnChange","fn","registerOnTouched","Math","min","max","isDisabled","rowMaskLen","requiredMask","expression","check","character","indexMask","charAt","NgxMaskDirective_Factory","ɵdir","ɵɵdefineDirective","selectors","hostBindings","NgxMaskDirective_HostBindings","rf","ctx","ɵɵlistener","NgxMaskDirective_paste_HostBindingHandler","NgxMaskDirective_focus_HostBindingHandler","$event","NgxMaskDirective_ngModelChange_HostBindingHandler","NgxMaskDirective_input_HostBindingHandler","NgxMaskDirective_compositionstart_HostBindingHandler","NgxMaskDirective_compositionend_HostBindingHandler","NgxMaskDirective_blur_HostBindingHandler","NgxMaskDirective_click_HostBindingHandler","NgxMaskDirective_keydown_HostBindingHandler","inputs","outputs","exportAs","standalone","features","ɵɵProvidersFeature","useExisting","ɵɵNgOnChangesFeature","args","selector","providers","NgxMaskPipe","defaultOptions","transform","config","currentConfig","Object","entries","forEach","NgxMaskPipe_Factory","ɵpipe","ɵɵdefinePipe","pure"],"sources":["C:/Users/lucas/OneDrive/Documentos/GitHub/CBLXToolPFP/frontend/node_modules/ngx-mask/fesm2022/ngx-mask.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\r\nimport { InjectionToken, EventEmitter, inject, Injectable, ElementRef, Renderer2, makeEnvironmentProviders, Directive, Input, Output, HostListener, Pipe } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\r\n\r\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\r\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\r\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\r\nconst initialConfig = {\r\n    suffix: '',\r\n    prefix: '',\r\n    thousandSeparator: ' ',\r\n    decimalMarker: ['.', ','],\r\n    clearIfNotMatch: false,\r\n    showTemplate: false,\r\n    showMaskTyped: false,\r\n    placeHolderCharacter: '_',\r\n    dropSpecialCharacters: true,\r\n    hiddenInput: undefined,\r\n    shownMaskExpression: '',\r\n    separatorLimit: '',\r\n    allowNegativeNumbers: false,\r\n    validation: true,\r\n    // eslint-disable-next-line @typescript-eslint/quotes\r\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\r\n    leadZeroDateTime: false,\r\n    apm: false,\r\n    leadZero: false,\r\n    keepCharacterPositions: false,\r\n    triggerOnMaskChange: false,\r\n    inputTransformFn: (value) => value,\r\n    outputTransformFn: (value) => value,\r\n    maskFilled: new EventEmitter(),\r\n    patterns: {\r\n        '0': {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        '9': {\r\n            pattern: new RegExp('\\\\d'),\r\n            optional: true,\r\n        },\r\n        X: {\r\n            pattern: new RegExp('\\\\d'),\r\n            symbol: '*',\r\n        },\r\n        A: {\r\n            pattern: new RegExp('[a-zA-Z0-9]'),\r\n        },\r\n        S: {\r\n            pattern: new RegExp('[a-zA-Z]'),\r\n        },\r\n        U: {\r\n            pattern: new RegExp('[A-Z]'),\r\n        },\r\n        L: {\r\n            pattern: new RegExp('[a-z]'),\r\n        },\r\n        d: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        m: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        M: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        H: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        h: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n        s: {\r\n            pattern: new RegExp('\\\\d'),\r\n        },\r\n    },\r\n};\r\nconst timeMasks = [\r\n    \"Hh:m0:s0\" /* MaskExpression.HOURS_MINUTES_SECONDS */,\r\n    \"Hh:m0\" /* MaskExpression.HOURS_MINUTES */,\r\n    \"m0:s0\" /* MaskExpression.MINUTES_SECONDS */,\r\n];\r\nconst withoutValidation = [\r\n    \"percent\" /* MaskExpression.PERCENT */,\r\n    \"Hh\" /* MaskExpression.HOURS_HOUR */,\r\n    \"s0\" /* MaskExpression.SECONDS */,\r\n    \"m0\" /* MaskExpression.MINUTES */,\r\n    \"separator\" /* MaskExpression.SEPARATOR */,\r\n    \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */,\r\n    \"d0/M0\" /* MaskExpression.DAYS_MONTHS */,\r\n    \"d0\" /* MaskExpression.DAYS */,\r\n    \"M0\" /* MaskExpression.MONTHS */,\r\n];\r\n\r\nclass NgxMaskApplierService {\r\n    constructor() {\r\n        this._config = inject(NGX_MASK_CONFIG);\r\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\r\n        this.hiddenInput = this._config.hiddenInput;\r\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\r\n        this.specialCharacters = this._config.specialCharacters;\r\n        this.patterns = this._config.patterns;\r\n        this.prefix = this._config.prefix;\r\n        this.suffix = this._config.suffix;\r\n        this.thousandSeparator = this._config.thousandSeparator;\r\n        this.decimalMarker = this._config.decimalMarker;\r\n        this.showMaskTyped = this._config.showMaskTyped;\r\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\r\n        this.validation = this._config.validation;\r\n        this.separatorLimit = this._config.separatorLimit;\r\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\r\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\r\n        this.leadZero = this._config.leadZero;\r\n        this.apm = this._config.apm;\r\n        this.inputTransformFn = this._config.inputTransformFn;\r\n        this.outputTransformFn = this._config.outputTransformFn;\r\n        this.keepCharacterPositions = this._config.keepCharacterPositions;\r\n        this._shift = new Set();\r\n        this.maskExpression = '';\r\n        this.actualValue = '';\r\n        this.showKeepCharacterExp = '';\r\n        this.shownMaskExpression = '';\r\n        this.deletedSpecialCharacter = false;\r\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\r\n            let x = [];\r\n            let decimalChar = '';\r\n            if (Array.isArray(decimalChars)) {\r\n                const regExp = new RegExp(decimalChars.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|'));\r\n                x = str.split(regExp);\r\n                decimalChar = str.match(regExp)?.[0] ?? \"\" /* MaskExpression.EMPTY_STRING */;\r\n            }\r\n            else {\r\n                x = str.split(decimalChars);\r\n                decimalChar = decimalChars;\r\n            }\r\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : \"\" /* MaskExpression.EMPTY_STRING */;\r\n            let res = x[0] ?? \"\" /* MaskExpression.EMPTY_STRING */;\r\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, \"\" /* MaskExpression.EMPTY_STRING */);\r\n            if (separatorLimit && +separatorLimit) {\r\n                if (res[0] === \"-\" /* MaskExpression.MINUS */) {\r\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\r\n                }\r\n                else {\r\n                    res = res.slice(0, separatorLimit.length);\r\n                }\r\n            }\r\n            const rgx = /(\\d+)(\\d{3})/;\r\n            while (thousandSeparatorChar && rgx.test(res)) {\r\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\r\n            }\r\n            if (precision === undefined) {\r\n                return res + decimals;\r\n            }\r\n            else if (precision === 0) {\r\n                return res;\r\n            }\r\n            return res + decimals.substring(0, precision + 1);\r\n        };\r\n        this.percentage = (str) => {\r\n            const sanitizedStr = str.replace(',', '.');\r\n            const value = Number(sanitizedStr);\r\n            return !isNaN(value) && value >= 0 && value <= 100;\r\n        };\r\n        this.getPrecision = (maskExpression) => {\r\n            const x = maskExpression.split(\".\" /* MaskExpression.DOT */);\r\n            if (x.length > 1) {\r\n                return Number(x[x.length - 1]);\r\n            }\r\n            return Infinity;\r\n        };\r\n        this.checkAndRemoveSuffix = (inputValue) => {\r\n            for (let i = this.suffix?.length - 1; i >= 0; i--) {\r\n                const substr = this.suffix.substring(i, this.suffix?.length);\r\n                if (inputValue.includes(substr) &&\r\n                    i !== this.suffix?.length - 1 &&\r\n                    (i - 1 < 0 ||\r\n                        !inputValue.includes(this.suffix.substring(i - 1, this.suffix?.length)))) {\r\n                    return inputValue.replace(substr, \"\" /* MaskExpression.EMPTY_STRING */);\r\n                }\r\n            }\r\n            return inputValue;\r\n        };\r\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\r\n            if (precision < Infinity) {\r\n                // TODO need think about decimalMarker\r\n                if (Array.isArray(decimalMarker)) {\r\n                    const marker = decimalMarker.find((dm) => dm !== this.thousandSeparator);\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    decimalMarker = marker ? marker : decimalMarker[0];\r\n                }\r\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\r\n                const precisionMatch = inputValue.match(precisionRegEx);\r\n                const precisionMatchLength = (precisionMatch && precisionMatch[0]?.length) ?? 0;\r\n                if (precisionMatchLength - 1 > precision) {\r\n                    const diff = precisionMatchLength - 1 - precision;\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\r\n                }\r\n                if (precision === 0 &&\r\n                    this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\r\n                }\r\n            }\r\n            return inputValue;\r\n        };\r\n    }\r\n    applyMaskWithPattern(inputValue, maskAndPattern) {\r\n        const [mask, customPattern] = maskAndPattern;\r\n        this.customPattern = customPattern;\r\n        return this.applyMask(inputValue, mask);\r\n    }\r\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\r\n    cb = () => { }) {\r\n        if (!maskExpression || typeof inputValue !== 'string') {\r\n            return \"\" /* MaskExpression.EMPTY_STRING */;\r\n        }\r\n        let cursor = 0;\r\n        let result = '';\r\n        let multi = false;\r\n        let backspaceShift = false;\r\n        let shift = 1;\r\n        let stepBack = false;\r\n        if (inputValue.slice(0, this.prefix.length) === this.prefix && !this.showMaskTyped) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\r\n        }\r\n        if (!!this.suffix && inputValue?.length > 0) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            inputValue = this.checkAndRemoveSuffix(inputValue);\r\n        }\r\n        if (inputValue === '(' && this.prefix) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            inputValue = '';\r\n        }\r\n        const inputArray = inputValue.toString().split(\"\" /* MaskExpression.EMPTY_STRING */);\r\n        if (this.allowNegativeNumbers &&\r\n            inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            result += inputValue.slice(cursor, cursor + 1);\r\n        }\r\n        if (maskExpression === \"IP\" /* MaskExpression.IP */) {\r\n            const valuesIP = inputValue.split(\".\" /* MaskExpression.DOT */);\r\n            this.ipError = this._validIP(valuesIP);\r\n            // eslint-disable-next-line no-param-reassign\r\n            maskExpression = '099.099.099.099';\r\n        }\r\n        const arr = [];\r\n        for (let i = 0; i < inputValue.length; i++) {\r\n            if (inputValue[i]?.match('\\\\d')) {\r\n                arr.push(inputValue[i] ?? \"\" /* MaskExpression.EMPTY_STRING */);\r\n            }\r\n        }\r\n        if (maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\r\n            this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\r\n            if (arr.length > 11) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                maskExpression = '00.000.000/0000-00';\r\n            }\r\n            else {\r\n                // eslint-disable-next-line no-param-reassign\r\n                maskExpression = '000.000.000-00';\r\n            }\r\n        }\r\n        if (maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */)) {\r\n            if (inputValue.match('[a-z]|[A-Z]') ||\r\n                // eslint-disable-next-line no-useless-escape\r\n                (inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/) && !backspaced)) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                inputValue = this._stripToDecimal(inputValue);\r\n                const precision = this.getPrecision(maskExpression);\r\n                // eslint-disable-next-line no-param-reassign\r\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\r\n            }\r\n            const decimalMarker = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* MaskExpression.DOT */;\r\n            if (inputValue.indexOf(decimalMarker) > 0 &&\r\n                !this.percentage(inputValue.substring(0, inputValue.indexOf(decimalMarker)))) {\r\n                let base = inputValue.substring(0, inputValue.indexOf(decimalMarker) - 1);\r\n                if (this.allowNegativeNumbers &&\r\n                    inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */ &&\r\n                    !backspaced) {\r\n                    base = inputValue.substring(0, inputValue.indexOf(decimalMarker));\r\n                }\r\n                // eslint-disable-next-line no-param-reassign\r\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf(decimalMarker), inputValue.length)}`;\r\n            }\r\n            let value = '';\r\n            this.allowNegativeNumbers &&\r\n                inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */\r\n                ? (value = inputValue.slice(cursor + 1, cursor + inputValue.length))\r\n                : (value = inputValue);\r\n            if (this.percentage(value)) {\r\n                result = this._splitPercentZero(inputValue);\r\n            }\r\n            else {\r\n                result = this._splitPercentZero(inputValue.substring(0, inputValue.length - 1));\r\n            }\r\n        }\r\n        else if (maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\r\n            if (inputValue.match('[wа-яА-Я]') ||\r\n                inputValue.match('[ЁёА-я]') ||\r\n                inputValue.match('[a-z]|[A-Z]') ||\r\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) ||\r\n                inputValue.match('[^A-Za-z0-9,]')) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                inputValue = this._stripToDecimal(inputValue);\r\n            }\r\n            // eslint-disable-next-line no-param-reassign\r\n            inputValue =\r\n                inputValue[0] === '-' && this.allowNegativeNumbers\r\n                    ? inputValue.length > 2 &&\r\n                        inputValue[1] === '0' &&\r\n                        inputValue[2] !== this.thousandSeparator &&\r\n                        !this._compareOrIncludes(inputValue[2], this.decimalMarker, this.thousandSeparator) &&\r\n                        !backspaced\r\n                        ? inputValue.slice(0, inputValue.length - 1)\r\n                        : inputValue\r\n                    : inputValue.length > 1 &&\r\n                        inputValue[0] === '0' &&\r\n                        inputValue[1] !== this.thousandSeparator &&\r\n                        !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) &&\r\n                        !backspaced\r\n                        ? inputValue.slice(0, inputValue.length - 1)\r\n                        : inputValue;\r\n            if (backspaced) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator)\r\n                    ? inputValue.slice(0, inputValue.length - 1)\r\n                    : inputValue;\r\n            }\r\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\r\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\r\n            const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\r\n            let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\r\n            //.replace(decimalMarkerEscaped, '');\r\n            if (Array.isArray(this.decimalMarker)) {\r\n                for (const marker of this.decimalMarker) {\r\n                    invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), \"\" /* MaskExpression.EMPTY_STRING */);\r\n                }\r\n            }\r\n            else {\r\n                invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\r\n            }\r\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\r\n            if (inputValue.match(invalidCharRegexp) ||\r\n                (inputValue.length === 1 &&\r\n                    this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator))) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                inputValue = inputValue.substring(0, inputValue.length - 1);\r\n            }\r\n            const precision = this.getPrecision(maskExpression);\r\n            // eslint-disable-next-line no-param-reassign\r\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\r\n            const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\r\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\r\n            const commaShift = result.indexOf(\",\" /* MaskExpression.COMMA */) - inputValue.indexOf(\",\" /* MaskExpression.COMMA */);\r\n            const shiftStep = result.length - inputValue.length;\r\n            if (shiftStep > 0 && result[position] !== this.thousandSeparator) {\r\n                backspaceShift = true;\r\n                let _shift = 0;\r\n                do {\r\n                    this._shift.add(position + _shift);\r\n                    _shift++;\r\n                } while (_shift < shiftStep);\r\n            }\r\n            else if (result[position - 1] === this.decimalMarker ||\r\n                shiftStep === -4 ||\r\n                shiftStep === -3 ||\r\n                result[position] === \",\" /* MaskExpression.COMMA */) {\r\n                this._shift.clear();\r\n                this._shift.add(position - 1);\r\n            }\r\n            else if ((commaShift !== 0 &&\r\n                position > 0 &&\r\n                !(result.indexOf(\",\" /* MaskExpression.COMMA */) >= position && position > 3)) ||\r\n                (!(result.indexOf(\".\" /* MaskExpression.DOT */) >= position && position > 3) &&\r\n                    shiftStep <= 0)) {\r\n                this._shift.clear();\r\n                backspaceShift = true;\r\n                shift = shiftStep;\r\n                // eslint-disable-next-line no-param-reassign\r\n                position += shiftStep;\r\n                this._shift.add(position);\r\n            }\r\n            else {\r\n                this._shift.clear();\r\n            }\r\n        }\r\n        else {\r\n            for (\r\n            // eslint-disable-next-line\r\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i] ?? \"\" /* MaskExpression.EMPTY_STRING */) {\r\n                if (cursor === maskExpression.length) {\r\n                    break;\r\n                }\r\n                const symbolStarInPattern = \"*\" /* MaskExpression.SYMBOL_STAR */ in this.patterns;\r\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\r\n                    maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */) {\r\n                    result += inputSymbol;\r\n                    cursor += 2;\r\n                }\r\n                else if (maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ &&\r\n                    multi &&\r\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\r\n                    result += inputSymbol;\r\n                    cursor += 3;\r\n                    multi = false;\r\n                }\r\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\r\n                    maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ &&\r\n                    !symbolStarInPattern) {\r\n                    result += inputSymbol;\r\n                    multi = true;\r\n                }\r\n                else if (maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */ &&\r\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\r\n                    result += inputSymbol;\r\n                    cursor += 3;\r\n                }\r\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\r\n                    if (maskExpression[cursor] === \"H\" /* MaskExpression.HOURS */) {\r\n                        if (this.apm ? Number(inputSymbol) > 9 : Number(inputSymbol) > 2) {\r\n                            // eslint-disable-next-line no-param-reassign\r\n                            position = !this.leadZeroDateTime ? position + 1 : position;\r\n                            cursor += 1;\r\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\r\n                            i--;\r\n                            if (this.leadZeroDateTime) {\r\n                                result += '0';\r\n                            }\r\n                            continue;\r\n                        }\r\n                    }\r\n                    if (maskExpression[cursor] === \"h\" /* MaskExpression.HOUR */) {\r\n                        if (this.apm\r\n                            ? (result.length === 1 && Number(result) > 1) ||\r\n                                (result === '1' && Number(inputSymbol) > 2) ||\r\n                                (inputValue.slice(cursor - 1, cursor).length === 1 &&\r\n                                    Number(inputValue.slice(cursor - 1, cursor)) > 2) ||\r\n                                (inputValue.slice(cursor - 1, cursor) === '1' &&\r\n                                    Number(inputSymbol) > 2)\r\n                            : (result === '2' && Number(inputSymbol) > 3) ||\r\n                                ((result.slice(cursor - 2, cursor) === '2' ||\r\n                                    result.slice(cursor - 3, cursor) === '2' ||\r\n                                    result.slice(cursor - 4, cursor) === '2' ||\r\n                                    result.slice(cursor - 1, cursor) === '2') &&\r\n                                    Number(inputSymbol) > 3 &&\r\n                                    cursor > 10)) {\r\n                            // eslint-disable-next-line no-param-reassign\r\n                            position = position + 1;\r\n                            cursor += 1;\r\n                            i--;\r\n                            continue;\r\n                        }\r\n                    }\r\n                    if (maskExpression[cursor] === \"m\" /* MaskExpression.MINUTE */ ||\r\n                        maskExpression[cursor] === \"s\" /* MaskExpression.SECOND */) {\r\n                        if (Number(inputSymbol) > 5) {\r\n                            // eslint-disable-next-line no-param-reassign\r\n                            position = !this.leadZeroDateTime ? position + 1 : position;\r\n                            cursor += 1;\r\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\r\n                            i--;\r\n                            if (this.leadZeroDateTime) {\r\n                                result += '0';\r\n                            }\r\n                            continue;\r\n                        }\r\n                    }\r\n                    const daysCount = 31;\r\n                    const inputValueCursor = inputValue[cursor];\r\n                    const inputValueCursorPlusOne = inputValue[cursor + 1];\r\n                    const inputValueCursorPlusTwo = inputValue[cursor + 2];\r\n                    const inputValueCursorMinusOne = inputValue[cursor - 1];\r\n                    const inputValueCursorMinusTwo = inputValue[cursor - 2];\r\n                    const inputValueCursorMinusThree = inputValue[cursor - 3];\r\n                    const inputValueSliceMinusThreeMinusOne = inputValue.slice(cursor - 3, cursor - 1);\r\n                    const inputValueSliceMinusOnePlusOne = inputValue.slice(cursor - 1, cursor + 1);\r\n                    const inputValueSliceCursorPlusTwo = inputValue.slice(cursor, cursor + 2);\r\n                    const inputValueSliceMinusTwoCursor = inputValue.slice(cursor - 2, cursor);\r\n                    if (maskExpression[cursor] === \"d\" /* MaskExpression.DAY */) {\r\n                        const maskStartWithMonth = maskExpression.slice(0, 2) === \"M0\" /* MaskExpression.MONTHS */;\r\n                        const startWithMonthInput = maskExpression.slice(0, 2) === \"M0\" /* MaskExpression.MONTHS */ &&\r\n                            this.specialCharacters.includes(inputValueCursorMinusTwo);\r\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\r\n                            (!maskStartWithMonth &&\r\n                                (Number(inputValueSliceCursorPlusTwo) > daysCount ||\r\n                                    Number(inputValueSliceMinusOnePlusOne) > daysCount ||\r\n                                    this.specialCharacters.includes(inputValueCursorPlusOne))) ||\r\n                            (startWithMonthInput\r\n                                ? Number(inputValueSliceMinusOnePlusOne) > daysCount ||\r\n                                    (!this.specialCharacters.includes(inputValueCursor) &&\r\n                                        this.specialCharacters.includes(inputValueCursorPlusTwo)) ||\r\n                                    this.specialCharacters.includes(inputValueCursor)\r\n                                : Number(inputValueSliceCursorPlusTwo) > daysCount ||\r\n                                    this.specialCharacters.includes(inputValueCursorPlusOne))) {\r\n                            // eslint-disable-next-line no-param-reassign\r\n                            position = !this.leadZeroDateTime ? position + 1 : position;\r\n                            cursor += 1;\r\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\r\n                            i--;\r\n                            if (this.leadZeroDateTime) {\r\n                                result += '0';\r\n                            }\r\n                            continue;\r\n                        }\r\n                    }\r\n                    if (maskExpression[cursor] === \"M\" /* MaskExpression.MONTH */) {\r\n                        const monthsCount = 12;\r\n                        // mask without day\r\n                        const withoutDays = cursor === 0 &&\r\n                            (Number(inputSymbol) > 2 ||\r\n                                Number(inputValueSliceCursorPlusTwo) > monthsCount ||\r\n                                this.specialCharacters.includes(inputValueCursorPlusOne));\r\n                        // day<10 && month<12 for input\r\n                        const specialChart = maskExpression.slice(cursor + 2, cursor + 3);\r\n                        const day1monthInput = inputValueSliceMinusThreeMinusOne.includes(specialChart) &&\r\n                            ((this.specialCharacters.includes(inputValueCursorMinusTwo) &&\r\n                                Number(inputValueSliceMinusOnePlusOne) > monthsCount &&\r\n                                !this.specialCharacters.includes(inputValueCursor)) ||\r\n                                this.specialCharacters.includes(inputValueCursor) ||\r\n                                (this.specialCharacters.includes(inputValueCursorMinusThree) &&\r\n                                    Number(inputValueSliceMinusTwoCursor) > monthsCount &&\r\n                                    !this.specialCharacters.includes(inputValueCursorMinusOne)) ||\r\n                                this.specialCharacters.includes(inputValueCursorMinusOne));\r\n                        //  month<12 && day<10 for input\r\n                        const day2monthInput = Number(inputValueSliceMinusThreeMinusOne) <= daysCount &&\r\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\r\n                            this.specialCharacters.includes(inputValueCursorMinusOne) &&\r\n                            (Number(inputValueSliceCursorPlusTwo) > monthsCount ||\r\n                                this.specialCharacters.includes(inputValueCursorPlusOne));\r\n                        // cursor === 5 && without days\r\n                        const day2monthInputDot = (Number(inputValueSliceCursorPlusTwo) > monthsCount && cursor === 5) ||\r\n                            (this.specialCharacters.includes(inputValueCursorPlusOne) &&\r\n                                cursor === 5);\r\n                        // // day<10 && month<12 for paste whole data\r\n                        const day1monthPaste = Number(inputValueSliceMinusThreeMinusOne) > daysCount &&\r\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\r\n                            !this.specialCharacters.includes(inputValueSliceMinusTwoCursor) &&\r\n                            Number(inputValueSliceMinusTwoCursor) > monthsCount;\r\n                        // 10<day<31 && month<12 for paste whole data\r\n                        const day2monthPaste = Number(inputValueSliceMinusThreeMinusOne) <= daysCount &&\r\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\r\n                            !this.specialCharacters.includes(inputValueCursorMinusOne) &&\r\n                            Number(inputValueSliceMinusOnePlusOne) > monthsCount;\r\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\r\n                            withoutDays ||\r\n                            day1monthInput ||\r\n                            day2monthPaste ||\r\n                            day1monthPaste ||\r\n                            day2monthInput ||\r\n                            (day2monthInputDot && !this.leadZeroDateTime)) {\r\n                            // eslint-disable-next-line no-param-reassign\r\n                            position = !this.leadZeroDateTime ? position + 1 : position;\r\n                            cursor += 1;\r\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\r\n                            i--;\r\n                            if (this.leadZeroDateTime) {\r\n                                result += '0';\r\n                            }\r\n                            continue;\r\n                        }\r\n                    }\r\n                    result += inputSymbol;\r\n                    cursor++;\r\n                }\r\n                else if ((inputSymbol === \" \" /* MaskExpression.WHITE_SPACE */ &&\r\n                    maskExpression[cursor] === \" \" /* MaskExpression.WHITE_SPACE */) ||\r\n                    (inputSymbol === \"/\" /* MaskExpression.SLASH */ &&\r\n                        maskExpression[cursor] === \"/\" /* MaskExpression.SLASH */)) {\r\n                    result += inputSymbol;\r\n                    cursor++;\r\n                }\r\n                else if (this.specialCharacters.indexOf(maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1) {\r\n                    result += maskExpression[cursor];\r\n                    cursor++;\r\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\r\n                    i--;\r\n                }\r\n                else if (maskExpression[cursor] === \"9\" /* MaskExpression.NUMBER_NINE */ &&\r\n                    this.showMaskTyped) {\r\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\r\n                }\r\n                else if (this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */] &&\r\n                    this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.optional) {\r\n                    if (!!inputArray[cursor] &&\r\n                        maskExpression !== '099.099.099.099' &&\r\n                        maskExpression !== '000.000.000-00' &&\r\n                        maskExpression !== '00.000.000/0000-00' &&\r\n                        !maskExpression.match(/^9+\\.0+$/) &&\r\n                        !this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */]\r\n                            ?.optional) {\r\n                        result += inputArray[cursor];\r\n                    }\r\n                    if (maskExpression.includes(\"9\" /* MaskExpression.NUMBER_NINE */ + \"*\" /* MaskExpression.SYMBOL_STAR */) &&\r\n                        maskExpression.includes(\"0\" /* MaskExpression.NUMBER_ZERO */ + \"*\" /* MaskExpression.SYMBOL_STAR */)) {\r\n                        cursor++;\r\n                    }\r\n                    cursor++;\r\n                    i--;\r\n                }\r\n                else if (this.maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ &&\r\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\r\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\r\n                    multi) {\r\n                    cursor += 3;\r\n                    result += inputSymbol;\r\n                }\r\n                else if (this.maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */ &&\r\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\r\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\r\n                    multi) {\r\n                    cursor += 3;\r\n                    result += inputSymbol;\r\n                }\r\n                else if (this.showMaskTyped &&\r\n                    this.specialCharacters.indexOf(inputSymbol) < 0 &&\r\n                    inputSymbol !== this.placeHolderCharacter &&\r\n                    this.placeHolderCharacter.length === 1) {\r\n                    stepBack = true;\r\n                }\r\n            }\r\n        }\r\n        if (result.length + 1 === maskExpression.length &&\r\n            this.specialCharacters.indexOf(maskExpression[maskExpression.length - 1] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1) {\r\n            result += maskExpression[maskExpression.length - 1];\r\n        }\r\n        let newPosition = position + 1;\r\n        while (this._shift.has(newPosition)) {\r\n            shift++;\r\n            newPosition++;\r\n        }\r\n        let actualShift = justPasted && !maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)\r\n            ? cursor\r\n            : this._shift.has(position)\r\n                ? shift\r\n                : 0;\r\n        if (stepBack) {\r\n            actualShift--;\r\n        }\r\n        cb(actualShift, backspaceShift);\r\n        if (shift < 0) {\r\n            this._shift.clear();\r\n        }\r\n        let onlySpecial = false;\r\n        if (backspaced) {\r\n            onlySpecial = inputArray.every((char) => this.specialCharacters.includes(char));\r\n        }\r\n        let res = `${this.prefix}${onlySpecial ? \"\" /* MaskExpression.EMPTY_STRING */ : result}${this.suffix}`;\r\n        if (result.length === 0) {\r\n            res = !this.dropSpecialCharacters ? `${this.prefix}${result}` : `${result}`;\r\n        }\r\n        if (result.includes(\"-\" /* MaskExpression.MINUS */) && this.prefix && this.allowNegativeNumbers) {\r\n            if (backspaced && result === \"-\" /* MaskExpression.MINUS */) {\r\n                return '';\r\n            }\r\n            res = `${\"-\" /* MaskExpression.MINUS */}${this.prefix}${result\r\n                .split(\"-\" /* MaskExpression.MINUS */)\r\n                .join(\"\" /* MaskExpression.EMPTY_STRING */)}${this.suffix}`;\r\n        }\r\n        return res;\r\n    }\r\n    _findDropSpecialChar(inputSymbol) {\r\n        if (Array.isArray(this.dropSpecialCharacters)) {\r\n            return this.dropSpecialCharacters.find((val) => val === inputSymbol);\r\n        }\r\n        return this._findSpecialChar(inputSymbol);\r\n    }\r\n    _findSpecialChar(inputSymbol) {\r\n        return this.specialCharacters.find((val) => val === inputSymbol);\r\n    }\r\n    _checkSymbolMask(inputSymbol, maskSymbol) {\r\n        this.patterns = this.customPattern ? this.customPattern : this.patterns;\r\n        return ((this.patterns[maskSymbol]?.pattern &&\r\n            this.patterns[maskSymbol]?.pattern.test(inputSymbol)) ??\r\n            false);\r\n    }\r\n    _stripToDecimal(str) {\r\n        return str\r\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\r\n            .filter((i, idx) => {\r\n            const isDecimalMarker = typeof this.decimalMarker === 'string'\r\n                ? i === this.decimalMarker\r\n                : // TODO (inepipenko) use utility type\r\n                    this.decimalMarker.includes(i);\r\n            return (i.match('^-?\\\\d') ||\r\n                i === this.thousandSeparator ||\r\n                isDecimalMarker ||\r\n                (i === \"-\" /* MaskExpression.MINUS */ && idx === 0 && this.allowNegativeNumbers));\r\n        })\r\n            .join(\"\" /* MaskExpression.EMPTY_STRING */);\r\n    }\r\n    _charToRegExpExpression(char) {\r\n        // if (Array.isArray(char)) {\r\n        // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\r\n        // }\r\n        if (char) {\r\n            const charsToEscape = '[\\\\^$.|?*+()';\r\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\r\n        }\r\n        return char;\r\n    }\r\n    _shiftStep(maskExpression, cursor, inputLength) {\r\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\r\n            ? inputLength\r\n            : cursor;\r\n        this._shift.add(shiftStep + this.prefix.length || 0);\r\n    }\r\n    _compareOrIncludes(value, comparedValue, excludedValue) {\r\n        return Array.isArray(comparedValue)\r\n            ? comparedValue.filter((v) => v !== excludedValue).includes(value)\r\n            : value === comparedValue;\r\n    }\r\n    _validIP(valuesIP) {\r\n        return !(valuesIP.length === 4 &&\r\n            !valuesIP.some((value, index) => {\r\n                if (valuesIP.length !== index + 1) {\r\n                    return value === \"\" /* MaskExpression.EMPTY_STRING */ || Number(value) > 255;\r\n                }\r\n                return value === \"\" /* MaskExpression.EMPTY_STRING */ || Number(value.substring(0, 3)) > 255;\r\n            }));\r\n    }\r\n    _splitPercentZero(value) {\r\n        const decimalIndex = typeof this.decimalMarker === 'string'\r\n            ? value.indexOf(this.decimalMarker)\r\n            : value.indexOf(\".\" /* MaskExpression.DOT */);\r\n        if (decimalIndex === -1) {\r\n            const parsedValue = parseInt(value, 10);\r\n            return isNaN(parsedValue) ? \"\" /* MaskExpression.EMPTY_STRING */ : parsedValue.toString();\r\n        }\r\n        else {\r\n            const integerPart = parseInt(value.substring(0, decimalIndex), 10);\r\n            const decimalPart = value.substring(decimalIndex + 1);\r\n            const integerString = isNaN(integerPart) ? '' : integerPart.toString();\r\n            const decimal = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* MaskExpression.DOT */;\r\n            return integerString === \"\" /* MaskExpression.EMPTY_STRING */\r\n                ? \"\" /* MaskExpression.EMPTY_STRING */\r\n                : integerString + decimal + decimalPart;\r\n        }\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgxMaskApplierService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\r\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgxMaskApplierService }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgxMaskApplierService, decorators: [{\r\n            type: Injectable\r\n        }] });\r\n\r\nclass NgxMaskService extends NgxMaskApplierService {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.isNumberValue = false;\r\n        this.maskIsShown = '';\r\n        this.selStart = null;\r\n        this.selEnd = null;\r\n        /**\r\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\r\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\r\n         */\r\n        this.writingValue = false;\r\n        this.maskChanged = false;\r\n        this._maskExpressionArray = [];\r\n        this.triggerOnMaskChange = false;\r\n        this._previousValue = '';\r\n        this._currentValue = '';\r\n        this._emitValue = false;\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\r\n        this.onChange = (_) => { };\r\n        this._elementRef = inject(ElementRef, { optional: true });\r\n        this.document = inject(DOCUMENT);\r\n        this._config = inject(NGX_MASK_CONFIG);\r\n        this._renderer = inject(Renderer2, { optional: true });\r\n    }\r\n    // eslint-disable-next-line complexity\r\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\r\n    cb = () => { }) {\r\n        if (!maskExpression) {\r\n            return inputValue !== this.actualValue ? this.actualValue : inputValue;\r\n        }\r\n        this.maskIsShown = this.showMaskTyped\r\n            ? this.showMaskInInput()\r\n            : \"\" /* MaskExpression.EMPTY_STRING */;\r\n        if (this.maskExpression === \"IP\" /* MaskExpression.IP */ && this.showMaskTyped) {\r\n            this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* MaskExpression.HASH */);\r\n        }\r\n        if (this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */ && this.showMaskTyped) {\r\n            this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* MaskExpression.HASH */);\r\n        }\r\n        if (!inputValue && this.showMaskTyped) {\r\n            this.formControlResult(this.prefix);\r\n            return this.prefix + this.maskIsShown;\r\n        }\r\n        const getSymbol = !!inputValue && typeof this.selStart === 'number'\r\n            ? inputValue[this.selStart] ?? \"\" /* MaskExpression.EMPTY_STRING */\r\n            : \"\" /* MaskExpression.EMPTY_STRING */;\r\n        let newInputValue = '';\r\n        if (this.hiddenInput !== undefined && !this.writingValue) {\r\n            let actualResult = inputValue && inputValue.length === 1\r\n                ? inputValue.split(\"\" /* MaskExpression.EMPTY_STRING */)\r\n                : this.actualValue.split(\"\" /* MaskExpression.EMPTY_STRING */);\r\n            // eslint-disable  @typescript-eslint/no-unused-expressions\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\r\n            if (typeof this.selStart === 'object' && typeof this.selEnd === 'object') {\r\n                this.selStart = Number(this.selStart);\r\n                this.selEnd = Number(this.selEnd);\r\n            }\r\n            else {\r\n                inputValue !== \"\" /* MaskExpression.EMPTY_STRING */ && actualResult.length\r\n                    ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\r\n                        ? inputValue.length > actualResult.length\r\n                            ? actualResult.splice(this.selStart, 0, getSymbol)\r\n                            : inputValue.length < actualResult.length\r\n                                ? actualResult.length - inputValue.length === 1\r\n                                    ? backspaced\r\n                                        ? actualResult.splice(this.selStart - 1, 1)\r\n                                        : actualResult.splice(inputValue.length - 1, 1)\r\n                                    : actualResult.splice(this.selStart, this.selEnd - this.selStart)\r\n                                : null\r\n                        : null\r\n                    : (actualResult = []);\r\n            }\r\n            if (this.showMaskTyped) {\r\n                if (!this.hiddenInput) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    inputValue = this.removeMask(inputValue);\r\n                }\r\n            }\r\n            // eslint-enable  @typescript-eslint/no-unused-expressions\r\n            newInputValue =\r\n                this.actualValue.length && actualResult.length <= inputValue.length\r\n                    ? this.shiftTypedSymbols(actualResult.join(\"\" /* MaskExpression.EMPTY_STRING */))\r\n                    : inputValue;\r\n        }\r\n        if (justPasted && (this.hiddenInput || !this.hiddenInput)) {\r\n            newInputValue = inputValue;\r\n        }\r\n        if (backspaced &&\r\n            this.specialCharacters.indexOf(this.maskExpression[position] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1 &&\r\n            this.showMaskTyped) {\r\n            newInputValue = this._currentValue;\r\n        }\r\n        if (this.deletedSpecialCharacter && position) {\r\n            if (this.specialCharacters.includes(this.actualValue.slice(position, position + 1))) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                position = position + 1;\r\n            }\r\n            else if (maskExpression.slice(position - 1, position + 1) !== \"M0\" /* MaskExpression.MONTHS */) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                position = position - 2;\r\n            }\r\n            // eslint-disable-next-line no-param-reassign\r\n            this.deletedSpecialCharacter = false;\r\n        }\r\n        if (this.showMaskTyped &&\r\n            this.placeHolderCharacter.length === 1 &&\r\n            !this.leadZeroDateTime) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            inputValue = this.removeMask(inputValue);\r\n        }\r\n        if (this.maskChanged) {\r\n            newInputValue = inputValue;\r\n        }\r\n        else {\r\n            newInputValue =\r\n                Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\r\n        }\r\n        if (this.showMaskTyped && this.keepCharacterPositions && this.actualValue && !justPasted) {\r\n            const value = this.dropSpecialCharacters\r\n                ? this.removeMask(this.actualValue)\r\n                : this.actualValue;\r\n            this.formControlResult(value);\r\n            return this.actualValue\r\n                ? this.actualValue\r\n                : this.prefix + this.maskIsShown + this.suffix;\r\n        }\r\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\r\n        this.actualValue = this.getActualValue(result);\r\n        // handle some separator implications:\r\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\r\n        if (this.thousandSeparator === \".\" /* MaskExpression.DOT */ &&\r\n            this.decimalMarker === \".\" /* MaskExpression.DOT */) {\r\n            this.decimalMarker = \",\" /* MaskExpression.COMMA */;\r\n        }\r\n        // b) remove decimal marker from list of special characters to mask\r\n        if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\r\n            this.dropSpecialCharacters === true) {\r\n            this.specialCharacters = this.specialCharacters.filter((item) => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\r\n            );\r\n        }\r\n        if (result || result === '') {\r\n            this._previousValue = this._currentValue;\r\n            this._currentValue = result;\r\n            this._emitValue =\r\n                this._previousValue !== this._currentValue ||\r\n                    this.maskChanged ||\r\n                    (this._previousValue === this._currentValue && justPasted);\r\n        }\r\n        this._emitValue ? this.formControlResult(result) : '';\r\n        if (!this.showMaskTyped || (this.showMaskTyped && this.hiddenInput)) {\r\n            if (this.hiddenInput) {\r\n                if (backspaced) {\r\n                    return this.hideInput(result, this.maskExpression);\r\n                }\r\n                return (this.hideInput(result, this.maskExpression) +\r\n                    this.maskIsShown.slice(result.length));\r\n            }\r\n            return result;\r\n        }\r\n        const resLen = result.length;\r\n        const prefNmask = this.prefix + this.maskIsShown;\r\n        if (this.maskExpression.includes(\"H\" /* MaskExpression.HOURS */)) {\r\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\r\n            return result + prefNmask.slice(resLen + countSkipedSymbol);\r\n        }\r\n        else if (this.maskExpression === \"IP\" /* MaskExpression.IP */ ||\r\n            this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\r\n            return result + prefNmask;\r\n        }\r\n        return result + prefNmask.slice(resLen);\r\n    }\r\n    // get the number of characters that were shifted\r\n    _numberSkipedSymbols(value) {\r\n        const regex = /(^|\\D)(\\d\\D)/g;\r\n        let match = regex.exec(value);\r\n        let countSkipedSymbol = 0;\r\n        while (match != null) {\r\n            countSkipedSymbol += 1;\r\n            match = regex.exec(value);\r\n        }\r\n        return countSkipedSymbol;\r\n    }\r\n    applyValueChanges(position, justPasted, backspaced, \r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\r\n    cb = () => { }) {\r\n        const formElement = this._elementRef?.nativeElement;\r\n        if (!formElement) {\r\n            return;\r\n        }\r\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\r\n        if (formElement === this._getActiveElement()) {\r\n            return;\r\n        }\r\n        this.clearIfNotMatchFn();\r\n    }\r\n    hideInput(inputValue, maskExpression) {\r\n        return inputValue\r\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\r\n            .map((curr, index) => {\r\n            if (this.patterns &&\r\n                this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */] &&\r\n                this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.symbol) {\r\n                return this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */]\r\n                    ?.symbol;\r\n            }\r\n            return curr;\r\n        })\r\n            .join(\"\" /* MaskExpression.EMPTY_STRING */);\r\n    }\r\n    // this function is not necessary, it checks result against maskExpression\r\n    getActualValue(res) {\r\n        const compare = res\r\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\r\n            .filter((symbol, i) => {\r\n            const maskChar = this.maskExpression[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\r\n            return (this._checkSymbolMask(symbol, maskChar) ||\r\n                (this.specialCharacters.includes(maskChar) && symbol === maskChar));\r\n        });\r\n        if (compare.join(\"\" /* MaskExpression.EMPTY_STRING */) === res) {\r\n            return compare.join(\"\" /* MaskExpression.EMPTY_STRING */);\r\n        }\r\n        return res;\r\n    }\r\n    shiftTypedSymbols(inputValue) {\r\n        let symbolToReplace = '';\r\n        const newInputValue = (inputValue &&\r\n            inputValue\r\n                .split(\"\" /* MaskExpression.EMPTY_STRING */)\r\n                .map((currSymbol, index) => {\r\n                if (this.specialCharacters.includes(inputValue[index + 1] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\r\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\r\n                    symbolToReplace = currSymbol;\r\n                    return inputValue[index + 1];\r\n                }\r\n                if (symbolToReplace.length) {\r\n                    const replaceSymbol = symbolToReplace;\r\n                    symbolToReplace = \"\" /* MaskExpression.EMPTY_STRING */;\r\n                    return replaceSymbol;\r\n                }\r\n                return currSymbol;\r\n            })) ||\r\n            [];\r\n        return newInputValue.join(\"\" /* MaskExpression.EMPTY_STRING */);\r\n    }\r\n    /**\r\n     * Convert number value to string\r\n     * 3.1415 -> '3.1415'\r\n     * 1e-7 -> '0.0000001'\r\n     */\r\n    numberToString(value) {\r\n        if ((!value && value !== 0) ||\r\n            (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\r\n                (this.leadZero || !this.dropSpecialCharacters)) ||\r\n            (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\r\n                this.separatorLimit.length > 14 &&\r\n                String(value).length > 14)) {\r\n            return String(value);\r\n        }\r\n        return Number(value)\r\n            .toLocaleString('fullwide', {\r\n            useGrouping: false,\r\n            maximumFractionDigits: 20,\r\n        })\r\n            .replace(`/${\"-\" /* MaskExpression.MINUS */}/`, \"-\" /* MaskExpression.MINUS */);\r\n    }\r\n    showMaskInInput(inputVal) {\r\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\r\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\r\n                throw new Error('Mask expression must match mask placeholder length');\r\n            }\r\n            else {\r\n                return this.shownMaskExpression;\r\n            }\r\n        }\r\n        else if (this.showMaskTyped) {\r\n            if (inputVal) {\r\n                if (this.maskExpression === \"IP\" /* MaskExpression.IP */) {\r\n                    return this._checkForIp(inputVal);\r\n                }\r\n                if (this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\r\n                    return this._checkForCpfCnpj(inputVal);\r\n                }\r\n            }\r\n            if (this.placeHolderCharacter.length === this.maskExpression.length) {\r\n                return this.placeHolderCharacter;\r\n            }\r\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\r\n        }\r\n        return '';\r\n    }\r\n    clearIfNotMatchFn() {\r\n        const formElement = this._elementRef?.nativeElement;\r\n        if (!formElement) {\r\n            return;\r\n        }\r\n        if (this.clearIfNotMatch &&\r\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\r\n                formElement.value.replace(this.placeHolderCharacter, \"\" /* MaskExpression.EMPTY_STRING */)\r\n                    .length) {\r\n            this.formElementProperty = ['value', \"\" /* MaskExpression.EMPTY_STRING */];\r\n            this.applyMask('', this.maskExpression);\r\n        }\r\n    }\r\n    set formElementProperty([name, value]) {\r\n        if (!this._renderer || !this._elementRef) {\r\n            return;\r\n        }\r\n        Promise.resolve().then(() => this._renderer?.setProperty(this._elementRef?.nativeElement, name, value));\r\n    }\r\n    checkDropSpecialCharAmount(mask) {\r\n        const chars = mask\r\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\r\n            .filter((item) => this._findDropSpecialChar(item));\r\n        return chars.length;\r\n    }\r\n    removeMask(inputValue) {\r\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\r\n    }\r\n    _checkForIp(inputVal) {\r\n        if (inputVal === \"#\" /* MaskExpression.HASH */) {\r\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\r\n        }\r\n        const arr = [];\r\n        for (let i = 0; i < inputVal.length; i++) {\r\n            const value = inputVal[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\r\n            if (!value) {\r\n                continue;\r\n            }\r\n            if (value.match('\\\\d')) {\r\n                arr.push(value);\r\n            }\r\n        }\r\n        if (arr.length <= 3) {\r\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\r\n        }\r\n        if (arr.length > 3 && arr.length <= 6) {\r\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\r\n        }\r\n        if (arr.length > 6 && arr.length <= 9) {\r\n            return this.placeHolderCharacter;\r\n        }\r\n        if (arr.length > 9 && arr.length <= 12) {\r\n            return '';\r\n        }\r\n        return '';\r\n    }\r\n    _checkForCpfCnpj(inputVal) {\r\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\r\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\r\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\r\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\r\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\r\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\r\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\r\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\r\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\r\n        if (inputVal === \"#\" /* MaskExpression.HASH */) {\r\n            return cpf;\r\n        }\r\n        const arr = [];\r\n        for (let i = 0; i < inputVal.length; i++) {\r\n            const value = inputVal[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\r\n            if (!value) {\r\n                continue;\r\n            }\r\n            if (value.match('\\\\d')) {\r\n                arr.push(value);\r\n            }\r\n        }\r\n        if (arr.length <= 3) {\r\n            return cpf.slice(arr.length, cpf.length);\r\n        }\r\n        if (arr.length > 3 && arr.length <= 6) {\r\n            return cpf.slice(arr.length + 1, cpf.length);\r\n        }\r\n        if (arr.length > 6 && arr.length <= 9) {\r\n            return cpf.slice(arr.length + 2, cpf.length);\r\n        }\r\n        if (arr.length > 9 && arr.length < 11) {\r\n            return cpf.slice(arr.length + 3, cpf.length);\r\n        }\r\n        if (arr.length === 11) {\r\n            return '';\r\n        }\r\n        if (arr.length === 12) {\r\n            if (inputVal.length === 17) {\r\n                return cnpj.slice(16, cnpj.length);\r\n            }\r\n            return cnpj.slice(15, cnpj.length);\r\n        }\r\n        if (arr.length > 12 && arr.length <= 14) {\r\n            return cnpj.slice(arr.length + 4, cnpj.length);\r\n        }\r\n        return '';\r\n    }\r\n    /**\r\n     * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\r\n     */\r\n    _getActiveElement(document = this.document) {\r\n        const shadowRootEl = document?.activeElement?.shadowRoot;\r\n        if (!shadowRootEl?.activeElement) {\r\n            return document.activeElement;\r\n        }\r\n        else {\r\n            return this._getActiveElement(shadowRootEl);\r\n        }\r\n    }\r\n    /**\r\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\r\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\r\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\r\n     * model value too. Therefore, we don't trigger onChange in this scenario.\r\n     * @param inputValue the current form input value\r\n     */\r\n    formControlResult(inputValue) {\r\n        if (this.writingValue || (!this.triggerOnMaskChange && this.maskChanged)) {\r\n            this.maskChanged\r\n                ? this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))))\r\n                : '';\r\n            this.maskChanged = false;\r\n            return;\r\n        }\r\n        if (Array.isArray(this.dropSpecialCharacters)) {\r\n            this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)))));\r\n        }\r\n        else if (this.dropSpecialCharacters ||\r\n            (!this.dropSpecialCharacters && this.prefix === inputValue)) {\r\n            this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))));\r\n        }\r\n        else {\r\n            this.onChange(this.outputTransformFn(this._toNumber(inputValue)));\r\n        }\r\n    }\r\n    _toNumber(value) {\r\n        if (!this.isNumberValue || value === \"\" /* MaskExpression.EMPTY_STRING */) {\r\n            return value;\r\n        }\r\n        if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\r\n            (this.leadZero || !this.dropSpecialCharacters)) {\r\n            return value;\r\n        }\r\n        if (String(value).length > 16 && this.separatorLimit.length > 14) {\r\n            return String(value);\r\n        }\r\n        const num = Number(value);\r\n        if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && Number.isNaN(num)) {\r\n            const val = String(value).replace(',', '.');\r\n            return Number(val);\r\n        }\r\n        return Number.isNaN(num) ? value : num;\r\n    }\r\n    _removeMask(value, specialCharactersForRemove) {\r\n        if (this.maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */) &&\r\n            value.includes(\".\" /* MaskExpression.DOT */)) {\r\n            return value;\r\n        }\r\n        return value\r\n            ? value.replace(this._regExpForRemove(specialCharactersForRemove), \"\" /* MaskExpression.EMPTY_STRING */)\r\n            : value;\r\n    }\r\n    _removePrefix(value) {\r\n        if (!this.prefix) {\r\n            return value;\r\n        }\r\n        return value ? value.replace(this.prefix, \"\" /* MaskExpression.EMPTY_STRING */) : value;\r\n    }\r\n    _removeSuffix(value) {\r\n        if (!this.suffix) {\r\n            return value;\r\n        }\r\n        return value ? value.replace(this.suffix, \"\" /* MaskExpression.EMPTY_STRING */) : value;\r\n    }\r\n    _retrieveSeparatorValue(result) {\r\n        let specialCharacters = Array.isArray(this.dropSpecialCharacters)\r\n            ? this.specialCharacters.filter((v) => {\r\n                return this.dropSpecialCharacters.includes(v);\r\n            })\r\n            : this.specialCharacters;\r\n        if (!this.deletedSpecialCharacter &&\r\n            this._checkPatternForSpace() &&\r\n            result.includes(\" \" /* MaskExpression.WHITE_SPACE */)) {\r\n            specialCharacters = specialCharacters.filter((char) => char !== \" \" /* MaskExpression.WHITE_SPACE */);\r\n        }\r\n        return this._removeMask(result, specialCharacters);\r\n    }\r\n    _regExpForRemove(specialCharactersForRemove) {\r\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\r\n    }\r\n    _replaceDecimalMarkerToDot(value) {\r\n        const markers = Array.isArray(this.decimalMarker)\r\n            ? this.decimalMarker\r\n            : [this.decimalMarker];\r\n        return value.replace(this._regExpForRemove(markers), \".\" /* MaskExpression.DOT */);\r\n    }\r\n    _checkSymbols(result) {\r\n        if (result === \"\" /* MaskExpression.EMPTY_STRING */) {\r\n            return result;\r\n        }\r\n        if (this.maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */) &&\r\n            this.decimalMarker === \",\" /* MaskExpression.COMMA */) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            result = result.replace(\",\" /* MaskExpression.COMMA */, \".\" /* MaskExpression.DOT */);\r\n        }\r\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\r\n        const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\r\n        if (!this.isNumberValue) {\r\n            return separatorValue;\r\n        }\r\n        if (separatorPrecision) {\r\n            if (result === this.decimalMarker) {\r\n                return null;\r\n            }\r\n            if (this.separatorLimit.length > 14) {\r\n                return String(separatorValue);\r\n            }\r\n            return this._checkPrecision(this.maskExpression, separatorValue);\r\n        }\r\n        else {\r\n            return separatorValue;\r\n        }\r\n    }\r\n    _checkPatternForSpace() {\r\n        for (const key in this.patterns) {\r\n            // eslint-disable-next-line no-prototype-builtins\r\n            if (this.patterns[key] && this.patterns[key]?.hasOwnProperty('pattern')) {\r\n                const patternString = this.patterns[key]?.pattern.toString();\r\n                const pattern = this.patterns[key]?.pattern;\r\n                if (patternString?.includes(\" \" /* MaskExpression.WHITE_SPACE */) &&\r\n                    pattern?.test(this.maskExpression)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // TODO should think about helpers or separting decimal precision to own property\r\n    _retrieveSeparatorPrecision(maskExpretion) {\r\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\r\n        return matcher ? Number(matcher[1]) : null;\r\n    }\r\n    _checkPrecision(separatorExpression, separatorValue) {\r\n        const separatorPrecision = separatorExpression.slice(10, 11);\r\n        if (separatorExpression.indexOf('2') > 0 ||\r\n            (this.leadZero && Number(separatorPrecision) > 1)) {\r\n            if (this.decimalMarker === \",\" /* MaskExpression.COMMA */ && this.leadZero) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                separatorValue = separatorValue.replace(',', '.');\r\n            }\r\n            return this.leadZero\r\n                ? Number(separatorValue).toFixed(Number(separatorPrecision))\r\n                : Number(separatorValue).toFixed(2);\r\n        }\r\n        return this.numberToString(separatorValue);\r\n    }\r\n    _repeatPatternSymbols(maskExp) {\r\n        return ((maskExp.match(/{[0-9]+}/) &&\r\n            maskExp\r\n                .split(\"\" /* MaskExpression.EMPTY_STRING */)\r\n                .reduce((accum, currVal, index) => {\r\n                this._start =\r\n                    currVal === \"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */ ? index : this._start;\r\n                if (currVal !== \"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */) {\r\n                    return this._findSpecialChar(currVal) ? accum + currVal : accum;\r\n                }\r\n                this._end = index;\r\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\r\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\r\n                if (maskExp.slice(0, this._start).length > 1 &&\r\n                    maskExp.includes(\"S\" /* MaskExpression.LETTER_S */)) {\r\n                    const symbols = maskExp.slice(0, this._start - 1);\r\n                    return symbols.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)\r\n                        ? accum + replaceWith\r\n                        : symbols + accum + replaceWith;\r\n                }\r\n                else {\r\n                    return accum + replaceWith;\r\n                }\r\n            }, '')) ||\r\n            maskExp);\r\n    }\r\n    currentLocaleDecimalMarker() {\r\n        return (1.1).toLocaleString().substring(1, 2);\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgxMaskService, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }\r\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgxMaskService }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgxMaskService, decorators: [{\r\n            type: Injectable\r\n        }] });\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction _configFactory() {\r\n    const initConfig = inject(INITIAL_CONFIG);\r\n    const configValue = inject(NEW_CONFIG);\r\n    return configValue instanceof Function\r\n        ? { ...initConfig, ...configValue() }\r\n        : { ...initConfig, ...configValue };\r\n}\r\nfunction provideNgxMask(configValue) {\r\n    return [\r\n        {\r\n            provide: NEW_CONFIG,\r\n            useValue: configValue,\r\n        },\r\n        {\r\n            provide: INITIAL_CONFIG,\r\n            useValue: initialConfig,\r\n        },\r\n        {\r\n            provide: NGX_MASK_CONFIG,\r\n            useFactory: _configFactory,\r\n        },\r\n        NgxMaskService,\r\n    ];\r\n}\r\nfunction provideEnvironmentNgxMask(configValue) {\r\n    return makeEnvironmentProviders(provideNgxMask(configValue));\r\n}\r\n\r\nclass NgxMaskDirective {\r\n    constructor() {\r\n        // eslint-disable-next-line @angular-eslint/no-input-rename\r\n        this.maskExpression = '';\r\n        this.specialCharacters = [];\r\n        this.patterns = {};\r\n        this.prefix = '';\r\n        this.suffix = '';\r\n        this.thousandSeparator = ' ';\r\n        this.decimalMarker = '.';\r\n        this.dropSpecialCharacters = null;\r\n        this.hiddenInput = null;\r\n        this.showMaskTyped = null;\r\n        this.placeHolderCharacter = null;\r\n        this.shownMaskExpression = null;\r\n        this.showTemplate = null;\r\n        this.clearIfNotMatch = null;\r\n        this.validation = null;\r\n        this.separatorLimit = null;\r\n        this.allowNegativeNumbers = null;\r\n        this.leadZeroDateTime = null;\r\n        this.leadZero = null;\r\n        this.triggerOnMaskChange = null;\r\n        this.apm = null;\r\n        this.inputTransformFn = null;\r\n        this.outputTransformFn = null;\r\n        this.keepCharacterPositions = null;\r\n        this.maskFilled = new EventEmitter();\r\n        this._maskValue = '';\r\n        this._position = null;\r\n        this._maskExpressionArray = [];\r\n        this._justPasted = false;\r\n        this._isFocused = false;\r\n        /**For IME composition event */\r\n        this._isComposing = false;\r\n        this.document = inject(DOCUMENT);\r\n        this._maskService = inject(NgxMaskService, { self: true });\r\n        this._config = inject(NGX_MASK_CONFIG);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\r\n        this.onChange = (_) => { };\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.onTouch = () => { };\r\n    }\r\n    ngOnChanges(changes) {\r\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, leadZero, triggerOnMaskChange, apm, inputTransformFn, outputTransformFn, keepCharacterPositions, } = changes;\r\n        if (maskExpression) {\r\n            if (maskExpression.currentValue !== maskExpression.previousValue &&\r\n                !maskExpression.firstChange) {\r\n                this._maskService.maskChanged = true;\r\n            }\r\n            if (maskExpression.currentValue &&\r\n                maskExpression.currentValue.split(\"||\" /* MaskExpression.OR */).length > 1) {\r\n                this._maskExpressionArray = maskExpression.currentValue\r\n                    .split(\"||\" /* MaskExpression.OR */)\r\n                    .sort((a, b) => {\r\n                    return a.length - b.length;\r\n                });\r\n                this._setMask();\r\n            }\r\n            else {\r\n                this._maskExpressionArray = [];\r\n                this._maskValue = maskExpression.currentValue || \"\" /* MaskExpression.EMPTY_STRING */;\r\n                this._maskService.maskExpression = this._maskValue;\r\n            }\r\n        }\r\n        if (allowNegativeNumbers) {\r\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\r\n            if (this._maskService.allowNegativeNumbers) {\r\n                this._maskService.specialCharacters = this._maskService.specialCharacters.filter((c) => c !== \"-\" /* MaskExpression.MINUS */);\r\n            }\r\n        }\r\n        if (specialCharacters) {\r\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\r\n                return;\r\n            }\r\n            else {\r\n                this._maskService.specialCharacters = specialCharacters.currentValue || [];\r\n            }\r\n        }\r\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\r\n        if (patterns && patterns.currentValue) {\r\n            this._maskService.patterns = patterns.currentValue;\r\n        }\r\n        if (apm && apm.currentValue) {\r\n            this._maskService.apm = apm.currentValue;\r\n        }\r\n        if (prefix) {\r\n            this._maskService.prefix = prefix.currentValue;\r\n        }\r\n        if (suffix) {\r\n            this._maskService.suffix = suffix.currentValue;\r\n        }\r\n        if (thousandSeparator) {\r\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\r\n        }\r\n        if (decimalMarker) {\r\n            this._maskService.decimalMarker = decimalMarker.currentValue;\r\n        }\r\n        if (dropSpecialCharacters) {\r\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\r\n        }\r\n        if (hiddenInput) {\r\n            this._maskService.hiddenInput = hiddenInput.currentValue;\r\n        }\r\n        if (showMaskTyped) {\r\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\r\n            if (showMaskTyped.previousValue === false &&\r\n                showMaskTyped.currentValue === true &&\r\n                this._isFocused) {\r\n                requestAnimationFrame(() => {\r\n                    this._maskService._elementRef?.nativeElement.click();\r\n                });\r\n            }\r\n        }\r\n        if (placeHolderCharacter) {\r\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\r\n        }\r\n        if (shownMaskExpression) {\r\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\r\n        }\r\n        if (showTemplate) {\r\n            this._maskService.showTemplate = showTemplate.currentValue;\r\n        }\r\n        if (clearIfNotMatch) {\r\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\r\n        }\r\n        if (validation) {\r\n            this._maskService.validation = validation.currentValue;\r\n        }\r\n        if (separatorLimit) {\r\n            this._maskService.separatorLimit = separatorLimit.currentValue;\r\n        }\r\n        if (leadZeroDateTime) {\r\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\r\n        }\r\n        if (leadZero) {\r\n            this._maskService.leadZero = leadZero.currentValue;\r\n        }\r\n        if (triggerOnMaskChange) {\r\n            this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\r\n        }\r\n        if (inputTransformFn) {\r\n            this._maskService.inputTransformFn = inputTransformFn.currentValue;\r\n        }\r\n        if (outputTransformFn) {\r\n            this._maskService.outputTransformFn = outputTransformFn.currentValue;\r\n        }\r\n        if (keepCharacterPositions) {\r\n            this._maskService.keepCharacterPositions = keepCharacterPositions.currentValue;\r\n        }\r\n        this._applyMask();\r\n    }\r\n    // eslint-disable-next-line complexity\r\n    validate({ value }) {\r\n        if (!this._maskService.validation || !this._maskValue) {\r\n            return null;\r\n        }\r\n        if (this._maskService.ipError) {\r\n            return this._createValidationError(value);\r\n        }\r\n        if (this._maskService.cpfCnpjError) {\r\n            return this._createValidationError(value);\r\n        }\r\n        if (this._maskValue.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\r\n            return null;\r\n        }\r\n        if (withoutValidation.includes(this._maskValue)) {\r\n            return null;\r\n        }\r\n        if (this._maskService.clearIfNotMatch) {\r\n            return null;\r\n        }\r\n        if (timeMasks.includes(this._maskValue)) {\r\n            return this._validateTime(value);\r\n        }\r\n        if (value && value.toString().length >= 1) {\r\n            let counterOfOpt = 0;\r\n            if (this._maskValue.startsWith(\"percent\" /* MaskExpression.PERCENT */)) {\r\n                return null;\r\n            }\r\n            for (const key in this._maskService.patterns) {\r\n                if (this._maskService.patterns[key]?.optional) {\r\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\r\n                        const opt = this._maskValue\r\n                            .split(\"\" /* MaskExpression.EMPTY_STRING */)\r\n                            .filter((i) => i === key)\r\n                            .join(\"\" /* MaskExpression.EMPTY_STRING */);\r\n                        counterOfOpt += opt.length;\r\n                    }\r\n                    else if (this._maskValue.indexOf(key) !== -1) {\r\n                        counterOfOpt++;\r\n                    }\r\n                    if (this._maskValue.indexOf(key) !== -1 &&\r\n                        value.toString().length >= this._maskValue.indexOf(key)) {\r\n                        return null;\r\n                    }\r\n                    if (counterOfOpt === this._maskValue.length) {\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n            if (this._maskValue.indexOf(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) === 1 &&\r\n                value.toString().length ===\r\n                    this._maskValue.length +\r\n                        Number((this._maskValue.split(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)[1] ??\r\n                            \"\" /* MaskExpression.EMPTY_STRING */).split(\"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */)[0]) -\r\n                        4) {\r\n                return null;\r\n            }\r\n            else if ((this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) > 1 &&\r\n                value.toString().length <\r\n                    this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */)) ||\r\n                (this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) > 1 &&\r\n                    value.toString().length <\r\n                        this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */)) ||\r\n                this._maskValue.indexOf(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) === 1) {\r\n                return this._createValidationError(value);\r\n            }\r\n            if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) === -1 ||\r\n                this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) === -1) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                value = typeof value === 'number' ? String(value) : value;\r\n                const array = this._maskValue.split('*');\r\n                const length = this._maskService.dropSpecialCharacters\r\n                    ? this._maskValue.length -\r\n                        this._maskService.checkDropSpecialCharAmount(this._maskValue) -\r\n                        counterOfOpt\r\n                    : this.prefix\r\n                        ? this._maskValue.length + this.prefix.length - counterOfOpt\r\n                        : this._maskValue.length - counterOfOpt;\r\n                if (array.length === 1) {\r\n                    if (value.toString().length < length) {\r\n                        return this._createValidationError(value);\r\n                    }\r\n                }\r\n                if (array.length > 1) {\r\n                    const lastIndexArray = array[array.length - 1];\r\n                    if (lastIndexArray &&\r\n                        this._maskService.specialCharacters.includes(lastIndexArray[0]) &&\r\n                        String(value).includes(lastIndexArray[0] ?? '') &&\r\n                        !this.dropSpecialCharacters) {\r\n                        const special = value.split(lastIndexArray[0]);\r\n                        return special[special.length - 1].length === lastIndexArray.length - 1\r\n                            ? null\r\n                            : this._createValidationError(value);\r\n                    }\r\n                    else if (((lastIndexArray &&\r\n                        !this._maskService.specialCharacters.includes(lastIndexArray[0])) ||\r\n                        !lastIndexArray ||\r\n                        this._maskService.dropSpecialCharacters) &&\r\n                        value.length >= length - 1) {\r\n                        return null;\r\n                    }\r\n                    else {\r\n                        return this._createValidationError(value);\r\n                    }\r\n                }\r\n            }\r\n            if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) === 1 ||\r\n                this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) === 1) {\r\n                return null;\r\n            }\r\n        }\r\n        if (value) {\r\n            this.maskFilled.emit();\r\n            return null;\r\n        }\r\n        return null;\r\n    }\r\n    onPaste() {\r\n        this._justPasted = true;\r\n    }\r\n    onFocus() {\r\n        this._isFocused = true;\r\n    }\r\n    onModelChange(value) {\r\n        // on form reset we need to update the actualValue\r\n        if ((value === \"\" /* MaskExpression.EMPTY_STRING */ || value === null || value === undefined) &&\r\n            this._maskService.actualValue) {\r\n            this._maskService.actualValue = this._maskService.getActualValue(\"\" /* MaskExpression.EMPTY_STRING */);\r\n        }\r\n    }\r\n    onInput(e) {\r\n        // If IME is composing text, we wait for the composed text.\r\n        if (this._isComposing)\r\n            return;\r\n        const el = e.target;\r\n        const transformedValue = this._maskService.inputTransformFn(el.value);\r\n        if (el.type !== 'number') {\r\n            if (typeof transformedValue === 'string' || typeof transformedValue === 'number') {\r\n                el.value = transformedValue.toString();\r\n                this._inputValue = el.value;\r\n                this._setMask();\r\n                if (!this._maskValue) {\r\n                    this.onChange(el.value);\r\n                    return;\r\n                }\r\n                let position = el.selectionStart === 1\r\n                    ? el.selectionStart + this._maskService.prefix.length\r\n                    : el.selectionStart;\r\n                if (this.showMaskTyped &&\r\n                    this.keepCharacterPositions &&\r\n                    this._maskService.placeHolderCharacter.length === 1) {\r\n                    const inputSymbol = el.value.slice(position - 1, position);\r\n                    const prefixLength = this.prefix.length;\r\n                    const checkSymbols = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position - 1 - prefixLength] ??\r\n                        \"\" /* MaskExpression.EMPTY_STRING */);\r\n                    const checkSpecialCharacter = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position + 1 - prefixLength] ??\r\n                        \"\" /* MaskExpression.EMPTY_STRING */);\r\n                    const selectRangeBackspace = this._maskService.selStart === this._maskService.selEnd;\r\n                    const selStart = Number(this._maskService.selStart) - prefixLength ?? '';\r\n                    const selEnd = Number(this._maskService.selEnd) - prefixLength ?? '';\r\n                    if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\r\n                        if (!selectRangeBackspace) {\r\n                            if (this._maskService.selStart === prefixLength) {\r\n                                this._maskService.actualValue =\r\n                                    this.prefix +\r\n                                        this._maskService.maskIsShown.slice(0, selEnd) +\r\n                                        this._inputValue.split(this.prefix).join('');\r\n                            }\r\n                            else if (this._maskService.selStart ===\r\n                                this._maskService.maskIsShown.length + prefixLength) {\r\n                                this._maskService.actualValue =\r\n                                    this._inputValue +\r\n                                        this._maskService.maskIsShown.slice(selStart, selEnd);\r\n                            }\r\n                            else {\r\n                                this._maskService.actualValue =\r\n                                    this.prefix +\r\n                                        this._inputValue\r\n                                            .split(this.prefix)\r\n                                            .join('')\r\n                                            .slice(0, selStart) +\r\n                                        this._maskService.maskIsShown.slice(selStart, selEnd) +\r\n                                        this._maskService.actualValue.slice(selEnd + prefixLength, this._maskService.maskIsShown.length + prefixLength) +\r\n                                        this.suffix;\r\n                            }\r\n                        }\r\n                        else if (!this._maskService.specialCharacters.includes(this._maskService.maskExpression.slice(position - this.prefix.length, position + 1 - this.prefix.length)) &&\r\n                            selectRangeBackspace) {\r\n                            if (selStart === 1 && this.prefix) {\r\n                                this._maskService.actualValue =\r\n                                    this.prefix +\r\n                                        this._maskService.placeHolderCharacter +\r\n                                        el.value\r\n                                            .split(this.prefix)\r\n                                            .join('')\r\n                                            .split(this.suffix)\r\n                                            .join('') +\r\n                                        this.suffix;\r\n                                position = position - 1;\r\n                            }\r\n                            else {\r\n                                const part1 = el.value.substring(0, position);\r\n                                const part2 = el.value.substring(position);\r\n                                this._maskService.actualValue =\r\n                                    part1 + this._maskService.placeHolderCharacter + part2;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this._code !== \"Backspace\" /* MaskExpression.BACKSPACE */) {\r\n                        if (!checkSymbols && !checkSpecialCharacter && selectRangeBackspace) {\r\n                            position = Number(el.selectionStart) - 1;\r\n                        }\r\n                        else if (this._maskService.specialCharacters.includes(el.value.slice(position, position + 1)) &&\r\n                            checkSpecialCharacter &&\r\n                            !this._maskService.specialCharacters.includes(el.value.slice(position + 1, position + 2))) {\r\n                            this._maskService.actualValue =\r\n                                el.value.slice(0, position - 1) +\r\n                                    el.value.slice(position, position + 1) +\r\n                                    inputSymbol +\r\n                                    el.value.slice(position + 2);\r\n                            position = position + 1;\r\n                        }\r\n                        else if (checkSymbols) {\r\n                            this._maskService.actualValue =\r\n                                el.value.slice(0, position - 1) +\r\n                                    inputSymbol +\r\n                                    el.value\r\n                                        .slice(position + 1)\r\n                                        .split(this.suffix)\r\n                                        .join('') +\r\n                                    this.suffix;\r\n                        }\r\n                    }\r\n                }\r\n                let caretShift = 0;\r\n                let backspaceShift = false;\r\n                if (this._code === \"Delete\" /* MaskExpression.DELETE */ && \"separator\" /* MaskExpression.SEPARATOR */) {\r\n                    this._maskService.deletedSpecialCharacter = true;\r\n                }\r\n                if (this._inputValue.length >= this._maskService.maskExpression.length - 1 &&\r\n                    this._code !== \"Backspace\" /* MaskExpression.BACKSPACE */ &&\r\n                    this._maskService.maskExpression === \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */ &&\r\n                    position < 10) {\r\n                    const inputSymbol = this._inputValue.slice(position - 1, position);\r\n                    el.value =\r\n                        this._inputValue.slice(0, position - 1) +\r\n                            inputSymbol +\r\n                            this._inputValue.slice(position + 1);\r\n                }\r\n                if (this._maskService.maskExpression === \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */ &&\r\n                    this.leadZeroDateTime) {\r\n                    if ((position < 3 && Number(el.value) > 31 && Number(el.value) < 40) ||\r\n                        (position === 5 && Number(el.value.slice(3, 5)) > 12)) {\r\n                        position = position + 2;\r\n                    }\r\n                }\r\n                if (this._maskService.maskExpression === \"Hh:m0:s0\" /* MaskExpression.HOURS_MINUTES_SECONDS */ &&\r\n                    this.apm) {\r\n                    if (this._justPasted && el.value.slice(0, 2) === \"00\" /* MaskExpression.DOUBLE_ZERO */) {\r\n                        el.value = el.value.slice(1, 2) + el.value.slice(2, el.value.length);\r\n                    }\r\n                    el.value =\r\n                        el.value === \"00\" /* MaskExpression.DOUBLE_ZERO */\r\n                            ? \"0\" /* MaskExpression.NUMBER_ZERO */\r\n                            : el.value;\r\n                }\r\n                this._maskService.applyValueChanges(position, this._justPasted, this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ || this._code === \"Delete\" /* MaskExpression.DELETE */, (shift, _backspaceShift) => {\r\n                    this._justPasted = false;\r\n                    caretShift = shift;\r\n                    backspaceShift = _backspaceShift;\r\n                });\r\n                // only set the selection if the element is active\r\n                if (this._getActiveElement() !== el) {\r\n                    return;\r\n                }\r\n                // update position after applyValueChanges to prevent cursor on wrong position when it has an array of maskExpression\r\n                if (this._maskExpressionArray.length) {\r\n                    if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\r\n                        position = this.specialCharacters.includes(this._inputValue.slice(position - 1, position))\r\n                            ? position - 1\r\n                            : position;\r\n                    }\r\n                    else {\r\n                        position =\r\n                            el.selectionStart === 1\r\n                                ? el.selectionStart + this._maskService.prefix.length\r\n                                : el.selectionStart;\r\n                    }\r\n                }\r\n                this._position =\r\n                    this._position === 1 && this._inputValue.length === 1 ? null : this._position;\r\n                let positionToApply = this._position\r\n                    ? this._inputValue.length + position + caretShift\r\n                    : position +\r\n                        (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ && !backspaceShift ? 0 : caretShift);\r\n                if (positionToApply > this._getActualInputLength()) {\r\n                    positionToApply = this._getActualInputLength();\r\n                }\r\n                if (positionToApply < 0) {\r\n                    positionToApply = 0;\r\n                }\r\n                el.setSelectionRange(positionToApply, positionToApply);\r\n                this._position = null;\r\n            }\r\n            else {\r\n                console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof transformedValue);\r\n            }\r\n        }\r\n        else {\r\n            this._maskService.applyValueChanges(el.value.length, this._justPasted, this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ || this._code === \"Delete\" /* MaskExpression.DELETE */);\r\n        }\r\n    }\r\n    // IME starts\r\n    onCompositionStart() {\r\n        this._isComposing = true;\r\n    }\r\n    // IME completes\r\n    onCompositionEnd(e) {\r\n        this._isComposing = false;\r\n        this._justPasted = true;\r\n        this.onInput(e);\r\n    }\r\n    onBlur(e) {\r\n        if (this._maskValue) {\r\n            const el = e.target;\r\n            if (this.leadZero && el.value.length > 0 && typeof this.decimalMarker === 'string') {\r\n                const maskExpression = this._maskService.maskExpression;\r\n                const precision = Number(this._maskService.maskExpression.slice(maskExpression.length - 1, maskExpression.length));\r\n                if (precision > 1) {\r\n                    el.value = this.suffix ? el.value.split(this.suffix).join('') : el.value;\r\n                    const decimalPart = el.value.split(this.decimalMarker)[1];\r\n                    el.value = el.value.includes(this.decimalMarker)\r\n                        ? el.value +\r\n                            \"0\" /* MaskExpression.NUMBER_ZERO */.repeat(precision - decimalPart.length) +\r\n                            this.suffix\r\n                        : el.value +\r\n                            this.decimalMarker +\r\n                            \"0\" /* MaskExpression.NUMBER_ZERO */.repeat(precision) +\r\n                            this.suffix;\r\n                    this._maskService.actualValue = el.value;\r\n                }\r\n            }\r\n            this._maskService.clearIfNotMatchFn();\r\n        }\r\n        this._isFocused = false;\r\n        this.onTouch();\r\n    }\r\n    onClick(e) {\r\n        if (!this._maskValue) {\r\n            return;\r\n        }\r\n        const el = e.target;\r\n        const posStart = 0;\r\n        const posEnd = 0;\r\n        if (el !== null &&\r\n            el.selectionStart !== null &&\r\n            el.selectionStart === el.selectionEnd &&\r\n            el.selectionStart > this._maskService.prefix.length &&\r\n            // eslint-disable-next-line\r\n            e.keyCode !== 38) {\r\n            if (this._maskService.showMaskTyped && !this.keepCharacterPositions) {\r\n                // We are showing the mask in the input\r\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\r\n                if (el.setSelectionRange &&\r\n                    this._maskService.prefix + this._maskService.maskIsShown === el.value) {\r\n                    // the input ONLY contains the mask, so position the cursor at the start\r\n                    el.focus();\r\n                    el.setSelectionRange(posStart, posEnd);\r\n                }\r\n                else {\r\n                    // the input contains some characters already\r\n                    if (el.selectionStart > this._maskService.actualValue.length) {\r\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\r\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const nextValue = el &&\r\n            (el.value === this._maskService.prefix\r\n                ? this._maskService.prefix + this._maskService.maskIsShown\r\n                : el.value);\r\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\r\n        if (el && el.value !== nextValue) {\r\n            el.value = nextValue;\r\n        }\r\n        /** fix of cursor position with prefix when mouse click occur */\r\n        if (el &&\r\n            el.type !== 'number' &&\r\n            (el.selectionStart || el.selectionEnd) <=\r\n                this._maskService.prefix.length) {\r\n            el.selectionStart = this._maskService.prefix.length;\r\n            return;\r\n        }\r\n        /** select only inserted text */\r\n        if (el && el.selectionEnd > this._getActualInputLength()) {\r\n            el.selectionEnd = this._getActualInputLength();\r\n        }\r\n    }\r\n    // eslint-disable-next-line complexity\r\n    onKeyDown(e) {\r\n        if (!this._maskValue) {\r\n            return;\r\n        }\r\n        if (this._isComposing) {\r\n            // User finalize their choice from IME composition, so trigger onInput() for the composed text.\r\n            if (e.key === 'Enter')\r\n                this.onCompositionEnd(e);\r\n            return;\r\n        }\r\n        this._code = e.code ? e.code : e.key;\r\n        const el = e.target;\r\n        this._inputValue = el.value;\r\n        this._setMask();\r\n        if (el.type !== 'number') {\r\n            if (e.key === \"ArrowUp\" /* MaskExpression.ARROW_UP */) {\r\n                e.preventDefault();\r\n            }\r\n            if (e.key === \"ArrowLeft\" /* MaskExpression.ARROW_LEFT */ ||\r\n                e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ ||\r\n                e.key === \"Delete\" /* MaskExpression.DELETE */) {\r\n                if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && el.value.length === 0) {\r\n                    el.selectionStart = el.selectionEnd;\r\n                }\r\n                if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && el.selectionStart !== 0) {\r\n                    // If specialChars is false, (shouldn't ever happen) then set to the defaults\r\n                    this.specialCharacters = this.specialCharacters?.length\r\n                        ? this.specialCharacters\r\n                        : this._config.specialCharacters;\r\n                    if (this.prefix.length > 1 &&\r\n                        el.selectionStart <= this.prefix.length) {\r\n                        el.setSelectionRange(this.prefix.length, el.selectionEnd);\r\n                    }\r\n                    else {\r\n                        if (this._inputValue.length !== el.selectionStart &&\r\n                            el.selectionStart !== 1) {\r\n                            while (this.specialCharacters.includes((this._inputValue[el.selectionStart - 1] ??\r\n                                \"\" /* MaskExpression.EMPTY_STRING */).toString()) &&\r\n                                ((this.prefix.length >= 1 &&\r\n                                    el.selectionStart > this.prefix.length) ||\r\n                                    this.prefix.length === 0)) {\r\n                                el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                this.checkSelectionOnDeletion(el);\r\n                if (this._maskService.prefix.length &&\r\n                    el.selectionStart <= this._maskService.prefix.length &&\r\n                    el.selectionEnd <= this._maskService.prefix.length) {\r\n                    e.preventDefault();\r\n                }\r\n                const cursorStart = el.selectionStart;\r\n                if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ &&\r\n                    !el.readOnly &&\r\n                    cursorStart === 0 &&\r\n                    el.selectionEnd === el.value.length &&\r\n                    el.value.length !== 0) {\r\n                    this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\r\n                    this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\r\n                }\r\n            }\r\n            if (!!this.suffix &&\r\n                this.suffix.length > 1 &&\r\n                this._inputValue.length - this.suffix.length < el.selectionStart) {\r\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\r\n            }\r\n            else if ((e.code === 'KeyA' && e.ctrlKey) ||\r\n                (e.code === 'KeyA' && e.metaKey) // Cmd + A (Mac)\r\n            ) {\r\n                el.setSelectionRange(0, this._getActualInputLength());\r\n                e.preventDefault();\r\n            }\r\n            this._maskService.selStart = el.selectionStart;\r\n            this._maskService.selEnd = el.selectionEnd;\r\n        }\r\n    }\r\n    /** It writes the value in the input */\r\n    async writeValue(controlValue) {\r\n        if (typeof controlValue === 'object' && controlValue !== null && 'value' in controlValue) {\r\n            if ('disable' in controlValue) {\r\n                this.setDisabledState(Boolean(controlValue.disable));\r\n            }\r\n            // eslint-disable-next-line no-param-reassign\r\n            controlValue = controlValue.value;\r\n        }\r\n        if (controlValue !== null) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            controlValue = this.inputTransformFn\r\n                ? this.inputTransformFn(controlValue)\r\n                : controlValue;\r\n        }\r\n        if (typeof controlValue === 'string' ||\r\n            typeof controlValue === 'number' ||\r\n            controlValue === null ||\r\n            controlValue === undefined) {\r\n            if (controlValue === null || controlValue === undefined) {\r\n                this._maskService._currentValue = '';\r\n                this._maskService._previousValue = '';\r\n            }\r\n            // eslint-disable-next-line no-param-reassign\r\n            let inputValue = controlValue;\r\n            if (typeof inputValue === 'number' ||\r\n                this._maskValue.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                inputValue = String(inputValue);\r\n                const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\r\n                if (!Array.isArray(this._maskService.decimalMarker)) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    inputValue =\r\n                        this._maskService.decimalMarker !== localeDecimalMarker\r\n                            ? inputValue.replace(localeDecimalMarker, this._maskService.decimalMarker)\r\n                            : inputValue;\r\n                }\r\n                if (this._maskService.leadZero &&\r\n                    inputValue &&\r\n                    this.maskExpression &&\r\n                    this.dropSpecialCharacters !== false) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    inputValue = this._maskService._checkPrecision(this._maskService.maskExpression, inputValue);\r\n                }\r\n                if (this._maskService.decimalMarker === \",\" /* MaskExpression.COMMA */) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    inputValue = inputValue\r\n                        .toString()\r\n                        .replace(\".\" /* MaskExpression.DOT */, \",\" /* MaskExpression.COMMA */);\r\n                }\r\n                if (this.maskExpression?.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && this.leadZero) {\r\n                    requestAnimationFrame(() => {\r\n                        this._maskService.applyMask(inputValue?.toString() ?? '', this._maskService.maskExpression);\r\n                    });\r\n                }\r\n                this._maskService.isNumberValue = true;\r\n            }\r\n            if (typeof inputValue !== 'string') {\r\n                // eslint-disable-next-line no-param-reassign\r\n                inputValue = '';\r\n            }\r\n            this._inputValue = inputValue;\r\n            this._setMask();\r\n            if ((inputValue && this._maskService.maskExpression) ||\r\n                (this._maskService.maskExpression &&\r\n                    (this._maskService.prefix || this._maskService.showMaskTyped))) {\r\n                // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\r\n                typeof this.inputTransformFn !== 'function'\r\n                    ? (this._maskService.writingValue = true)\r\n                    : '';\r\n                this._maskService.formElementProperty = [\r\n                    'value',\r\n                    this._maskService.applyMask(inputValue, this._maskService.maskExpression),\r\n                ];\r\n                // Let the service know we've finished writing value\r\n                typeof this.inputTransformFn !== 'function'\r\n                    ? (this._maskService.writingValue = false)\r\n                    : '';\r\n            }\r\n            else {\r\n                this._maskService.formElementProperty = ['value', inputValue];\r\n            }\r\n            this._inputValue = inputValue;\r\n        }\r\n        else {\r\n            console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof controlValue);\r\n        }\r\n    }\r\n    registerOnChange(fn) {\r\n        this._maskService.onChange = this.onChange = fn;\r\n    }\r\n    registerOnTouched(fn) {\r\n        this.onTouch = fn;\r\n    }\r\n    _getActiveElement(document = this.document) {\r\n        const shadowRootEl = document?.activeElement?.shadowRoot;\r\n        if (!shadowRootEl?.activeElement) {\r\n            return document.activeElement;\r\n        }\r\n        else {\r\n            return this._getActiveElement(shadowRootEl);\r\n        }\r\n    }\r\n    checkSelectionOnDeletion(el) {\r\n        el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\r\n        el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\r\n    }\r\n    /** It disables the input element */\r\n    setDisabledState(isDisabled) {\r\n        this._maskService.formElementProperty = ['disabled', isDisabled];\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    _applyMask() {\r\n        this._maskService.maskExpression = this._maskService._repeatPatternSymbols(this._maskValue || '');\r\n        this._maskService.formElementProperty = [\r\n            'value',\r\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\r\n        ];\r\n    }\r\n    _validateTime(value) {\r\n        const rowMaskLen = this._maskValue\r\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\r\n            .filter((s) => s !== ':').length;\r\n        if (!value) {\r\n            return null; // Don't validate empty values to allow for optional form control\r\n        }\r\n        if ((+(value[value.length - 1] ?? -1) === 0 && value.length < rowMaskLen) ||\r\n            value.length <= rowMaskLen - 2) {\r\n            return this._createValidationError(value);\r\n        }\r\n        return null;\r\n    }\r\n    _getActualInputLength() {\r\n        return (this._maskService.actualValue.length ||\r\n            this._maskService.actualValue.length + this._maskService.prefix.length);\r\n    }\r\n    _createValidationError(actualValue) {\r\n        return {\r\n            mask: {\r\n                requiredMask: this._maskValue,\r\n                actualValue,\r\n            },\r\n        };\r\n    }\r\n    _setMask() {\r\n        this._maskExpressionArray.some((mask) => {\r\n            const specialChart = mask\r\n                .split(\"\" /* MaskExpression.EMPTY_STRING */)\r\n                .some((char) => this._maskService.specialCharacters.includes(char));\r\n            if ((specialChart && this._inputValue && !mask.includes(\"S\" /* MaskExpression.LETTER_S */)) ||\r\n                mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)) {\r\n                const test = this._maskService.removeMask(this._inputValue)?.length <=\r\n                    this._maskService.removeMask(mask)?.length;\r\n                if (test) {\r\n                    this._maskValue =\r\n                        this.maskExpression =\r\n                            this._maskService.maskExpression =\r\n                                mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)\r\n                                    ? this._maskService._repeatPatternSymbols(mask)\r\n                                    : mask;\r\n                    return test;\r\n                }\r\n                else {\r\n                    const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ??\r\n                        \"\" /* MaskExpression.EMPTY_STRING */;\r\n                    this._maskValue =\r\n                        this.maskExpression =\r\n                            this._maskService.maskExpression =\r\n                                expression.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)\r\n                                    ? this._maskService._repeatPatternSymbols(expression)\r\n                                    : expression;\r\n                }\r\n            }\r\n            else {\r\n                const check = this._inputValue\r\n                    ?.split(\"\" /* MaskExpression.EMPTY_STRING */)\r\n                    .every((character, index) => {\r\n                    const indexMask = mask.charAt(index);\r\n                    return this._maskService._checkSymbolMask(character, indexMask);\r\n                });\r\n                if (check) {\r\n                    this._maskValue = this.maskExpression = this._maskService.maskExpression = mask;\r\n                    return check;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgxMaskDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\r\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.12\", type: NgxMaskDirective, isStandalone: true, selector: \"input[mask], textarea[mask]\", inputs: { maskExpression: [\"mask\", \"maskExpression\"], specialCharacters: \"specialCharacters\", patterns: \"patterns\", prefix: \"prefix\", suffix: \"suffix\", thousandSeparator: \"thousandSeparator\", decimalMarker: \"decimalMarker\", dropSpecialCharacters: \"dropSpecialCharacters\", hiddenInput: \"hiddenInput\", showMaskTyped: \"showMaskTyped\", placeHolderCharacter: \"placeHolderCharacter\", shownMaskExpression: \"shownMaskExpression\", showTemplate: \"showTemplate\", clearIfNotMatch: \"clearIfNotMatch\", validation: \"validation\", separatorLimit: \"separatorLimit\", allowNegativeNumbers: \"allowNegativeNumbers\", leadZeroDateTime: \"leadZeroDateTime\", leadZero: \"leadZero\", triggerOnMaskChange: \"triggerOnMaskChange\", apm: \"apm\", inputTransformFn: \"inputTransformFn\", outputTransformFn: \"outputTransformFn\", keepCharacterPositions: \"keepCharacterPositions\" }, outputs: { maskFilled: \"maskFilled\" }, host: { listeners: { \"paste\": \"onPaste()\", \"focus\": \"onFocus($event)\", \"ngModelChange\": \"onModelChange($event)\", \"input\": \"onInput($event)\", \"compositionstart\": \"onCompositionStart($event)\", \"compositionend\": \"onCompositionEnd($event)\", \"blur\": \"onBlur($event)\", \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" } }, providers: [\r\n            {\r\n                provide: NG_VALUE_ACCESSOR,\r\n                useExisting: NgxMaskDirective,\r\n                multi: true,\r\n            },\r\n            {\r\n                provide: NG_VALIDATORS,\r\n                useExisting: NgxMaskDirective,\r\n                multi: true,\r\n            },\r\n            NgxMaskService,\r\n        ], exportAs: [\"mask\", \"ngxMask\"], usesOnChanges: true, ngImport: i0 }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgxMaskDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'input[mask], textarea[mask]',\r\n                    standalone: true,\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: NgxMaskDirective,\r\n                            multi: true,\r\n                        },\r\n                        {\r\n                            provide: NG_VALIDATORS,\r\n                            useExisting: NgxMaskDirective,\r\n                            multi: true,\r\n                        },\r\n                        NgxMaskService,\r\n                    ],\r\n                    exportAs: 'mask,ngxMask',\r\n                }]\r\n        }], propDecorators: { maskExpression: [{\r\n                type: Input,\r\n                args: ['mask']\r\n            }], specialCharacters: [{\r\n                type: Input\r\n            }], patterns: [{\r\n                type: Input\r\n            }], prefix: [{\r\n                type: Input\r\n            }], suffix: [{\r\n                type: Input\r\n            }], thousandSeparator: [{\r\n                type: Input\r\n            }], decimalMarker: [{\r\n                type: Input\r\n            }], dropSpecialCharacters: [{\r\n                type: Input\r\n            }], hiddenInput: [{\r\n                type: Input\r\n            }], showMaskTyped: [{\r\n                type: Input\r\n            }], placeHolderCharacter: [{\r\n                type: Input\r\n            }], shownMaskExpression: [{\r\n                type: Input\r\n            }], showTemplate: [{\r\n                type: Input\r\n            }], clearIfNotMatch: [{\r\n                type: Input\r\n            }], validation: [{\r\n                type: Input\r\n            }], separatorLimit: [{\r\n                type: Input\r\n            }], allowNegativeNumbers: [{\r\n                type: Input\r\n            }], leadZeroDateTime: [{\r\n                type: Input\r\n            }], leadZero: [{\r\n                type: Input\r\n            }], triggerOnMaskChange: [{\r\n                type: Input\r\n            }], apm: [{\r\n                type: Input\r\n            }], inputTransformFn: [{\r\n                type: Input\r\n            }], outputTransformFn: [{\r\n                type: Input\r\n            }], keepCharacterPositions: [{\r\n                type: Input\r\n            }], maskFilled: [{\r\n                type: Output\r\n            }], onPaste: [{\r\n                type: HostListener,\r\n                args: ['paste']\r\n            }], onFocus: [{\r\n                type: HostListener,\r\n                args: ['focus', ['$event']]\r\n            }], onModelChange: [{\r\n                type: HostListener,\r\n                args: ['ngModelChange', ['$event']]\r\n            }], onInput: [{\r\n                type: HostListener,\r\n                args: ['input', ['$event']]\r\n            }], onCompositionStart: [{\r\n                type: HostListener,\r\n                args: ['compositionstart', ['$event']]\r\n            }], onCompositionEnd: [{\r\n                type: HostListener,\r\n                args: ['compositionend', ['$event']]\r\n            }], onBlur: [{\r\n                type: HostListener,\r\n                args: ['blur', ['$event']]\r\n            }], onClick: [{\r\n                type: HostListener,\r\n                args: ['click', ['$event']]\r\n            }], onKeyDown: [{\r\n                type: HostListener,\r\n                args: ['keydown', ['$event']]\r\n            }] } });\r\n\r\nclass NgxMaskPipe {\r\n    constructor() {\r\n        this.defaultOptions = {};\r\n        this._maskService = inject(NgxMaskService);\r\n        this._maskExpressionArray = [];\r\n        this.mask = '';\r\n    }\r\n    transform(value, mask, { patterns, ...config } = {}) {\r\n        const currentConfig = {\r\n            maskExpression: mask,\r\n            ...this.defaultOptions,\r\n            ...config,\r\n            patterns: {\r\n                ...this._maskService.patterns,\r\n                ...patterns,\r\n            },\r\n        };\r\n        Object.entries(currentConfig).forEach(([key, value]) => {\r\n            //eslint-disable-next-line  @typescript-eslint/no-explicit-any\r\n            this._maskService[key] = value;\r\n        });\r\n        if (mask.includes('||')) {\r\n            if (mask.split('||').length > 1) {\r\n                this._maskExpressionArray = mask.split('||').sort((a, b) => {\r\n                    return a.length - b.length;\r\n                });\r\n                this._setMask(value);\r\n                return this._maskService.applyMask(`${value}`, this.mask);\r\n            }\r\n            else {\r\n                this._maskExpressionArray = [];\r\n                return this._maskService.applyMask(`${value}`, this.mask);\r\n            }\r\n        }\r\n        if (mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)) {\r\n            return this._maskService.applyMask(`${value}`, this._maskService._repeatPatternSymbols(mask));\r\n        }\r\n        if (mask.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\r\n            if (config.decimalMarker) {\r\n                this._maskService.decimalMarker = config.decimalMarker;\r\n            }\r\n            if (config.thousandSeparator) {\r\n                this._maskService.thousandSeparator = config.thousandSeparator;\r\n            }\r\n            if (config.leadZero) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                this._maskService.leadZero = config.leadZero;\r\n            }\r\n            // eslint-disable-next-line no-param-reassign\r\n            value = String(value);\r\n            const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\r\n            if (!Array.isArray(this._maskService.decimalMarker)) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                value =\r\n                    this._maskService.decimalMarker !== localeDecimalMarker\r\n                        ? value.replace(localeDecimalMarker, this._maskService.decimalMarker)\r\n                        : value;\r\n            }\r\n            if (this._maskService.leadZero &&\r\n                value &&\r\n                this._maskService.dropSpecialCharacters !== false) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                value = this._maskService._checkPrecision(mask, value);\r\n            }\r\n            if (this._maskService.decimalMarker === \",\" /* MaskExpression.COMMA */) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                value = value.toString().replace(\".\" /* MaskExpression.DOT */, \",\" /* MaskExpression.COMMA */);\r\n            }\r\n            this._maskService.isNumberValue = true;\r\n        }\r\n        if (value === null || value === undefined) {\r\n            return this._maskService.applyMask('', mask);\r\n        }\r\n        return this._maskService.applyMask(`${value}`, mask);\r\n    }\r\n    _setMask(value) {\r\n        if (this._maskExpressionArray.length > 0) {\r\n            this._maskExpressionArray.some((mask) => {\r\n                const test = this._maskService.removeMask(value)?.length <=\r\n                    this._maskService.removeMask(mask)?.length;\r\n                if (value && test) {\r\n                    this.mask = mask;\r\n                    return test;\r\n                }\r\n                else {\r\n                    const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ??\r\n                        \"\" /* MaskExpression.EMPTY_STRING */;\r\n                    this.mask = expression;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgxMaskPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }\r\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"16.2.12\", ngImport: i0, type: NgxMaskPipe, isStandalone: true, name: \"mask\" }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgxMaskPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'mask',\r\n                    pure: true,\r\n                    standalone: true,\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskDirective, NgxMaskPipe, NgxMaskService, initialConfig, provideEnvironmentNgxMask, provideNgxMask, timeMasks, withoutValidation };\r\n\n"],"mappings":";AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,cAAc,EAAEC,YAAY,EAAEC,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,EAAEC,wBAAwB,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,YAAY,EAAEC,IAAI,QAAQ,eAAe;AAC/K,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,iBAAiB,EAAEC,aAAa,QAAQ,gBAAgB;AAEjE,MAAMC,eAAe,GAAG,IAAIf,cAAc,CAAC,iBAAiB,CAAC;AAC7D,MAAMgB,UAAU,GAAG,IAAIhB,cAAc,CAAC,qBAAqB,CAAC;AAC5D,MAAMiB,cAAc,GAAG,IAAIjB,cAAc,CAAC,yBAAyB,CAAC;AACpE,MAAMkB,aAAa,GAAG;EAClBC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,EAAE;EACVC,iBAAiB,EAAE,GAAG;EACtBC,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;EACzBC,eAAe,EAAE,KAAK;EACtBC,YAAY,EAAE,KAAK;EACnBC,aAAa,EAAE,KAAK;EACpBC,oBAAoB,EAAE,GAAG;EACzBC,qBAAqB,EAAE,IAAI;EAC3BC,WAAW,EAAEC,SAAS;EACtBC,mBAAmB,EAAE,EAAE;EACvBC,cAAc,EAAE,EAAE;EAClBC,oBAAoB,EAAE,KAAK;EAC3BC,UAAU,EAAE,IAAI;EAChB;EACAC,iBAAiB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EACzFC,gBAAgB,EAAE,KAAK;EACvBC,GAAG,EAAE,KAAK;EACVC,QAAQ,EAAE,KAAK;EACfC,sBAAsB,EAAE,KAAK;EAC7BC,mBAAmB,EAAE,KAAK;EAC1BC,gBAAgB,EAAGC,KAAK,IAAKA,KAAK;EAClCC,iBAAiB,EAAGD,KAAK,IAAKA,KAAK;EACnCE,UAAU,EAAE,IAAI1C,YAAY,CAAC,CAAC;EAC9B2C,QAAQ,EAAE;IACN,GAAG,EAAE;MACDC,OAAO,EAAE,IAAIC,MAAM,CAAC,KAAK;IAC7B,CAAC;IACD,GAAG,EAAE;MACDD,OAAO,EAAE,IAAIC,MAAM,CAAC,KAAK,CAAC;MAC1BC,QAAQ,EAAE;IACd,CAAC;IACDC,CAAC,EAAE;MACCH,OAAO,EAAE,IAAIC,MAAM,CAAC,KAAK,CAAC;MAC1BG,MAAM,EAAE;IACZ,CAAC;IACDC,CAAC,EAAE;MACCL,OAAO,EAAE,IAAIC,MAAM,CAAC,aAAa;IACrC,CAAC;IACDK,CAAC,EAAE;MACCN,OAAO,EAAE,IAAIC,MAAM,CAAC,UAAU;IAClC,CAAC;IACDM,CAAC,EAAE;MACCP,OAAO,EAAE,IAAIC,MAAM,CAAC,OAAO;IAC/B,CAAC;IACDO,CAAC,EAAE;MACCR,OAAO,EAAE,IAAIC,MAAM,CAAC,OAAO;IAC/B,CAAC;IACDQ,CAAC,EAAE;MACCT,OAAO,EAAE,IAAIC,MAAM,CAAC,KAAK;IAC7B,CAAC;IACDS,CAAC,EAAE;MACCV,OAAO,EAAE,IAAIC,MAAM,CAAC,KAAK;IAC7B,CAAC;IACDU,CAAC,EAAE;MACCX,OAAO,EAAE,IAAIC,MAAM,CAAC,KAAK;IAC7B,CAAC;IACDW,CAAC,EAAE;MACCZ,OAAO,EAAE,IAAIC,MAAM,CAAC,KAAK;IAC7B,CAAC;IACDY,CAAC,EAAE;MACCb,OAAO,EAAE,IAAIC,MAAM,CAAC,KAAK;IAC7B,CAAC;IACDa,CAAC,EAAE;MACCd,OAAO,EAAE,IAAIC,MAAM,CAAC,KAAK;IAC7B;EACJ;AACJ,CAAC;AACD,MAAMc,SAAS,GAAG,CACd,UAAU,CAAC,4CACX,OAAO,CAAC,oCACR,OAAO,CAAC,qCACX;;AACD,MAAMC,iBAAiB,GAAG,CACtB,SAAS,CAAC,8BACV,IAAI,CAAC,iCACL,IAAI,CAAC,8BACL,IAAI,CAAC,8BACL,WAAW,CAAC,gCACZ,YAAY,CAAC,wCACb,OAAO,CAAC,kCACR,IAAI,CAAC,2BACL,IAAI,CAAC,4BACR;;AAED,MAAMC,qBAAqB,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,OAAO,GAAG9D,MAAM,CAACa,eAAe,CAAC;IACtC,IAAI,CAACY,qBAAqB,GAAG,IAAI,CAACqC,OAAO,CAACrC,qBAAqB;IAC/D,IAAI,CAACC,WAAW,GAAG,IAAI,CAACoC,OAAO,CAACpC,WAAW;IAC3C,IAAI,CAACL,eAAe,GAAG,IAAI,CAACyC,OAAO,CAACzC,eAAe;IACnD,IAAI,CAACW,iBAAiB,GAAG,IAAI,CAAC8B,OAAO,CAAC9B,iBAAiB;IACvD,IAAI,CAACU,QAAQ,GAAG,IAAI,CAACoB,OAAO,CAACpB,QAAQ;IACrC,IAAI,CAACxB,MAAM,GAAG,IAAI,CAAC4C,OAAO,CAAC5C,MAAM;IACjC,IAAI,CAACD,MAAM,GAAG,IAAI,CAAC6C,OAAO,CAAC7C,MAAM;IACjC,IAAI,CAACE,iBAAiB,GAAG,IAAI,CAAC2C,OAAO,CAAC3C,iBAAiB;IACvD,IAAI,CAACC,aAAa,GAAG,IAAI,CAAC0C,OAAO,CAAC1C,aAAa;IAC/C,IAAI,CAACG,aAAa,GAAG,IAAI,CAACuC,OAAO,CAACvC,aAAa;IAC/C,IAAI,CAACC,oBAAoB,GAAG,IAAI,CAACsC,OAAO,CAACtC,oBAAoB;IAC7D,IAAI,CAACO,UAAU,GAAG,IAAI,CAAC+B,OAAO,CAAC/B,UAAU;IACzC,IAAI,CAACF,cAAc,GAAG,IAAI,CAACiC,OAAO,CAACjC,cAAc;IACjD,IAAI,CAACC,oBAAoB,GAAG,IAAI,CAACgC,OAAO,CAAChC,oBAAoB;IAC7D,IAAI,CAACG,gBAAgB,GAAG,IAAI,CAAC6B,OAAO,CAAC7B,gBAAgB;IACrD,IAAI,CAACE,QAAQ,GAAG,IAAI,CAAC2B,OAAO,CAAC3B,QAAQ;IACrC,IAAI,CAACD,GAAG,GAAG,IAAI,CAAC4B,OAAO,CAAC5B,GAAG;IAC3B,IAAI,CAACI,gBAAgB,GAAG,IAAI,CAACwB,OAAO,CAACxB,gBAAgB;IACrD,IAAI,CAACE,iBAAiB,GAAG,IAAI,CAACsB,OAAO,CAACtB,iBAAiB;IACvD,IAAI,CAACJ,sBAAsB,GAAG,IAAI,CAAC0B,OAAO,CAAC1B,sBAAsB;IACjE,IAAI,CAAC2B,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,oBAAoB,GAAG,EAAE;IAC9B,IAAI,CAACvC,mBAAmB,GAAG,EAAE;IAC7B,IAAI,CAACwC,uBAAuB,GAAG,KAAK;IACpC,IAAI,CAACC,qBAAqB,GAAG,CAACC,GAAG,EAAEC,qBAAqB,EAAEC,YAAY,EAAEC,SAAS,KAAK;MAClF,IAAIC,CAAC,GAAG,EAAE;MACV,IAAIC,WAAW,GAAG,EAAE;MACpB,IAAIC,KAAK,CAACC,OAAO,CAACL,YAAY,CAAC,EAAE;QAC7B,MAAMM,MAAM,GAAG,IAAIlC,MAAM,CAAC4B,YAAY,CAACO,GAAG,CAAEC,CAAC,IAAM,cAAc,CAACC,OAAO,CAACD,CAAC,CAAC,IAAI,CAAC,GAAI,KAAIA,CAAE,EAAC,GAAGA,CAAE,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7GR,CAAC,GAAGJ,GAAG,CAACa,KAAK,CAACL,MAAM,CAAC;QACrBH,WAAW,GAAGL,GAAG,CAACc,KAAK,CAACN,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;MAC/C,CAAC,MACI;QACDJ,CAAC,GAAGJ,GAAG,CAACa,KAAK,CAACX,YAAY,CAAC;QAC3BG,WAAW,GAAGH,YAAY;MAC9B;MACA,MAAMa,QAAQ,GAAGX,CAAC,CAACY,MAAM,GAAG,CAAC,GAAI,GAAEX,WAAY,GAAED,CAAC,CAAC,CAAC,CAAE,EAAC,GAAG,EAAE,CAAC;MAC7D,IAAIa,GAAG,GAAGb,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;MACrB,MAAM7C,cAAc,GAAG,IAAI,CAACA,cAAc,CAAC2D,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,iCAAiC,CAAC;MAC/F,IAAI3D,cAAc,IAAI,CAACA,cAAc,EAAE;QACnC,IAAI0D,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,4BAA4B;UAC3CA,GAAG,GAAI,IAAGA,GAAG,CAACE,KAAK,CAAC,CAAC,EAAEF,GAAG,CAACD,MAAM,CAAC,CAACG,KAAK,CAAC,CAAC,EAAE5D,cAAc,CAACyD,MAAM,CAAE,EAAC;QACxE,CAAC,MACI;UACDC,GAAG,GAAGA,GAAG,CAACE,KAAK,CAAC,CAAC,EAAE5D,cAAc,CAACyD,MAAM,CAAC;QAC7C;MACJ;MACA,MAAMI,GAAG,GAAG,cAAc;MAC1B,OAAOnB,qBAAqB,IAAImB,GAAG,CAACC,IAAI,CAACJ,GAAG,CAAC,EAAE;QAC3CA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAACE,GAAG,EAAE,IAAI,GAAGnB,qBAAqB,GAAG,IAAI,CAAC;MAC/D;MACA,IAAIE,SAAS,KAAK9C,SAAS,EAAE;QACzB,OAAO4D,GAAG,GAAGF,QAAQ;MACzB,CAAC,MACI,IAAIZ,SAAS,KAAK,CAAC,EAAE;QACtB,OAAOc,GAAG;MACd;MACA,OAAOA,GAAG,GAAGF,QAAQ,CAACO,SAAS,CAAC,CAAC,EAAEnB,SAAS,GAAG,CAAC,CAAC;IACrD,CAAC;IACD,IAAI,CAACoB,UAAU,GAAIvB,GAAG,IAAK;MACvB,MAAMwB,YAAY,GAAGxB,GAAG,CAACkB,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;MAC1C,MAAMjD,KAAK,GAAGwD,MAAM,CAACD,YAAY,CAAC;MAClC,OAAO,CAACE,KAAK,CAACzD,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAI,GAAG;IACtD,CAAC;IACD,IAAI,CAAC0D,YAAY,GAAIhC,cAAc,IAAK;MACpC,MAAMS,CAAC,GAAGT,cAAc,CAACkB,KAAK,CAAC,GAAG,CAAC,wBAAwB,CAAC;MAC5D,IAAIT,CAAC,CAACY,MAAM,GAAG,CAAC,EAAE;QACd,OAAOS,MAAM,CAACrB,CAAC,CAACA,CAAC,CAACY,MAAM,GAAG,CAAC,CAAC,CAAC;MAClC;MACA,OAAOY,QAAQ;IACnB,CAAC;IACD,IAAI,CAACC,oBAAoB,GAAIC,UAAU,IAAK;MACxC,KAAK,IAAIC,CAAC,GAAG,IAAI,CAACpF,MAAM,EAAEqE,MAAM,GAAG,CAAC,EAAEe,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC/C,MAAMC,MAAM,GAAG,IAAI,CAACrF,MAAM,CAAC2E,SAAS,CAACS,CAAC,EAAE,IAAI,CAACpF,MAAM,EAAEqE,MAAM,CAAC;QAC5D,IAAIc,UAAU,CAACG,QAAQ,CAACD,MAAM,CAAC,IAC3BD,CAAC,KAAK,IAAI,CAACpF,MAAM,EAAEqE,MAAM,GAAG,CAAC,KAC5Be,CAAC,GAAG,CAAC,GAAG,CAAC,IACN,CAACD,UAAU,CAACG,QAAQ,CAAC,IAAI,CAACtF,MAAM,CAAC2E,SAAS,CAACS,CAAC,GAAG,CAAC,EAAE,IAAI,CAACpF,MAAM,EAAEqE,MAAM,CAAC,CAAC,CAAC,EAAE;UAC9E,OAAOc,UAAU,CAACZ,OAAO,CAACc,MAAM,EAAE,EAAE,CAAC,iCAAiC,CAAC;QAC3E;MACJ;;MACA,OAAOF,UAAU;IACrB,CAAC;IACD,IAAI,CAACI,mBAAmB,GAAG,CAACJ,UAAU,EAAE3B,SAAS,EAAErD,aAAa,KAAK;MACjE,IAAIqD,SAAS,GAAGyB,QAAQ,EAAE;QACtB;QACA,IAAItB,KAAK,CAACC,OAAO,CAACzD,aAAa,CAAC,EAAE;UAC9B,MAAMqF,MAAM,GAAGrF,aAAa,CAACsF,IAAI,CAAEC,EAAE,IAAKA,EAAE,KAAK,IAAI,CAACxF,iBAAiB,CAAC;UACxE;UACAC,aAAa,GAAGqF,MAAM,GAAGA,MAAM,GAAGrF,aAAa,CAAC,CAAC,CAAC;QACtD;QACA,MAAMwF,cAAc,GAAG,IAAIhE,MAAM,CAAC,IAAI,CAACiE,uBAAuB,CAACzF,aAAa,CAAC,GAAI,OAAMqD,SAAU,MAAK,CAAC;QACvG,MAAMqC,cAAc,GAAGV,UAAU,CAAChB,KAAK,CAACwB,cAAc,CAAC;QACvD,MAAMG,oBAAoB,GAAG,CAACD,cAAc,IAAIA,cAAc,CAAC,CAAC,CAAC,EAAExB,MAAM,KAAK,CAAC;QAC/E,IAAIyB,oBAAoB,GAAG,CAAC,GAAGtC,SAAS,EAAE;UACtC,MAAMuC,IAAI,GAAGD,oBAAoB,GAAG,CAAC,GAAGtC,SAAS;UACjD;UACA2B,UAAU,GAAGA,UAAU,CAACR,SAAS,CAAC,CAAC,EAAEQ,UAAU,CAACd,MAAM,GAAG0B,IAAI,CAAC;QAClE;QACA,IAAIvC,SAAS,KAAK,CAAC,IACf,IAAI,CAACwC,kBAAkB,CAACb,UAAU,CAACA,UAAU,CAACd,MAAM,GAAG,CAAC,CAAC,EAAElE,aAAa,EAAE,IAAI,CAACD,iBAAiB,CAAC,EAAE;UACnG;UACAiF,UAAU,GAAGA,UAAU,CAACR,SAAS,CAAC,CAAC,EAAEQ,UAAU,CAACd,MAAM,GAAG,CAAC,CAAC;QAC/D;MACJ;MACA,OAAOc,UAAU;IACrB,CAAC;EACL;EACAc,oBAAoBA,CAACd,UAAU,EAAEe,cAAc,EAAE;IAC7C,MAAM,CAACC,IAAI,EAAEC,aAAa,CAAC,GAAGF,cAAc;IAC5C,IAAI,CAACE,aAAa,GAAGA,aAAa;IAClC,OAAO,IAAI,CAACC,SAAS,CAAClB,UAAU,EAAEgB,IAAI,CAAC;EAC3C;EACAE,SAASA,CAAClB,UAAU,EAAEnC,cAAc,EAAEsD,QAAQ,GAAG,CAAC,EAAEC,UAAU,GAAG,KAAK,EAAEC,UAAU,GAAG,KAAK;EAC1F;EACAC,EAAE,GAAGA,CAAA,KAAM,CAAE,CAAC,EAAE;IACZ,IAAI,CAACzD,cAAc,IAAI,OAAOmC,UAAU,KAAK,QAAQ,EAAE;MACnD,OAAO,EAAE,CAAC;IACd;;IACA,IAAIuB,MAAM,GAAG,CAAC;IACd,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,KAAK,GAAG,KAAK;IACjB,IAAIC,cAAc,GAAG,KAAK;IAC1B,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,QAAQ,GAAG,KAAK;IACpB,IAAI5B,UAAU,CAACX,KAAK,CAAC,CAAC,EAAE,IAAI,CAACvE,MAAM,CAACoE,MAAM,CAAC,KAAK,IAAI,CAACpE,MAAM,IAAI,CAAC,IAAI,CAACK,aAAa,EAAE;MAChF;MACA6E,UAAU,GAAGA,UAAU,CAACX,KAAK,CAAC,IAAI,CAACvE,MAAM,CAACoE,MAAM,EAAEc,UAAU,CAACd,MAAM,CAAC;IACxE;IACA,IAAI,CAAC,CAAC,IAAI,CAACrE,MAAM,IAAImF,UAAU,EAAEd,MAAM,GAAG,CAAC,EAAE;MACzC;MACAc,UAAU,GAAG,IAAI,CAACD,oBAAoB,CAACC,UAAU,CAAC;IACtD;IACA,IAAIA,UAAU,KAAK,GAAG,IAAI,IAAI,CAAClF,MAAM,EAAE;MACnC;MACAkF,UAAU,GAAG,EAAE;IACnB;IACA,MAAM6B,UAAU,GAAG7B,UAAU,CAAC8B,QAAQ,CAAC,CAAC,CAAC/C,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC;IACpF,IAAI,IAAI,CAACrD,oBAAoB,IACzBsE,UAAU,CAACX,KAAK,CAACkC,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,4BAA4B;MACzE;MACAC,MAAM,IAAIxB,UAAU,CAACX,KAAK,CAACkC,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC;IAClD;IACA,IAAI1D,cAAc,KAAK,IAAI,CAAC,yBAAyB;MACjD,MAAMkE,QAAQ,GAAG/B,UAAU,CAACjB,KAAK,CAAC,GAAG,CAAC,wBAAwB,CAAC;MAC/D,IAAI,CAACiD,OAAO,GAAG,IAAI,CAACC,QAAQ,CAACF,QAAQ,CAAC;MACtC;MACAlE,cAAc,GAAG,iBAAiB;IACtC;IACA,MAAMqE,GAAG,GAAG,EAAE;IACd,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACd,MAAM,EAAEe,CAAC,EAAE,EAAE;MACxC,IAAID,UAAU,CAACC,CAAC,CAAC,EAAEjB,KAAK,CAAC,KAAK,CAAC,EAAE;QAC7BkD,GAAG,CAACC,IAAI,CAACnC,UAAU,CAACC,CAAC,CAAC,IAAI,EAAE,CAAC,iCAAiC,CAAC;MACnE;IACJ;;IACA,IAAIpC,cAAc,KAAK,UAAU,CAAC,+BAA+B;MAC7D,IAAI,CAACuE,YAAY,GAAGF,GAAG,CAAChD,MAAM,KAAK,EAAE,IAAIgD,GAAG,CAAChD,MAAM,KAAK,EAAE;MAC1D,IAAIgD,GAAG,CAAChD,MAAM,GAAG,EAAE,EAAE;QACjB;QACArB,cAAc,GAAG,oBAAoB;MACzC,CAAC,MACI;QACD;QACAA,cAAc,GAAG,gBAAgB;MACrC;IACJ;IACA,IAAIA,cAAc,CAACwE,UAAU,CAAC,SAAS,CAAC,4BAA4B,CAAC,EAAE;MACnE,IAAIrC,UAAU,CAAChB,KAAK,CAAC,aAAa,CAAC;MAC/B;MACCgB,UAAU,CAAChB,KAAK,CAAC,oCAAoC,CAAC,IAAI,CAACqC,UAAW,EAAE;QACzE;QACArB,UAAU,GAAG,IAAI,CAACsC,eAAe,CAACtC,UAAU,CAAC;QAC7C,MAAM3B,SAAS,GAAG,IAAI,CAACwB,YAAY,CAAChC,cAAc,CAAC;QACnD;QACAmC,UAAU,GAAG,IAAI,CAACI,mBAAmB,CAACJ,UAAU,EAAE3B,SAAS,EAAE,IAAI,CAACrD,aAAa,CAAC;MACpF;MACA,MAAMA,aAAa,GAAG,OAAO,IAAI,CAACA,aAAa,KAAK,QAAQ,GAAG,IAAI,CAACA,aAAa,GAAG,GAAG,CAAC;MACxF,IAAIgF,UAAU,CAACnB,OAAO,CAAC7D,aAAa,CAAC,GAAG,CAAC,IACrC,CAAC,IAAI,CAACyE,UAAU,CAACO,UAAU,CAACR,SAAS,CAAC,CAAC,EAAEQ,UAAU,CAACnB,OAAO,CAAC7D,aAAa,CAAC,CAAC,CAAC,EAAE;QAC9E,IAAIuH,IAAI,GAAGvC,UAAU,CAACR,SAAS,CAAC,CAAC,EAAEQ,UAAU,CAACnB,OAAO,CAAC7D,aAAa,CAAC,GAAG,CAAC,CAAC;QACzE,IAAI,IAAI,CAACU,oBAAoB,IACzBsE,UAAU,CAACX,KAAK,CAACkC,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,8BAC7C,CAACF,UAAU,EAAE;UACbkB,IAAI,GAAGvC,UAAU,CAACR,SAAS,CAAC,CAAC,EAAEQ,UAAU,CAACnB,OAAO,CAAC7D,aAAa,CAAC,CAAC;QACrE;QACA;QACAgF,UAAU,GAAI,GAAEuC,IAAK,GAAEvC,UAAU,CAACR,SAAS,CAACQ,UAAU,CAACnB,OAAO,CAAC7D,aAAa,CAAC,EAAEgF,UAAU,CAACd,MAAM,CAAE,EAAC;MACvG;MACA,IAAI/C,KAAK,GAAG,EAAE;MACd,IAAI,CAACT,oBAAoB,IACrBsE,UAAU,CAACX,KAAK,CAACkC,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,6BAC1CpF,KAAK,GAAG6D,UAAU,CAACX,KAAK,CAACkC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGvB,UAAU,CAACd,MAAM,CAAC,GAChE/C,KAAK,GAAG6D,UAAW;MAC1B,IAAI,IAAI,CAACP,UAAU,CAACtD,KAAK,CAAC,EAAE;QACxBqF,MAAM,GAAG,IAAI,CAACgB,iBAAiB,CAACxC,UAAU,CAAC;MAC/C,CAAC,MACI;QACDwB,MAAM,GAAG,IAAI,CAACgB,iBAAiB,CAACxC,UAAU,CAACR,SAAS,CAAC,CAAC,EAAEQ,UAAU,CAACd,MAAM,GAAG,CAAC,CAAC,CAAC;MACnF;IACJ,CAAC,MACI,IAAIrB,cAAc,CAACwE,UAAU,CAAC,WAAW,CAAC,8BAA8B,CAAC,EAAE;MAC5E,IAAIrC,UAAU,CAAChB,KAAK,CAAC,WAAW,CAAC,IAC7BgB,UAAU,CAAChB,KAAK,CAAC,SAAS,CAAC,IAC3BgB,UAAU,CAAChB,KAAK,CAAC,aAAa,CAAC,IAC/BgB,UAAU,CAAChB,KAAK,CAAC,sCAAsC,CAAC,IACxDgB,UAAU,CAAChB,KAAK,CAAC,eAAe,CAAC,EAAE;QACnC;QACAgB,UAAU,GAAG,IAAI,CAACsC,eAAe,CAACtC,UAAU,CAAC;MACjD;MACA;MACAA,UAAU,GACNA,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,IAAI,CAACtE,oBAAoB,GAC5CsE,UAAU,CAACd,MAAM,GAAG,CAAC,IACnBc,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,IACrBA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,CAACjF,iBAAiB,IACxC,CAAC,IAAI,CAAC8F,kBAAkB,CAACb,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAChF,aAAa,EAAE,IAAI,CAACD,iBAAiB,CAAC,IACnF,CAACsG,UAAU,GACTrB,UAAU,CAACX,KAAK,CAAC,CAAC,EAAEW,UAAU,CAACd,MAAM,GAAG,CAAC,CAAC,GAC1Cc,UAAU,GACdA,UAAU,CAACd,MAAM,GAAG,CAAC,IACnBc,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,IACrBA,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,CAACjF,iBAAiB,IACxC,CAAC,IAAI,CAAC8F,kBAAkB,CAACb,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAChF,aAAa,EAAE,IAAI,CAACD,iBAAiB,CAAC,IACnF,CAACsG,UAAU,GACTrB,UAAU,CAACX,KAAK,CAAC,CAAC,EAAEW,UAAU,CAACd,MAAM,GAAG,CAAC,CAAC,GAC1Cc,UAAU;MACxB,IAAIqB,UAAU,EAAE;QACZ;QACArB,UAAU,GAAG,IAAI,CAACa,kBAAkB,CAACb,UAAU,CAACA,UAAU,CAACd,MAAM,GAAG,CAAC,CAAC,EAAE,IAAI,CAAClE,aAAa,EAAE,IAAI,CAACD,iBAAiB,CAAC,GAC7GiF,UAAU,CAACX,KAAK,CAAC,CAAC,EAAEW,UAAU,CAACd,MAAM,GAAG,CAAC,CAAC,GAC1Cc,UAAU;MACpB;MACA;MACA;MACA,MAAMyC,4BAA4B,GAAG,IAAI,CAAChC,uBAAuB,CAAC,IAAI,CAAC1F,iBAAiB,CAAC;MACzF,IAAI2H,YAAY,GAAG,0CAA0C,CAACtD,OAAO,CAACqD,4BAA4B,EAAE,EAAE,CAAC;MACvG;MACA,IAAIjE,KAAK,CAACC,OAAO,CAAC,IAAI,CAACzD,aAAa,CAAC,EAAE;QACnC,KAAK,MAAMqF,MAAM,IAAI,IAAI,CAACrF,aAAa,EAAE;UACrC0H,YAAY,GAAGA,YAAY,CAACtD,OAAO,CAAC,IAAI,CAACqB,uBAAuB,CAACJ,MAAM,CAAC,EAAE,EAAE,CAAC,iCAAiC,CAAC;QACnH;MACJ,CAAC,MACI;QACDqC,YAAY,GAAGA,YAAY,CAACtD,OAAO,CAAC,IAAI,CAACqB,uBAAuB,CAAC,IAAI,CAACzF,aAAa,CAAC,EAAE,EAAE,CAAC;MAC7F;MACA,MAAM2H,iBAAiB,GAAG,IAAInG,MAAM,CAAC,GAAG,GAAGkG,YAAY,GAAG,GAAG,CAAC;MAC9D,IAAI1C,UAAU,CAAChB,KAAK,CAAC2D,iBAAiB,CAAC,IAClC3C,UAAU,CAACd,MAAM,KAAK,CAAC,IACpB,IAAI,CAAC2B,kBAAkB,CAACb,UAAU,EAAE,IAAI,CAAChF,aAAa,EAAE,IAAI,CAACD,iBAAiB,CAAE,EAAE;QACtF;QACAiF,UAAU,GAAGA,UAAU,CAACR,SAAS,CAAC,CAAC,EAAEQ,UAAU,CAACd,MAAM,GAAG,CAAC,CAAC;MAC/D;MACA,MAAMb,SAAS,GAAG,IAAI,CAACwB,YAAY,CAAChC,cAAc,CAAC;MACnD;MACAmC,UAAU,GAAG,IAAI,CAACI,mBAAmB,CAACJ,UAAU,EAAE3B,SAAS,EAAE,IAAI,CAACrD,aAAa,CAAC;MAChF,MAAM4H,SAAS,GAAG5C,UAAU,CAACZ,OAAO,CAAC,IAAI5C,MAAM,CAACiG,4BAA4B,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;MACvFjB,MAAM,GAAG,IAAI,CAACvD,qBAAqB,CAAC2E,SAAS,EAAE,IAAI,CAAC7H,iBAAiB,EAAE,IAAI,CAACC,aAAa,EAAEqD,SAAS,CAAC;MACrG,MAAMwE,UAAU,GAAGrB,MAAM,CAAC3C,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,GAAGmB,UAAU,CAACnB,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC;MACtH,MAAMiE,SAAS,GAAGtB,MAAM,CAACtC,MAAM,GAAGc,UAAU,CAACd,MAAM;MACnD,IAAI4D,SAAS,GAAG,CAAC,IAAItB,MAAM,CAACL,QAAQ,CAAC,KAAK,IAAI,CAACpG,iBAAiB,EAAE;QAC9D2G,cAAc,GAAG,IAAI;QACrB,IAAI/D,MAAM,GAAG,CAAC;QACd,GAAG;UACC,IAAI,CAACA,MAAM,CAACoF,GAAG,CAAC5B,QAAQ,GAAGxD,MAAM,CAAC;UAClCA,MAAM,EAAE;QACZ,CAAC,QAAQA,MAAM,GAAGmF,SAAS;MAC/B,CAAC,MACI,IAAItB,MAAM,CAACL,QAAQ,GAAG,CAAC,CAAC,KAAK,IAAI,CAACnG,aAAa,IAChD8H,SAAS,KAAK,CAAC,CAAC,IAChBA,SAAS,KAAK,CAAC,CAAC,IAChBtB,MAAM,CAACL,QAAQ,CAAC,KAAK,GAAG,CAAC,4BAA4B;QACrD,IAAI,CAACxD,MAAM,CAACqF,KAAK,CAAC,CAAC;QACnB,IAAI,CAACrF,MAAM,CAACoF,GAAG,CAAC5B,QAAQ,GAAG,CAAC,CAAC;MACjC,CAAC,MACI,IAAK0B,UAAU,KAAK,CAAC,IACtB1B,QAAQ,GAAG,CAAC,IACZ,EAAEK,MAAM,CAAC3C,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,IAAIsC,QAAQ,IAAIA,QAAQ,GAAG,CAAC,CAAC,IAC5E,EAAEK,MAAM,CAAC3C,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,IAAIsC,QAAQ,IAAIA,QAAQ,GAAG,CAAC,CAAC,IACxE2B,SAAS,IAAI,CAAE,EAAE;QACrB,IAAI,CAACnF,MAAM,CAACqF,KAAK,CAAC,CAAC;QACnBtB,cAAc,GAAG,IAAI;QACrBC,KAAK,GAAGmB,SAAS;QACjB;QACA3B,QAAQ,IAAI2B,SAAS;QACrB,IAAI,CAACnF,MAAM,CAACoF,GAAG,CAAC5B,QAAQ,CAAC;MAC7B,CAAC,MACI;QACD,IAAI,CAACxD,MAAM,CAACqF,KAAK,CAAC,CAAC;MACvB;IACJ,CAAC,MACI;MACD;MACA;MACA,IAAI/C,CAAC,GAAG,CAAC,EAAEgD,WAAW,GAAGpB,UAAU,CAAC,CAAC,CAAC,EAAE5B,CAAC,GAAG4B,UAAU,CAAC3C,MAAM,EAAEe,CAAC,EAAE,EAAEgD,WAAW,GAAGpB,UAAU,CAAC5B,CAAC,CAAC,IAAI,EAAE,CAAC,mCAAmC;QACrI,IAAIsB,MAAM,KAAK1D,cAAc,CAACqB,MAAM,EAAE;UAClC;QACJ;QACA,MAAMgE,mBAAmB,IAAG,GAAG,CAAC,oCAAoC,IAAI,CAAC5G,QAAQ;QACjF,IAAI,IAAI,CAAC6G,gBAAgB,CAACF,WAAW,EAAEpF,cAAc,CAAC0D,MAAM,CAAC,IAAI,EAAE,CAAC,iCAAiC,CAAC,IAClG1D,cAAc,CAAC0D,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,sCAAsC;UACzEC,MAAM,IAAIyB,WAAW;UACrB1B,MAAM,IAAI,CAAC;QACf,CAAC,MACI,IAAI1D,cAAc,CAAC0D,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,oCACxCE,KAAK,IACL,IAAI,CAAC0B,gBAAgB,CAACF,WAAW,EAAEpF,cAAc,CAAC0D,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,iCAAiC,CAAC,EAAE;UACxGC,MAAM,IAAIyB,WAAW;UACrB1B,MAAM,IAAI,CAAC;UACXE,KAAK,GAAG,KAAK;QACjB,CAAC,MACI,IAAI,IAAI,CAAC0B,gBAAgB,CAACF,WAAW,EAAEpF,cAAc,CAAC0D,MAAM,CAAC,IAAI,EAAE,CAAC,iCAAiC,CAAC,IACvG1D,cAAc,CAAC0D,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,oCACnC,CAAC2B,mBAAmB,EAAE;UACtB1B,MAAM,IAAIyB,WAAW;UACrBxB,KAAK,GAAG,IAAI;QAChB,CAAC,MACI,IAAI5D,cAAc,CAAC0D,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,wCACxC,IAAI,CAAC4B,gBAAgB,CAACF,WAAW,EAAEpF,cAAc,CAAC0D,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,iCAAiC,CAAC,EAAE;UACxGC,MAAM,IAAIyB,WAAW;UACrB1B,MAAM,IAAI,CAAC;QACf,CAAC,MACI,IAAI,IAAI,CAAC4B,gBAAgB,CAACF,WAAW,EAAEpF,cAAc,CAAC0D,MAAM,CAAC,IAAI,EAAE,CAAC,iCAAiC,CAAC,EAAE;UACzG,IAAI1D,cAAc,CAAC0D,MAAM,CAAC,KAAK,GAAG,CAAC,4BAA4B;YAC3D,IAAI,IAAI,CAACzF,GAAG,GAAG6D,MAAM,CAACsD,WAAW,CAAC,GAAG,CAAC,GAAGtD,MAAM,CAACsD,WAAW,CAAC,GAAG,CAAC,EAAE;cAC9D;cACA9B,QAAQ,GAAG,CAAC,IAAI,CAACtF,gBAAgB,GAAGsF,QAAQ,GAAG,CAAC,GAAGA,QAAQ;cAC3DI,MAAM,IAAI,CAAC;cACX,IAAI,CAAC6B,UAAU,CAACvF,cAAc,EAAE0D,MAAM,EAAEM,UAAU,CAAC3C,MAAM,CAAC;cAC1De,CAAC,EAAE;cACH,IAAI,IAAI,CAACpE,gBAAgB,EAAE;gBACvB2F,MAAM,IAAI,GAAG;cACjB;cACA;YACJ;UACJ;UACA,IAAI3D,cAAc,CAAC0D,MAAM,CAAC,KAAK,GAAG,CAAC,2BAA2B;YAC1D,IAAI,IAAI,CAACzF,GAAG,GACL0F,MAAM,CAACtC,MAAM,KAAK,CAAC,IAAIS,MAAM,CAAC6B,MAAM,CAAC,GAAG,CAAC,IACvCA,MAAM,KAAK,GAAG,IAAI7B,MAAM,CAACsD,WAAW,CAAC,GAAG,CAAE,IAC1CjD,UAAU,CAACX,KAAK,CAACkC,MAAM,GAAG,CAAC,EAAEA,MAAM,CAAC,CAACrC,MAAM,KAAK,CAAC,IAC9CS,MAAM,CAACK,UAAU,CAACX,KAAK,CAACkC,MAAM,GAAG,CAAC,EAAEA,MAAM,CAAC,CAAC,GAAG,CAAE,IACpDvB,UAAU,CAACX,KAAK,CAACkC,MAAM,GAAG,CAAC,EAAEA,MAAM,CAAC,KAAK,GAAG,IACzC5B,MAAM,CAACsD,WAAW,CAAC,GAAG,CAAE,GAC7BzB,MAAM,KAAK,GAAG,IAAI7B,MAAM,CAACsD,WAAW,CAAC,GAAG,CAAC,IACvC,CAACzB,MAAM,CAACnC,KAAK,CAACkC,MAAM,GAAG,CAAC,EAAEA,MAAM,CAAC,KAAK,GAAG,IACtCC,MAAM,CAACnC,KAAK,CAACkC,MAAM,GAAG,CAAC,EAAEA,MAAM,CAAC,KAAK,GAAG,IACxCC,MAAM,CAACnC,KAAK,CAACkC,MAAM,GAAG,CAAC,EAAEA,MAAM,CAAC,KAAK,GAAG,IACxCC,MAAM,CAACnC,KAAK,CAACkC,MAAM,GAAG,CAAC,EAAEA,MAAM,CAAC,KAAK,GAAG,KACxC5B,MAAM,CAACsD,WAAW,CAAC,GAAG,CAAC,IACvB1B,MAAM,GAAG,EAAG,EAAE;cACtB;cACAJ,QAAQ,GAAGA,QAAQ,GAAG,CAAC;cACvBI,MAAM,IAAI,CAAC;cACXtB,CAAC,EAAE;cACH;YACJ;UACJ;UACA,IAAIpC,cAAc,CAAC0D,MAAM,CAAC,KAAK,GAAG,CAAC,+BAC/B1D,cAAc,CAAC0D,MAAM,CAAC,KAAK,GAAG,CAAC,6BAA6B;YAC5D,IAAI5B,MAAM,CAACsD,WAAW,CAAC,GAAG,CAAC,EAAE;cACzB;cACA9B,QAAQ,GAAG,CAAC,IAAI,CAACtF,gBAAgB,GAAGsF,QAAQ,GAAG,CAAC,GAAGA,QAAQ;cAC3DI,MAAM,IAAI,CAAC;cACX,IAAI,CAAC6B,UAAU,CAACvF,cAAc,EAAE0D,MAAM,EAAEM,UAAU,CAAC3C,MAAM,CAAC;cAC1De,CAAC,EAAE;cACH,IAAI,IAAI,CAACpE,gBAAgB,EAAE;gBACvB2F,MAAM,IAAI,GAAG;cACjB;cACA;YACJ;UACJ;UACA,MAAM6B,SAAS,GAAG,EAAE;UACpB,MAAMC,gBAAgB,GAAGtD,UAAU,CAACuB,MAAM,CAAC;UAC3C,MAAMgC,uBAAuB,GAAGvD,UAAU,CAACuB,MAAM,GAAG,CAAC,CAAC;UACtD,MAAMiC,uBAAuB,GAAGxD,UAAU,CAACuB,MAAM,GAAG,CAAC,CAAC;UACtD,MAAMkC,wBAAwB,GAAGzD,UAAU,CAACuB,MAAM,GAAG,CAAC,CAAC;UACvD,MAAMmC,wBAAwB,GAAG1D,UAAU,CAACuB,MAAM,GAAG,CAAC,CAAC;UACvD,MAAMoC,0BAA0B,GAAG3D,UAAU,CAACuB,MAAM,GAAG,CAAC,CAAC;UACzD,MAAMqC,iCAAiC,GAAG5D,UAAU,CAACX,KAAK,CAACkC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG,CAAC,CAAC;UAClF,MAAMsC,8BAA8B,GAAG7D,UAAU,CAACX,KAAK,CAACkC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG,CAAC,CAAC;UAC/E,MAAMuC,4BAA4B,GAAG9D,UAAU,CAACX,KAAK,CAACkC,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC;UACzE,MAAMwC,6BAA6B,GAAG/D,UAAU,CAACX,KAAK,CAACkC,MAAM,GAAG,CAAC,EAAEA,MAAM,CAAC;UAC1E,IAAI1D,cAAc,CAAC0D,MAAM,CAAC,KAAK,GAAG,CAAC,0BAA0B;YACzD,MAAMyC,kBAAkB,GAAGnG,cAAc,CAACwB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC;YAC/D,MAAM4E,mBAAmB,GAAGpG,cAAc,CAACwB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,+BAC5D,IAAI,CAACzD,iBAAiB,CAACuE,QAAQ,CAACuD,wBAAwB,CAAC;YAC7D,IAAK/D,MAAM,CAACsD,WAAW,CAAC,GAAG,CAAC,IAAI,IAAI,CAACpH,gBAAgB,IAChD,CAACmI,kBAAkB,KACfrE,MAAM,CAACmE,4BAA4B,CAAC,GAAGT,SAAS,IAC7C1D,MAAM,CAACkE,8BAA8B,CAAC,GAAGR,SAAS,IAClD,IAAI,CAACzH,iBAAiB,CAACuE,QAAQ,CAACoD,uBAAuB,CAAC,CAAE,KACjEU,mBAAmB,GACdtE,MAAM,CAACkE,8BAA8B,CAAC,GAAGR,SAAS,IAC/C,CAAC,IAAI,CAACzH,iBAAiB,CAACuE,QAAQ,CAACmD,gBAAgB,CAAC,IAC/C,IAAI,CAAC1H,iBAAiB,CAACuE,QAAQ,CAACqD,uBAAuB,CAAE,IAC7D,IAAI,CAAC5H,iBAAiB,CAACuE,QAAQ,CAACmD,gBAAgB,CAAC,GACnD3D,MAAM,CAACmE,4BAA4B,CAAC,GAAGT,SAAS,IAC9C,IAAI,CAACzH,iBAAiB,CAACuE,QAAQ,CAACoD,uBAAuB,CAAC,CAAC,EAAE;cACnE;cACApC,QAAQ,GAAG,CAAC,IAAI,CAACtF,gBAAgB,GAAGsF,QAAQ,GAAG,CAAC,GAAGA,QAAQ;cAC3DI,MAAM,IAAI,CAAC;cACX,IAAI,CAAC6B,UAAU,CAACvF,cAAc,EAAE0D,MAAM,EAAEM,UAAU,CAAC3C,MAAM,CAAC;cAC1De,CAAC,EAAE;cACH,IAAI,IAAI,CAACpE,gBAAgB,EAAE;gBACvB2F,MAAM,IAAI,GAAG;cACjB;cACA;YACJ;UACJ;UACA,IAAI3D,cAAc,CAAC0D,MAAM,CAAC,KAAK,GAAG,CAAC,4BAA4B;YAC3D,MAAM2C,WAAW,GAAG,EAAE;YACtB;YACA,MAAMC,WAAW,GAAG5C,MAAM,KAAK,CAAC,KAC3B5B,MAAM,CAACsD,WAAW,CAAC,GAAG,CAAC,IACpBtD,MAAM,CAACmE,4BAA4B,CAAC,GAAGI,WAAW,IAClD,IAAI,CAACtI,iBAAiB,CAACuE,QAAQ,CAACoD,uBAAuB,CAAC,CAAC;YACjE;YACA,MAAMa,YAAY,GAAGvG,cAAc,CAACwB,KAAK,CAACkC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG,CAAC,CAAC;YACjE,MAAM8C,cAAc,GAAGT,iCAAiC,CAACzD,QAAQ,CAACiE,YAAY,CAAC,KACzE,IAAI,CAACxI,iBAAiB,CAACuE,QAAQ,CAACuD,wBAAwB,CAAC,IACvD/D,MAAM,CAACkE,8BAA8B,CAAC,GAAGK,WAAW,IACpD,CAAC,IAAI,CAACtI,iBAAiB,CAACuE,QAAQ,CAACmD,gBAAgB,CAAC,IAClD,IAAI,CAAC1H,iBAAiB,CAACuE,QAAQ,CAACmD,gBAAgB,CAAC,IAChD,IAAI,CAAC1H,iBAAiB,CAACuE,QAAQ,CAACwD,0BAA0B,CAAC,IACxDhE,MAAM,CAACoE,6BAA6B,CAAC,GAAGG,WAAW,IACnD,CAAC,IAAI,CAACtI,iBAAiB,CAACuE,QAAQ,CAACsD,wBAAwB,CAAE,IAC/D,IAAI,CAAC7H,iBAAiB,CAACuE,QAAQ,CAACsD,wBAAwB,CAAC,CAAC;YAClE;YACA,MAAMa,cAAc,GAAG3E,MAAM,CAACiE,iCAAiC,CAAC,IAAIP,SAAS,IACzE,CAAC,IAAI,CAACzH,iBAAiB,CAACuE,QAAQ,CAACyD,iCAAiC,CAAC,IACnE,IAAI,CAAChI,iBAAiB,CAACuE,QAAQ,CAACsD,wBAAwB,CAAC,KACxD9D,MAAM,CAACmE,4BAA4B,CAAC,GAAGI,WAAW,IAC/C,IAAI,CAACtI,iBAAiB,CAACuE,QAAQ,CAACoD,uBAAuB,CAAC,CAAC;YACjE;YACA,MAAMgB,iBAAiB,GAAI5E,MAAM,CAACmE,4BAA4B,CAAC,GAAGI,WAAW,IAAI3C,MAAM,KAAK,CAAC,IACxF,IAAI,CAAC3F,iBAAiB,CAACuE,QAAQ,CAACoD,uBAAuB,CAAC,IACrDhC,MAAM,KAAK,CAAE;YACrB;YACA,MAAMiD,cAAc,GAAG7E,MAAM,CAACiE,iCAAiC,CAAC,GAAGP,SAAS,IACxE,CAAC,IAAI,CAACzH,iBAAiB,CAACuE,QAAQ,CAACyD,iCAAiC,CAAC,IACnE,CAAC,IAAI,CAAChI,iBAAiB,CAACuE,QAAQ,CAAC4D,6BAA6B,CAAC,IAC/DpE,MAAM,CAACoE,6BAA6B,CAAC,GAAGG,WAAW;YACvD;YACA,MAAMO,cAAc,GAAG9E,MAAM,CAACiE,iCAAiC,CAAC,IAAIP,SAAS,IACzE,CAAC,IAAI,CAACzH,iBAAiB,CAACuE,QAAQ,CAACyD,iCAAiC,CAAC,IACnE,CAAC,IAAI,CAAChI,iBAAiB,CAACuE,QAAQ,CAACsD,wBAAwB,CAAC,IAC1D9D,MAAM,CAACkE,8BAA8B,CAAC,GAAGK,WAAW;YACxD,IAAKvE,MAAM,CAACsD,WAAW,CAAC,GAAG,CAAC,IAAI,IAAI,CAACpH,gBAAgB,IACjDsI,WAAW,IACXE,cAAc,IACdI,cAAc,IACdD,cAAc,IACdF,cAAc,IACbC,iBAAiB,IAAI,CAAC,IAAI,CAAC1I,gBAAiB,EAAE;cAC/C;cACAsF,QAAQ,GAAG,CAAC,IAAI,CAACtF,gBAAgB,GAAGsF,QAAQ,GAAG,CAAC,GAAGA,QAAQ;cAC3DI,MAAM,IAAI,CAAC;cACX,IAAI,CAAC6B,UAAU,CAACvF,cAAc,EAAE0D,MAAM,EAAEM,UAAU,CAAC3C,MAAM,CAAC;cAC1De,CAAC,EAAE;cACH,IAAI,IAAI,CAACpE,gBAAgB,EAAE;gBACvB2F,MAAM,IAAI,GAAG;cACjB;cACA;YACJ;UACJ;UACAA,MAAM,IAAIyB,WAAW;UACrB1B,MAAM,EAAE;QACZ,CAAC,MACI,IAAK0B,WAAW,KAAK,GAAG,CAAC,oCAC1BpF,cAAc,CAAC0D,MAAM,CAAC,KAAK,GAAG,CAAC,oCAC9B0B,WAAW,KAAK,GAAG,CAAC,8BACjBpF,cAAc,CAAC0D,MAAM,CAAC,KAAK,GAAG,CAAC,0BAA2B,EAAE;UAChEC,MAAM,IAAIyB,WAAW;UACrB1B,MAAM,EAAE;QACZ,CAAC,MACI,IAAI,IAAI,CAAC3F,iBAAiB,CAACiD,OAAO,CAAChB,cAAc,CAAC0D,MAAM,CAAC,IAAI,EAAE,CAAC,iCAAiC,CAAC,KAAK,CAAC,CAAC,EAAE;UAC5GC,MAAM,IAAI3D,cAAc,CAAC0D,MAAM,CAAC;UAChCA,MAAM,EAAE;UACR,IAAI,CAAC6B,UAAU,CAACvF,cAAc,EAAE0D,MAAM,EAAEM,UAAU,CAAC3C,MAAM,CAAC;UAC1De,CAAC,EAAE;QACP,CAAC,MACI,IAAIpC,cAAc,CAAC0D,MAAM,CAAC,KAAK,GAAG,CAAC,oCACpC,IAAI,CAACpG,aAAa,EAAE;UACpB,IAAI,CAACiI,UAAU,CAACvF,cAAc,EAAE0D,MAAM,EAAEM,UAAU,CAAC3C,MAAM,CAAC;QAC9D,CAAC,MACI,IAAI,IAAI,CAAC5C,QAAQ,CAACuB,cAAc,CAAC0D,MAAM,CAAC,IAAI,EAAE,CAAC,kCAAkC,IAClF,IAAI,CAACjF,QAAQ,CAACuB,cAAc,CAAC0D,MAAM,CAAC,IAAI,EAAE,CAAC,kCAAkC,EAAE9E,QAAQ,EAAE;UACzF,IAAI,CAAC,CAACoF,UAAU,CAACN,MAAM,CAAC,IACpB1D,cAAc,KAAK,iBAAiB,IACpCA,cAAc,KAAK,gBAAgB,IACnCA,cAAc,KAAK,oBAAoB,IACvC,CAACA,cAAc,CAACmB,KAAK,CAAC,UAAU,CAAC,IACjC,CAAC,IAAI,CAAC1C,QAAQ,CAACuB,cAAc,CAAC0D,MAAM,CAAC,IAAI,EAAE,CAAC,kCAAkC,EACxE9E,QAAQ,EAAE;YAChB+E,MAAM,IAAIK,UAAU,CAACN,MAAM,CAAC;UAChC;UACA,IAAI1D,cAAc,CAACsC,QAAQ,CAAC,GAAG,CAAC,mCAAmC,GAAG,CAAC,gCAAgC,CAAC,IACpGtC,cAAc,CAACsC,QAAQ,CAAC,GAAG,CAAC,mCAAmC,GAAG,CAAC,gCAAgC,CAAC,EAAE;YACtGoB,MAAM,EAAE;UACZ;UACAA,MAAM,EAAE;UACRtB,CAAC,EAAE;QACP,CAAC,MACI,IAAI,IAAI,CAACpC,cAAc,CAAC0D,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,oCAC7C,IAAI,CAACmD,gBAAgB,CAAC,IAAI,CAAC7G,cAAc,CAAC0D,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,iCAAiC,CAAC,IAC9F,IAAI,CAACmD,gBAAgB,CAACzB,WAAW,CAAC,KAAK,IAAI,CAACpF,cAAc,CAAC0D,MAAM,GAAG,CAAC,CAAC,IACtEE,KAAK,EAAE;UACPF,MAAM,IAAI,CAAC;UACXC,MAAM,IAAIyB,WAAW;QACzB,CAAC,MACI,IAAI,IAAI,CAACpF,cAAc,CAAC0D,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,wCAC7C,IAAI,CAACmD,gBAAgB,CAAC,IAAI,CAAC7G,cAAc,CAAC0D,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,iCAAiC,CAAC,IAC9F,IAAI,CAACmD,gBAAgB,CAACzB,WAAW,CAAC,KAAK,IAAI,CAACpF,cAAc,CAAC0D,MAAM,GAAG,CAAC,CAAC,IACtEE,KAAK,EAAE;UACPF,MAAM,IAAI,CAAC;UACXC,MAAM,IAAIyB,WAAW;QACzB,CAAC,MACI,IAAI,IAAI,CAAC9H,aAAa,IACvB,IAAI,CAACS,iBAAiB,CAACiD,OAAO,CAACoE,WAAW,CAAC,GAAG,CAAC,IAC/CA,WAAW,KAAK,IAAI,CAAC7H,oBAAoB,IACzC,IAAI,CAACA,oBAAoB,CAAC8D,MAAM,KAAK,CAAC,EAAE;UACxC0C,QAAQ,GAAG,IAAI;QACnB;MACJ;IACJ;IACA,IAAIJ,MAAM,CAACtC,MAAM,GAAG,CAAC,KAAKrB,cAAc,CAACqB,MAAM,IAC3C,IAAI,CAACtD,iBAAiB,CAACiD,OAAO,CAAChB,cAAc,CAACA,cAAc,CAACqB,MAAM,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,iCAAiC,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1HsC,MAAM,IAAI3D,cAAc,CAACA,cAAc,CAACqB,MAAM,GAAG,CAAC,CAAC;IACvD;IACA,IAAIyF,WAAW,GAAGxD,QAAQ,GAAG,CAAC;IAC9B,OAAO,IAAI,CAACxD,MAAM,CAACiH,GAAG,CAACD,WAAW,CAAC,EAAE;MACjChD,KAAK,EAAE;MACPgD,WAAW,EAAE;IACjB;IACA,IAAIE,WAAW,GAAGzD,UAAU,IAAI,CAACvD,cAAc,CAACwE,UAAU,CAAC,WAAW,CAAC,8BAA8B,CAAC,GAChGd,MAAM,GACN,IAAI,CAAC5D,MAAM,CAACiH,GAAG,CAACzD,QAAQ,CAAC,GACrBQ,KAAK,GACL,CAAC;IACX,IAAIC,QAAQ,EAAE;MACViD,WAAW,EAAE;IACjB;IACAvD,EAAE,CAACuD,WAAW,EAAEnD,cAAc,CAAC;IAC/B,IAAIC,KAAK,GAAG,CAAC,EAAE;MACX,IAAI,CAAChE,MAAM,CAACqF,KAAK,CAAC,CAAC;IACvB;IACA,IAAI8B,WAAW,GAAG,KAAK;IACvB,IAAIzD,UAAU,EAAE;MACZyD,WAAW,GAAGjD,UAAU,CAACkD,KAAK,CAAEC,IAAI,IAAK,IAAI,CAACpJ,iBAAiB,CAACuE,QAAQ,CAAC6E,IAAI,CAAC,CAAC;IACnF;IACA,IAAI7F,GAAG,GAAI,GAAE,IAAI,CAACrE,MAAO,GAAEgK,WAAW,GAAG,EAAE,CAAC,oCAAoCtD,MAAO,GAAE,IAAI,CAAC3G,MAAO,EAAC;IACtG,IAAI2G,MAAM,CAACtC,MAAM,KAAK,CAAC,EAAE;MACrBC,GAAG,GAAG,CAAC,IAAI,CAAC9D,qBAAqB,GAAI,GAAE,IAAI,CAACP,MAAO,GAAE0G,MAAO,EAAC,GAAI,GAAEA,MAAO,EAAC;IAC/E;IACA,IAAIA,MAAM,CAACrB,QAAQ,CAAC,GAAG,CAAC,0BAA0B,CAAC,IAAI,IAAI,CAACrF,MAAM,IAAI,IAAI,CAACY,oBAAoB,EAAE;MAC7F,IAAI2F,UAAU,IAAIG,MAAM,KAAK,GAAG,CAAC,4BAA4B;QACzD,OAAO,EAAE;MACb;MACArC,GAAG,GAAI,GAAE,GAAG,CAAC,0BAA2B,GAAE,IAAI,CAACrE,MAAO,GAAE0G,MAAM,CACzDzC,KAAK,CAAC,GAAG,CAAC,0BAA0B,CAAC,CACrCD,IAAI,CAAC,EAAE,CAAC,iCAAiC,CAAE,GAAE,IAAI,CAACjE,MAAO,EAAC;IACnE;IACA,OAAOsE,GAAG;EACd;EACA8F,oBAAoBA,CAAChC,WAAW,EAAE;IAC9B,IAAIzE,KAAK,CAACC,OAAO,CAAC,IAAI,CAACpD,qBAAqB,CAAC,EAAE;MAC3C,OAAO,IAAI,CAACA,qBAAqB,CAACiF,IAAI,CAAE4E,GAAG,IAAKA,GAAG,KAAKjC,WAAW,CAAC;IACxE;IACA,OAAO,IAAI,CAACyB,gBAAgB,CAACzB,WAAW,CAAC;EAC7C;EACAyB,gBAAgBA,CAACzB,WAAW,EAAE;IAC1B,OAAO,IAAI,CAACrH,iBAAiB,CAAC0E,IAAI,CAAE4E,GAAG,IAAKA,GAAG,KAAKjC,WAAW,CAAC;EACpE;EACAE,gBAAgBA,CAACF,WAAW,EAAEkC,UAAU,EAAE;IACtC,IAAI,CAAC7I,QAAQ,GAAG,IAAI,CAAC2E,aAAa,GAAG,IAAI,CAACA,aAAa,GAAG,IAAI,CAAC3E,QAAQ;IACvE,OAAQ,CAAC,IAAI,CAACA,QAAQ,CAAC6I,UAAU,CAAC,EAAE5I,OAAO,IACvC,IAAI,CAACD,QAAQ,CAAC6I,UAAU,CAAC,EAAE5I,OAAO,CAACgD,IAAI,CAAC0D,WAAW,CAAC,KACpD,KAAK;EACb;EACAX,eAAeA,CAACpE,GAAG,EAAE;IACjB,OAAOA,GAAG,CACLa,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC,CAC3CqG,MAAM,CAAC,CAACnF,CAAC,EAAEoF,GAAG,KAAK;MACpB,MAAMC,eAAe,GAAG,OAAO,IAAI,CAACtK,aAAa,KAAK,QAAQ,GACxDiF,CAAC,KAAK,IAAI,CAACjF,aAAa;MACxB;MACE,IAAI,CAACA,aAAa,CAACmF,QAAQ,CAACF,CAAC,CAAC;MACtC,OAAQA,CAAC,CAACjB,KAAK,CAAC,QAAQ,CAAC,IACrBiB,CAAC,KAAK,IAAI,CAAClF,iBAAiB,IAC5BuK,eAAe,IACdrF,CAAC,KAAK,GAAG,CAAC,8BAA8BoF,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC3J,oBAAqB;IACxF,CAAC,CAAC,CACGoD,IAAI,CAAC,EAAE,CAAC,iCAAiC,CAAC;EACnD;;EACA2B,uBAAuBA,CAACuE,IAAI,EAAE;IAC1B;IACA;IACA;IACA,IAAIA,IAAI,EAAE;MACN,MAAMO,aAAa,GAAG,cAAc;MACpC,OAAOP,IAAI,KAAK,GAAG,GAAG,KAAK,GAAGO,aAAa,CAAC1G,OAAO,CAACmG,IAAI,CAAC,IAAI,CAAC,GAAI,KAAIA,IAAK,EAAC,GAAGA,IAAI;IACvF;IACA,OAAOA,IAAI;EACf;EACA5B,UAAUA,CAACvF,cAAc,EAAE0D,MAAM,EAAEiE,WAAW,EAAE;IAC5C,MAAM1C,SAAS,GAAG,OAAO,CAACvD,IAAI,CAAC1B,cAAc,CAACwB,KAAK,CAAC,CAAC,EAAEkC,MAAM,CAAC,CAAC,GACzDiE,WAAW,GACXjE,MAAM;IACZ,IAAI,CAAC5D,MAAM,CAACoF,GAAG,CAACD,SAAS,GAAG,IAAI,CAAChI,MAAM,CAACoE,MAAM,IAAI,CAAC,CAAC;EACxD;EACA2B,kBAAkBA,CAAC1E,KAAK,EAAEsJ,aAAa,EAAEC,aAAa,EAAE;IACpD,OAAOlH,KAAK,CAACC,OAAO,CAACgH,aAAa,CAAC,GAC7BA,aAAa,CAACL,MAAM,CAAExG,CAAC,IAAKA,CAAC,KAAK8G,aAAa,CAAC,CAACvF,QAAQ,CAAChE,KAAK,CAAC,GAChEA,KAAK,KAAKsJ,aAAa;EACjC;EACAxD,QAAQA,CAACF,QAAQ,EAAE;IACf,OAAO,EAAEA,QAAQ,CAAC7C,MAAM,KAAK,CAAC,IAC1B,CAAC6C,QAAQ,CAAC4D,IAAI,CAAC,CAACxJ,KAAK,EAAEyJ,KAAK,KAAK;MAC7B,IAAI7D,QAAQ,CAAC7C,MAAM,KAAK0G,KAAK,GAAG,CAAC,EAAE;QAC/B,OAAOzJ,KAAK,KAAK,EAAE,CAAC,qCAAqCwD,MAAM,CAACxD,KAAK,CAAC,GAAG,GAAG;MAChF;MACA,OAAOA,KAAK,KAAK,EAAE,CAAC,qCAAqCwD,MAAM,CAACxD,KAAK,CAACqD,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG;IAChG,CAAC,CAAC,CAAC;EACX;EACAgD,iBAAiBA,CAACrG,KAAK,EAAE;IACrB,MAAM0J,YAAY,GAAG,OAAO,IAAI,CAAC7K,aAAa,KAAK,QAAQ,GACrDmB,KAAK,CAAC0C,OAAO,CAAC,IAAI,CAAC7D,aAAa,CAAC,GACjCmB,KAAK,CAAC0C,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC;IACjD,IAAIgH,YAAY,KAAK,CAAC,CAAC,EAAE;MACrB,MAAMC,WAAW,GAAGC,QAAQ,CAAC5J,KAAK,EAAE,EAAE,CAAC;MACvC,OAAOyD,KAAK,CAACkG,WAAW,CAAC,GAAG,EAAE,CAAC,oCAAoCA,WAAW,CAAChE,QAAQ,CAAC,CAAC;IAC7F,CAAC,MACI;MACD,MAAMkE,WAAW,GAAGD,QAAQ,CAAC5J,KAAK,CAACqD,SAAS,CAAC,CAAC,EAAEqG,YAAY,CAAC,EAAE,EAAE,CAAC;MAClE,MAAMI,WAAW,GAAG9J,KAAK,CAACqD,SAAS,CAACqG,YAAY,GAAG,CAAC,CAAC;MACrD,MAAMK,aAAa,GAAGtG,KAAK,CAACoG,WAAW,CAAC,GAAG,EAAE,GAAGA,WAAW,CAAClE,QAAQ,CAAC,CAAC;MACtE,MAAMqE,OAAO,GAAG,OAAO,IAAI,CAACnL,aAAa,KAAK,QAAQ,GAAG,IAAI,CAACA,aAAa,GAAG,GAAG,CAAC;MAClF,OAAOkL,aAAa,KAAK,EAAE,CAAC,oCACtB,EAAE,CAAC,oCACHA,aAAa,GAAGC,OAAO,GAAGF,WAAW;IAC/C;EACJ;EAAC,QAAAG,CAAA,GACQ,IAAI,CAACC,IAAI,YAAAC,8BAAAC,CAAA;IAAA,YAAAA,CAAA,IAAyF/I,qBAAqB;EAAA,CAAoD;EAAA,QAAAgJ,EAAA,GAC3K,IAAI,CAACC,KAAK,kBAD8EhN,EAAE,CAAAiN,kBAAA;IAAAC,KAAA,EACYnJ,qBAAqB;IAAAoJ,OAAA,EAArBpJ,qBAAqB,CAAA6I;EAAA,EAAG;AAC3I;AACA;EAAA,QAAAQ,SAAA,oBAAAA,SAAA,KAHqGpN,EAAE,CAAAqN,iBAAA,CAGXtJ,qBAAqB,EAAc,CAAC;IACpHuJ,IAAI,EAAElN;EACV,CAAC,CAAC;AAAA;AAEV,MAAMmN,cAAc,SAASxJ,qBAAqB,CAAC;EAC/CC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGwJ,SAAS,CAAC;IACnB,IAAI,CAACC,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB;AACR;AACA;AACA;IACQ,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,oBAAoB,GAAG,EAAE;IAC9B,IAAI,CAACvL,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAACwL,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB;IACA,IAAI,CAACC,QAAQ,GAAIxB,CAAC,IAAK,CAAE,CAAC;IAC1B,IAAI,CAACyB,WAAW,GAAGjO,MAAM,CAACE,UAAU,EAAE;MAAE2C,QAAQ,EAAE;IAAK,CAAC,CAAC;IACzD,IAAI,CAACqL,QAAQ,GAAGlO,MAAM,CAACU,QAAQ,CAAC;IAChC,IAAI,CAACoD,OAAO,GAAG9D,MAAM,CAACa,eAAe,CAAC;IACtC,IAAI,CAACsN,SAAS,GAAGnO,MAAM,CAACG,SAAS,EAAE;MAAE0C,QAAQ,EAAE;IAAK,CAAC,CAAC;EAC1D;EACA;EACAyE,SAASA,CAAClB,UAAU,EAAEnC,cAAc,EAAEsD,QAAQ,GAAG,CAAC,EAAEC,UAAU,GAAG,KAAK,EAAEC,UAAU,GAAG,KAAK;EAC1F;EACAC,EAAE,GAAGA,CAAA,KAAM,CAAE,CAAC,EAAE;IACZ,IAAI,CAACzD,cAAc,EAAE;MACjB,OAAOmC,UAAU,KAAK,IAAI,CAAClC,WAAW,GAAG,IAAI,CAACA,WAAW,GAAGkC,UAAU;IAC1E;IACA,IAAI,CAACmH,WAAW,GAAG,IAAI,CAAChM,aAAa,GAC/B,IAAI,CAAC6M,eAAe,CAAC,CAAC,GACtB,EAAE,CAAC;IACT,IAAI,IAAI,CAACnK,cAAc,KAAK,IAAI,CAAC,2BAA2B,IAAI,CAAC1C,aAAa,EAAE;MAC5E,IAAI,CAACgM,WAAW,GAAG,IAAI,CAACa,eAAe,CAAChI,UAAU,IAAI,GAAG,CAAC,yBAAyB,CAAC;IACxF;;IACA,IAAI,IAAI,CAACnC,cAAc,KAAK,UAAU,CAAC,iCAAiC,IAAI,CAAC1C,aAAa,EAAE;MACxF,IAAI,CAACgM,WAAW,GAAG,IAAI,CAACa,eAAe,CAAChI,UAAU,IAAI,GAAG,CAAC,yBAAyB,CAAC;IACxF;;IACA,IAAI,CAACA,UAAU,IAAI,IAAI,CAAC7E,aAAa,EAAE;MACnC,IAAI,CAAC8M,iBAAiB,CAAC,IAAI,CAACnN,MAAM,CAAC;MACnC,OAAO,IAAI,CAACA,MAAM,GAAG,IAAI,CAACqM,WAAW;IACzC;IACA,MAAMe,SAAS,GAAG,CAAC,CAAClI,UAAU,IAAI,OAAO,IAAI,CAACoH,QAAQ,KAAK,QAAQ,GAC7DpH,UAAU,CAAC,IAAI,CAACoH,QAAQ,CAAC,IAAI,EAAE,CAAC,oCAChC,EAAE,CAAC;IACT,IAAIe,aAAa,GAAG,EAAE;IACtB,IAAI,IAAI,CAAC7M,WAAW,KAAKC,SAAS,IAAI,CAAC,IAAI,CAAC+L,YAAY,EAAE;MACtD,IAAIc,YAAY,GAAGpI,UAAU,IAAIA,UAAU,CAACd,MAAM,KAAK,CAAC,GAClDc,UAAU,CAACjB,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC,GACtD,IAAI,CAACjB,WAAW,CAACiB,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC;MAClE;MACA;MACA,IAAI,OAAO,IAAI,CAACqI,QAAQ,KAAK,QAAQ,IAAI,OAAO,IAAI,CAACC,MAAM,KAAK,QAAQ,EAAE;QACtE,IAAI,CAACD,QAAQ,GAAGzH,MAAM,CAAC,IAAI,CAACyH,QAAQ,CAAC;QACrC,IAAI,CAACC,MAAM,GAAG1H,MAAM,CAAC,IAAI,CAAC0H,MAAM,CAAC;MACrC,CAAC,MACI;QACDrH,UAAU,KAAK,EAAE,CAAC,qCAAqCoI,YAAY,CAAClJ,MAAM,GACpE,OAAO,IAAI,CAACkI,QAAQ,KAAK,QAAQ,IAAI,OAAO,IAAI,CAACC,MAAM,KAAK,QAAQ,GAChErH,UAAU,CAACd,MAAM,GAAGkJ,YAAY,CAAClJ,MAAM,GACnCkJ,YAAY,CAACC,MAAM,CAAC,IAAI,CAACjB,QAAQ,EAAE,CAAC,EAAEc,SAAS,CAAC,GAChDlI,UAAU,CAACd,MAAM,GAAGkJ,YAAY,CAAClJ,MAAM,GACnCkJ,YAAY,CAAClJ,MAAM,GAAGc,UAAU,CAACd,MAAM,KAAK,CAAC,GACzCmC,UAAU,GACN+G,YAAY,CAACC,MAAM,CAAC,IAAI,CAACjB,QAAQ,GAAG,CAAC,EAAE,CAAC,CAAC,GACzCgB,YAAY,CAACC,MAAM,CAACrI,UAAU,CAACd,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,GACjDkJ,YAAY,CAACC,MAAM,CAAC,IAAI,CAACjB,QAAQ,EAAE,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,QAAQ,CAAC,GACnE,IAAI,GACZ,IAAI,GACPgB,YAAY,GAAG,EAAG;MAC7B;MACA,IAAI,IAAI,CAACjN,aAAa,EAAE;QACpB,IAAI,CAAC,IAAI,CAACG,WAAW,EAAE;UACnB;UACA0E,UAAU,GAAG,IAAI,CAACsI,UAAU,CAACtI,UAAU,CAAC;QAC5C;MACJ;MACA;MACAmI,aAAa,GACT,IAAI,CAACrK,WAAW,CAACoB,MAAM,IAAIkJ,YAAY,CAAClJ,MAAM,IAAIc,UAAU,CAACd,MAAM,GAC7D,IAAI,CAACqJ,iBAAiB,CAACH,YAAY,CAACtJ,IAAI,CAAC,EAAE,CAAC,iCAAiC,CAAC,CAAC,GAC/EkB,UAAU;IACxB;IACA,IAAIoB,UAAU,KAAK,IAAI,CAAC9F,WAAW,IAAI,CAAC,IAAI,CAACA,WAAW,CAAC,EAAE;MACvD6M,aAAa,GAAGnI,UAAU;IAC9B;IACA,IAAIqB,UAAU,IACV,IAAI,CAACzF,iBAAiB,CAACiD,OAAO,CAAC,IAAI,CAAChB,cAAc,CAACsD,QAAQ,CAAC,IAAI,EAAE,CAAC,iCAAiC,CAAC,KAAK,CAAC,CAAC,IAC5G,IAAI,CAAChG,aAAa,EAAE;MACpBgN,aAAa,GAAG,IAAI,CAACT,aAAa;IACtC;IACA,IAAI,IAAI,CAAC1J,uBAAuB,IAAImD,QAAQ,EAAE;MAC1C,IAAI,IAAI,CAACvF,iBAAiB,CAACuE,QAAQ,CAAC,IAAI,CAACrC,WAAW,CAACuB,KAAK,CAAC8B,QAAQ,EAAEA,QAAQ,GAAG,CAAC,CAAC,CAAC,EAAE;QACjF;QACAA,QAAQ,GAAGA,QAAQ,GAAG,CAAC;MAC3B,CAAC,MACI,IAAItD,cAAc,CAACwB,KAAK,CAAC8B,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,6BAA6B;QAC5F;QACAA,QAAQ,GAAGA,QAAQ,GAAG,CAAC;MAC3B;MACA;MACA,IAAI,CAACnD,uBAAuB,GAAG,KAAK;IACxC;IACA,IAAI,IAAI,CAAC7C,aAAa,IAClB,IAAI,CAACC,oBAAoB,CAAC8D,MAAM,KAAK,CAAC,IACtC,CAAC,IAAI,CAACrD,gBAAgB,EAAE;MACxB;MACAmE,UAAU,GAAG,IAAI,CAACsI,UAAU,CAACtI,UAAU,CAAC;IAC5C;IACA,IAAI,IAAI,CAACuH,WAAW,EAAE;MAClBY,aAAa,GAAGnI,UAAU;IAC9B,CAAC,MACI;MACDmI,aAAa,GACTK,OAAO,CAACL,aAAa,CAAC,IAAIA,aAAa,CAACjJ,MAAM,GAAGiJ,aAAa,GAAGnI,UAAU;IACnF;IACA,IAAI,IAAI,CAAC7E,aAAa,IAAI,IAAI,CAACa,sBAAsB,IAAI,IAAI,CAAC8B,WAAW,IAAI,CAACsD,UAAU,EAAE;MACtF,MAAMjF,KAAK,GAAG,IAAI,CAACd,qBAAqB,GAClC,IAAI,CAACiN,UAAU,CAAC,IAAI,CAACxK,WAAW,CAAC,GACjC,IAAI,CAACA,WAAW;MACtB,IAAI,CAACmK,iBAAiB,CAAC9L,KAAK,CAAC;MAC7B,OAAO,IAAI,CAAC2B,WAAW,GACjB,IAAI,CAACA,WAAW,GAChB,IAAI,CAAChD,MAAM,GAAG,IAAI,CAACqM,WAAW,GAAG,IAAI,CAACtM,MAAM;IACtD;IACA,MAAM2G,MAAM,GAAG,KAAK,CAACN,SAAS,CAACiH,aAAa,EAAEtK,cAAc,EAAEsD,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,EAAE,CAAC;IACnG,IAAI,CAACxD,WAAW,GAAG,IAAI,CAAC2K,cAAc,CAACjH,MAAM,CAAC;IAC9C;IACA;IACA,IAAI,IAAI,CAACzG,iBAAiB,KAAK,GAAG,CAAC,4BAC/B,IAAI,CAACC,aAAa,KAAK,GAAG,CAAC,0BAA0B;MACrD,IAAI,CAACA,aAAa,GAAG,GAAG,CAAC;IAC7B;IACA;IACA,IAAI,IAAI,CAAC6C,cAAc,CAACwE,UAAU,CAAC,WAAW,CAAC,8BAA8B,CAAC,IAC1E,IAAI,CAAChH,qBAAqB,KAAK,IAAI,EAAE;MACrC,IAAI,CAACO,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACwJ,MAAM,CAAEsD,IAAI,IAAK,CAAC,IAAI,CAAC7H,kBAAkB,CAAC6H,IAAI,EAAE,IAAI,CAAC1N,aAAa,EAAE,IAAI,CAACD,iBAAiB,CAAC,CAAC;MAC5I,CAAC;IACL;;IACA,IAAIyG,MAAM,IAAIA,MAAM,KAAK,EAAE,EAAE;MACzB,IAAI,CAACiG,cAAc,GAAG,IAAI,CAACC,aAAa;MACxC,IAAI,CAACA,aAAa,GAAGlG,MAAM;MAC3B,IAAI,CAACmG,UAAU,GACX,IAAI,CAACF,cAAc,KAAK,IAAI,CAACC,aAAa,IACtC,IAAI,CAACH,WAAW,IACf,IAAI,CAACE,cAAc,KAAK,IAAI,CAACC,aAAa,IAAItG,UAAW;IACtE;IACA,IAAI,CAACuG,UAAU,GAAG,IAAI,CAACM,iBAAiB,CAACzG,MAAM,CAAC,GAAG,EAAE;IACrD,IAAI,CAAC,IAAI,CAACrG,aAAa,IAAK,IAAI,CAACA,aAAa,IAAI,IAAI,CAACG,WAAY,EAAE;MACjE,IAAI,IAAI,CAACA,WAAW,EAAE;QAClB,IAAI+F,UAAU,EAAE;UACZ,OAAO,IAAI,CAACsH,SAAS,CAACnH,MAAM,EAAE,IAAI,CAAC3D,cAAc,CAAC;QACtD;QACA,OAAQ,IAAI,CAAC8K,SAAS,CAACnH,MAAM,EAAE,IAAI,CAAC3D,cAAc,CAAC,GAC/C,IAAI,CAACsJ,WAAW,CAAC9H,KAAK,CAACmC,MAAM,CAACtC,MAAM,CAAC;MAC7C;MACA,OAAOsC,MAAM;IACjB;IACA,MAAMoH,MAAM,GAAGpH,MAAM,CAACtC,MAAM;IAC5B,MAAM2J,SAAS,GAAG,IAAI,CAAC/N,MAAM,GAAG,IAAI,CAACqM,WAAW;IAChD,IAAI,IAAI,CAACtJ,cAAc,CAACsC,QAAQ,CAAC,GAAG,CAAC,0BAA0B,CAAC,EAAE;MAC9D,MAAM2I,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,CAACvH,MAAM,CAAC;MAC3D,OAAOA,MAAM,GAAGqH,SAAS,CAACxJ,KAAK,CAACuJ,MAAM,GAAGE,iBAAiB,CAAC;IAC/D,CAAC,MACI,IAAI,IAAI,CAACjL,cAAc,KAAK,IAAI,CAAC,2BAClC,IAAI,CAACA,cAAc,KAAK,UAAU,CAAC,+BAA+B;MAClE,OAAO2D,MAAM,GAAGqH,SAAS;IAC7B;IACA,OAAOrH,MAAM,GAAGqH,SAAS,CAACxJ,KAAK,CAACuJ,MAAM,CAAC;EAC3C;EACA;EACAG,oBAAoBA,CAAC5M,KAAK,EAAE;IACxB,MAAM6M,KAAK,GAAG,eAAe;IAC7B,IAAIhK,KAAK,GAAGgK,KAAK,CAACC,IAAI,CAAC9M,KAAK,CAAC;IAC7B,IAAI2M,iBAAiB,GAAG,CAAC;IACzB,OAAO9J,KAAK,IAAI,IAAI,EAAE;MAClB8J,iBAAiB,IAAI,CAAC;MACtB9J,KAAK,GAAGgK,KAAK,CAACC,IAAI,CAAC9M,KAAK,CAAC;IAC7B;IACA,OAAO2M,iBAAiB;EAC5B;EACAI,iBAAiBA,CAAC/H,QAAQ,EAAEC,UAAU,EAAEC,UAAU;EAClD;EACAC,EAAE,GAAGA,CAAA,KAAM,CAAE,CAAC,EAAE;IACZ,MAAM6H,WAAW,GAAG,IAAI,CAACtB,WAAW,EAAEuB,aAAa;IACnD,IAAI,CAACD,WAAW,EAAE;MACd;IACJ;IACAA,WAAW,CAAChN,KAAK,GAAG,IAAI,CAAC+E,SAAS,CAACiI,WAAW,CAAChN,KAAK,EAAE,IAAI,CAAC0B,cAAc,EAAEsD,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,EAAE,CAAC;IAChH,IAAI6H,WAAW,KAAK,IAAI,CAACE,iBAAiB,CAAC,CAAC,EAAE;MAC1C;IACJ;IACA,IAAI,CAACC,iBAAiB,CAAC,CAAC;EAC5B;EACAX,SAASA,CAAC3I,UAAU,EAAEnC,cAAc,EAAE;IAClC,OAAOmC,UAAU,CACZjB,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC,CAC3CJ,GAAG,CAAC,CAAC4K,IAAI,EAAE3D,KAAK,KAAK;MACtB,IAAI,IAAI,CAACtJ,QAAQ,IACb,IAAI,CAACA,QAAQ,CAACuB,cAAc,CAAC+H,KAAK,CAAC,IAAI,EAAE,CAAC,kCAAkC,IAC5E,IAAI,CAACtJ,QAAQ,CAACuB,cAAc,CAAC+H,KAAK,CAAC,IAAI,EAAE,CAAC,kCAAkC,EAAEjJ,MAAM,EAAE;QACtF,OAAO,IAAI,CAACL,QAAQ,CAACuB,cAAc,CAAC+H,KAAK,CAAC,IAAI,EAAE,CAAC,kCAAkC,EAC7EjJ,MAAM;MAChB;MACA,OAAO4M,IAAI;IACf,CAAC,CAAC,CACGzK,IAAI,CAAC,EAAE,CAAC,iCAAiC,CAAC;EACnD;EACA;EACA2J,cAAcA,CAACtJ,GAAG,EAAE;IAChB,MAAMqK,OAAO,GAAGrK,GAAG,CACdJ,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC,CAC3CqG,MAAM,CAAC,CAACzI,MAAM,EAAEsD,CAAC,KAAK;MACvB,MAAMwJ,QAAQ,GAAG,IAAI,CAAC5L,cAAc,CAACoC,CAAC,CAAC,IAAI,EAAE,CAAC;MAC9C,OAAQ,IAAI,CAACkD,gBAAgB,CAACxG,MAAM,EAAE8M,QAAQ,CAAC,IAC1C,IAAI,CAAC7N,iBAAiB,CAACuE,QAAQ,CAACsJ,QAAQ,CAAC,IAAI9M,MAAM,KAAK8M,QAAS;IAC1E,CAAC,CAAC;IACF,IAAID,OAAO,CAAC1K,IAAI,CAAC,EAAE,CAAC,iCAAiC,CAAC,KAAKK,GAAG,EAAE;MAC5D,OAAOqK,OAAO,CAAC1K,IAAI,CAAC,EAAE,CAAC,iCAAiC,CAAC;IAC7D;;IACA,OAAOK,GAAG;EACd;EACAoJ,iBAAiBA,CAACvI,UAAU,EAAE;IAC1B,IAAI0J,eAAe,GAAG,EAAE;IACxB,MAAMvB,aAAa,GAAInI,UAAU,IAC7BA,UAAU,CACLjB,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC,CAC3CJ,GAAG,CAAC,CAACgL,UAAU,EAAE/D,KAAK,KAAK;MAC5B,IAAI,IAAI,CAAChK,iBAAiB,CAACuE,QAAQ,CAACH,UAAU,CAAC4F,KAAK,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,iCAAiC,CAAC,IAC9F5F,UAAU,CAAC4F,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC/H,cAAc,CAAC+H,KAAK,GAAG,CAAC,CAAC,EAAE;QAC1D8D,eAAe,GAAGC,UAAU;QAC5B,OAAO3J,UAAU,CAAC4F,KAAK,GAAG,CAAC,CAAC;MAChC;MACA,IAAI8D,eAAe,CAACxK,MAAM,EAAE;QACxB,MAAM0K,aAAa,GAAGF,eAAe;QACrCA,eAAe,GAAG,EAAE,CAAC;QACrB,OAAOE,aAAa;MACxB;MACA,OAAOD,UAAU;IACrB,CAAC,CAAC,IACF,EAAE;IACN,OAAOxB,aAAa,CAACrJ,IAAI,CAAC,EAAE,CAAC,iCAAiC,CAAC;EACnE;EACA;AACJ;AACA;AACA;AACA;EACI+K,cAAcA,CAAC1N,KAAK,EAAE;IAClB,IAAK,CAACA,KAAK,IAAIA,KAAK,KAAK,CAAC,IACrB,IAAI,CAAC0B,cAAc,CAACwE,UAAU,CAAC,WAAW,CAAC,8BAA8B,CAAC,KACtE,IAAI,CAACtG,QAAQ,IAAI,CAAC,IAAI,CAACV,qBAAqB,CAAE,IAClD,IAAI,CAACwC,cAAc,CAACwE,UAAU,CAAC,WAAW,CAAC,8BAA8B,CAAC,IACvE,IAAI,CAAC5G,cAAc,CAACyD,MAAM,GAAG,EAAE,IAC/B4K,MAAM,CAAC3N,KAAK,CAAC,CAAC+C,MAAM,GAAG,EAAG,EAAE;MAChC,OAAO4K,MAAM,CAAC3N,KAAK,CAAC;IACxB;IACA,OAAOwD,MAAM,CAACxD,KAAK,CAAC,CACf4N,cAAc,CAAC,UAAU,EAAE;MAC5BC,WAAW,EAAE,KAAK;MAClBC,qBAAqB,EAAE;IAC3B,CAAC,CAAC,CACG7K,OAAO,CAAE,IAAG,GAAG,CAAC,0BAA2B,GAAE,EAAE,GAAG,CAAC,0BAA0B,CAAC;EACvF;;EACA4I,eAAeA,CAACkC,QAAQ,EAAE;IACtB,IAAI,IAAI,CAAC/O,aAAa,IAAI,CAAC,CAAC,IAAI,CAACK,mBAAmB,EAAE;MAClD,IAAI,IAAI,CAACqC,cAAc,CAACqB,MAAM,KAAK,IAAI,CAAC1D,mBAAmB,CAAC0D,MAAM,EAAE;QAChE,MAAM,IAAIiL,KAAK,CAAC,oDAAoD,CAAC;MACzE,CAAC,MACI;QACD,OAAO,IAAI,CAAC3O,mBAAmB;MACnC;IACJ,CAAC,MACI,IAAI,IAAI,CAACL,aAAa,EAAE;MACzB,IAAI+O,QAAQ,EAAE;QACV,IAAI,IAAI,CAACrM,cAAc,KAAK,IAAI,CAAC,yBAAyB;UACtD,OAAO,IAAI,CAACuM,WAAW,CAACF,QAAQ,CAAC;QACrC;QACA,IAAI,IAAI,CAACrM,cAAc,KAAK,UAAU,CAAC,+BAA+B;UAClE,OAAO,IAAI,CAACwM,gBAAgB,CAACH,QAAQ,CAAC;QAC1C;MACJ;MACA,IAAI,IAAI,CAAC9O,oBAAoB,CAAC8D,MAAM,KAAK,IAAI,CAACrB,cAAc,CAACqB,MAAM,EAAE;QACjE,OAAO,IAAI,CAAC9D,oBAAoB;MACpC;MACA,OAAO,IAAI,CAACyC,cAAc,CAACuB,OAAO,CAAC,KAAK,EAAE,IAAI,CAAChE,oBAAoB,CAAC;IACxE;IACA,OAAO,EAAE;EACb;EACAkO,iBAAiBA,CAAA,EAAG;IAChB,MAAMH,WAAW,GAAG,IAAI,CAACtB,WAAW,EAAEuB,aAAa;IACnD,IAAI,CAACD,WAAW,EAAE;MACd;IACJ;IACA,IAAI,IAAI,CAAClO,eAAe,IACpB,IAAI,CAACH,MAAM,CAACoE,MAAM,GAAG,IAAI,CAACrB,cAAc,CAACqB,MAAM,GAAG,IAAI,CAACrE,MAAM,CAACqE,MAAM,KAChEiK,WAAW,CAAChN,KAAK,CAACiD,OAAO,CAAC,IAAI,CAAChE,oBAAoB,EAAE,EAAE,CAAC,iCAAiC,CAAC,CACrF8D,MAAM,EAAE;MACjB,IAAI,CAACoL,mBAAmB,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,kCAAkC;MAC1E,IAAI,CAACpJ,SAAS,CAAC,EAAE,EAAE,IAAI,CAACrD,cAAc,CAAC;IAC3C;EACJ;EACA,IAAIyM,mBAAmBA,CAAC,CAACC,IAAI,EAAEpO,KAAK,CAAC,EAAE;IACnC,IAAI,CAAC,IAAI,CAAC4L,SAAS,IAAI,CAAC,IAAI,CAACF,WAAW,EAAE;MACtC;IACJ;IACA2C,OAAO,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM,IAAI,CAAC3C,SAAS,EAAE4C,WAAW,CAAC,IAAI,CAAC9C,WAAW,EAAEuB,aAAa,EAAEmB,IAAI,EAAEpO,KAAK,CAAC,CAAC;EAC3G;EACAyO,0BAA0BA,CAAC5J,IAAI,EAAE;IAC7B,MAAM6J,KAAK,GAAG7J,IAAI,CACbjC,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC,CAC3CqG,MAAM,CAAEsD,IAAI,IAAK,IAAI,CAACzD,oBAAoB,CAACyD,IAAI,CAAC,CAAC;IACtD,OAAOmC,KAAK,CAAC3L,MAAM;EACvB;EACAoJ,UAAUA,CAACtI,UAAU,EAAE;IACnB,OAAO,IAAI,CAAC8K,WAAW,CAAC,IAAI,CAACC,aAAa,CAAC,IAAI,CAACC,aAAa,CAAChL,UAAU,CAAC,CAAC,EAAE,IAAI,CAACpE,iBAAiB,CAACqP,MAAM,CAAC,GAAG,CAAC,CAACA,MAAM,CAAC,IAAI,CAAC7P,oBAAoB,CAAC,CAAC;EACrJ;EACAgP,WAAWA,CAACF,QAAQ,EAAE;IAClB,IAAIA,QAAQ,KAAK,GAAG,CAAC,2BAA2B;MAC5C,OAAQ,GAAE,IAAI,CAAC9O,oBAAqB,IAAG,IAAI,CAACA,oBAAqB,IAAG,IAAI,CAACA,oBAAqB,IAAG,IAAI,CAACA,oBAAqB,EAAC;IAChI;IACA,MAAM8G,GAAG,GAAG,EAAE;IACd,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiK,QAAQ,CAAChL,MAAM,EAAEe,CAAC,EAAE,EAAE;MACtC,MAAM9D,KAAK,GAAG+N,QAAQ,CAACjK,CAAC,CAAC,IAAI,EAAE,CAAC;MAChC,IAAI,CAAC9D,KAAK,EAAE;QACR;MACJ;MACA,IAAIA,KAAK,CAAC6C,KAAK,CAAC,KAAK,CAAC,EAAE;QACpBkD,GAAG,CAACC,IAAI,CAAChG,KAAK,CAAC;MACnB;IACJ;IACA,IAAI+F,GAAG,CAAChD,MAAM,IAAI,CAAC,EAAE;MACjB,OAAQ,GAAE,IAAI,CAAC9D,oBAAqB,IAAG,IAAI,CAACA,oBAAqB,IAAG,IAAI,CAACA,oBAAqB,EAAC;IACnG;IACA,IAAI8G,GAAG,CAAChD,MAAM,GAAG,CAAC,IAAIgD,GAAG,CAAChD,MAAM,IAAI,CAAC,EAAE;MACnC,OAAQ,GAAE,IAAI,CAAC9D,oBAAqB,IAAG,IAAI,CAACA,oBAAqB,EAAC;IACtE;IACA,IAAI8G,GAAG,CAAChD,MAAM,GAAG,CAAC,IAAIgD,GAAG,CAAChD,MAAM,IAAI,CAAC,EAAE;MACnC,OAAO,IAAI,CAAC9D,oBAAoB;IACpC;IACA,IAAI8G,GAAG,CAAChD,MAAM,GAAG,CAAC,IAAIgD,GAAG,CAAChD,MAAM,IAAI,EAAE,EAAE;MACpC,OAAO,EAAE;IACb;IACA,OAAO,EAAE;EACb;EACAmL,gBAAgBA,CAACH,QAAQ,EAAE;IACvB,MAAMgB,GAAG,GAAI,GAAE,IAAI,CAAC9P,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,EAAC,GAC7F,IAAG,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,EAAC,GACtF,IAAG,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,EAAC,GACtF,IAAG,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,EAAC;IAC/D,MAAM+P,IAAI,GAAI,GAAE,IAAI,CAAC/P,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,EAAC,GAClE,IAAG,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,EAAC,GACtF,IAAG,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,EAAC,GACtF,IAAG,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,EAAC,GAClH,IAAG,IAAI,CAACA,oBAAqB,GAAE,IAAI,CAACA,oBAAqB,EAAC;IAC/D,IAAI8O,QAAQ,KAAK,GAAG,CAAC,2BAA2B;MAC5C,OAAOgB,GAAG;IACd;IACA,MAAMhJ,GAAG,GAAG,EAAE;IACd,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiK,QAAQ,CAAChL,MAAM,EAAEe,CAAC,EAAE,EAAE;MACtC,MAAM9D,KAAK,GAAG+N,QAAQ,CAACjK,CAAC,CAAC,IAAI,EAAE,CAAC;MAChC,IAAI,CAAC9D,KAAK,EAAE;QACR;MACJ;MACA,IAAIA,KAAK,CAAC6C,KAAK,CAAC,KAAK,CAAC,EAAE;QACpBkD,GAAG,CAACC,IAAI,CAAChG,KAAK,CAAC;MACnB;IACJ;IACA,IAAI+F,GAAG,CAAChD,MAAM,IAAI,CAAC,EAAE;MACjB,OAAOgM,GAAG,CAAC7L,KAAK,CAAC6C,GAAG,CAAChD,MAAM,EAAEgM,GAAG,CAAChM,MAAM,CAAC;IAC5C;IACA,IAAIgD,GAAG,CAAChD,MAAM,GAAG,CAAC,IAAIgD,GAAG,CAAChD,MAAM,IAAI,CAAC,EAAE;MACnC,OAAOgM,GAAG,CAAC7L,KAAK,CAAC6C,GAAG,CAAChD,MAAM,GAAG,CAAC,EAAEgM,GAAG,CAAChM,MAAM,CAAC;IAChD;IACA,IAAIgD,GAAG,CAAChD,MAAM,GAAG,CAAC,IAAIgD,GAAG,CAAChD,MAAM,IAAI,CAAC,EAAE;MACnC,OAAOgM,GAAG,CAAC7L,KAAK,CAAC6C,GAAG,CAAChD,MAAM,GAAG,CAAC,EAAEgM,GAAG,CAAChM,MAAM,CAAC;IAChD;IACA,IAAIgD,GAAG,CAAChD,MAAM,GAAG,CAAC,IAAIgD,GAAG,CAAChD,MAAM,GAAG,EAAE,EAAE;MACnC,OAAOgM,GAAG,CAAC7L,KAAK,CAAC6C,GAAG,CAAChD,MAAM,GAAG,CAAC,EAAEgM,GAAG,CAAChM,MAAM,CAAC;IAChD;IACA,IAAIgD,GAAG,CAAChD,MAAM,KAAK,EAAE,EAAE;MACnB,OAAO,EAAE;IACb;IACA,IAAIgD,GAAG,CAAChD,MAAM,KAAK,EAAE,EAAE;MACnB,IAAIgL,QAAQ,CAAChL,MAAM,KAAK,EAAE,EAAE;QACxB,OAAOiM,IAAI,CAAC9L,KAAK,CAAC,EAAE,EAAE8L,IAAI,CAACjM,MAAM,CAAC;MACtC;MACA,OAAOiM,IAAI,CAAC9L,KAAK,CAAC,EAAE,EAAE8L,IAAI,CAACjM,MAAM,CAAC;IACtC;IACA,IAAIgD,GAAG,CAAChD,MAAM,GAAG,EAAE,IAAIgD,GAAG,CAAChD,MAAM,IAAI,EAAE,EAAE;MACrC,OAAOiM,IAAI,CAAC9L,KAAK,CAAC6C,GAAG,CAAChD,MAAM,GAAG,CAAC,EAAEiM,IAAI,CAACjM,MAAM,CAAC;IAClD;IACA,OAAO,EAAE;EACb;EACA;AACJ;AACA;EACImK,iBAAiBA,CAACvB,QAAQ,GAAG,IAAI,CAACA,QAAQ,EAAE;IACxC,MAAMsD,YAAY,GAAGtD,QAAQ,EAAEuD,aAAa,EAAEC,UAAU;IACxD,IAAI,CAACF,YAAY,EAAEC,aAAa,EAAE;MAC9B,OAAOvD,QAAQ,CAACuD,aAAa;IACjC,CAAC,MACI;MACD,OAAO,IAAI,CAAChC,iBAAiB,CAAC+B,YAAY,CAAC;IAC/C;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACInD,iBAAiBA,CAACjI,UAAU,EAAE;IAC1B,IAAI,IAAI,CAACsH,YAAY,IAAK,CAAC,IAAI,CAACrL,mBAAmB,IAAI,IAAI,CAACsL,WAAY,EAAE;MACtE,IAAI,CAACA,WAAW,GACV,IAAI,CAACK,QAAQ,CAAC,IAAI,CAACxL,iBAAiB,CAAC,IAAI,CAACmP,SAAS,CAAC,IAAI,CAACC,aAAa,CAAC,IAAI,CAACT,aAAa,CAAC,IAAI,CAACC,aAAa,CAAChL,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAC7H,EAAE;MACR,IAAI,CAACuH,WAAW,GAAG,KAAK;MACxB;IACJ;IACA,IAAI/I,KAAK,CAACC,OAAO,CAAC,IAAI,CAACpD,qBAAqB,CAAC,EAAE;MAC3C,IAAI,CAACuM,QAAQ,CAAC,IAAI,CAACxL,iBAAiB,CAAC,IAAI,CAACmP,SAAS,CAAC,IAAI,CAACC,aAAa,CAAC,IAAI,CAACV,WAAW,CAAC,IAAI,CAACC,aAAa,CAAC,IAAI,CAACC,aAAa,CAAChL,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC3E,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/K,CAAC,MACI,IAAI,IAAI,CAACA,qBAAqB,IAC9B,CAAC,IAAI,CAACA,qBAAqB,IAAI,IAAI,CAACP,MAAM,KAAKkF,UAAW,EAAE;MAC7D,IAAI,CAAC4H,QAAQ,CAAC,IAAI,CAACxL,iBAAiB,CAAC,IAAI,CAACmP,SAAS,CAAC,IAAI,CAACC,aAAa,CAAC,IAAI,CAACT,aAAa,CAAC,IAAI,CAACC,aAAa,CAAChL,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjI,CAAC,MACI;MACD,IAAI,CAAC4H,QAAQ,CAAC,IAAI,CAACxL,iBAAiB,CAAC,IAAI,CAACmP,SAAS,CAACvL,UAAU,CAAC,CAAC,CAAC;IACrE;EACJ;EACAuL,SAASA,CAACpP,KAAK,EAAE;IACb,IAAI,CAAC,IAAI,CAAC+K,aAAa,IAAI/K,KAAK,KAAK,EAAE,CAAC,mCAAmC;MACvE,OAAOA,KAAK;IAChB;IACA,IAAI,IAAI,CAAC0B,cAAc,CAACwE,UAAU,CAAC,WAAW,CAAC,8BAA8B,CAAC,KACzE,IAAI,CAACtG,QAAQ,IAAI,CAAC,IAAI,CAACV,qBAAqB,CAAC,EAAE;MAChD,OAAOc,KAAK;IAChB;IACA,IAAI2N,MAAM,CAAC3N,KAAK,CAAC,CAAC+C,MAAM,GAAG,EAAE,IAAI,IAAI,CAACzD,cAAc,CAACyD,MAAM,GAAG,EAAE,EAAE;MAC9D,OAAO4K,MAAM,CAAC3N,KAAK,CAAC;IACxB;IACA,MAAMsP,GAAG,GAAG9L,MAAM,CAACxD,KAAK,CAAC;IACzB,IAAI,IAAI,CAAC0B,cAAc,CAACwE,UAAU,CAAC,WAAW,CAAC,8BAA8B,CAAC,IAAI1C,MAAM,CAACC,KAAK,CAAC6L,GAAG,CAAC,EAAE;MACjG,MAAMvG,GAAG,GAAG4E,MAAM,CAAC3N,KAAK,CAAC,CAACiD,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;MAC3C,OAAOO,MAAM,CAACuF,GAAG,CAAC;IACtB;IACA,OAAOvF,MAAM,CAACC,KAAK,CAAC6L,GAAG,CAAC,GAAGtP,KAAK,GAAGsP,GAAG;EAC1C;EACAX,WAAWA,CAAC3O,KAAK,EAAEuP,0BAA0B,EAAE;IAC3C,IAAI,IAAI,CAAC7N,cAAc,CAACwE,UAAU,CAAC,SAAS,CAAC,4BAA4B,CAAC,IACtElG,KAAK,CAACgE,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,EAAE;MAC9C,OAAOhE,KAAK;IAChB;IACA,OAAOA,KAAK,GACNA,KAAK,CAACiD,OAAO,CAAC,IAAI,CAACuM,gBAAgB,CAACD,0BAA0B,CAAC,EAAE,EAAE,CAAC,iCAAiC,CAAC,GACtGvP,KAAK;EACf;EACA6O,aAAaA,CAAC7O,KAAK,EAAE;IACjB,IAAI,CAAC,IAAI,CAACrB,MAAM,EAAE;MACd,OAAOqB,KAAK;IAChB;IACA,OAAOA,KAAK,GAAGA,KAAK,CAACiD,OAAO,CAAC,IAAI,CAACtE,MAAM,EAAE,EAAE,CAAC,iCAAiC,CAAC,GAAGqB,KAAK;EAC3F;EACA4O,aAAaA,CAAC5O,KAAK,EAAE;IACjB,IAAI,CAAC,IAAI,CAACtB,MAAM,EAAE;MACd,OAAOsB,KAAK;IAChB;IACA,OAAOA,KAAK,GAAGA,KAAK,CAACiD,OAAO,CAAC,IAAI,CAACvE,MAAM,EAAE,EAAE,CAAC,iCAAiC,CAAC,GAAGsB,KAAK;EAC3F;EACAyP,uBAAuBA,CAACpK,MAAM,EAAE;IAC5B,IAAI5F,iBAAiB,GAAG4C,KAAK,CAACC,OAAO,CAAC,IAAI,CAACpD,qBAAqB,CAAC,GAC3D,IAAI,CAACO,iBAAiB,CAACwJ,MAAM,CAAExG,CAAC,IAAK;MACnC,OAAO,IAAI,CAACvD,qBAAqB,CAAC8E,QAAQ,CAACvB,CAAC,CAAC;IACjD,CAAC,CAAC,GACA,IAAI,CAAChD,iBAAiB;IAC5B,IAAI,CAAC,IAAI,CAACoC,uBAAuB,IAC7B,IAAI,CAAC6N,qBAAqB,CAAC,CAAC,IAC5BrK,MAAM,CAACrB,QAAQ,CAAC,GAAG,CAAC,gCAAgC,CAAC,EAAE;MACvDvE,iBAAiB,GAAGA,iBAAiB,CAACwJ,MAAM,CAAEJ,IAAI,IAAKA,IAAI,KAAK,GAAG,CAAC,gCAAgC,CAAC;IACzG;;IACA,OAAO,IAAI,CAAC8F,WAAW,CAACtJ,MAAM,EAAE5F,iBAAiB,CAAC;EACtD;EACA+P,gBAAgBA,CAACD,0BAA0B,EAAE;IACzC,OAAO,IAAIlP,MAAM,CAACkP,0BAA0B,CAAC/M,GAAG,CAAE+J,IAAI,IAAM,KAAIA,IAAK,EAAC,CAAC,CAAC5J,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC;EAC5F;EACAgN,0BAA0BA,CAAC3P,KAAK,EAAE;IAC9B,MAAM4P,OAAO,GAAGvN,KAAK,CAACC,OAAO,CAAC,IAAI,CAACzD,aAAa,CAAC,GAC3C,IAAI,CAACA,aAAa,GAClB,CAAC,IAAI,CAACA,aAAa,CAAC;IAC1B,OAAOmB,KAAK,CAACiD,OAAO,CAAC,IAAI,CAACuM,gBAAgB,CAACI,OAAO,CAAC,EAAE,GAAG,CAAC,wBAAwB,CAAC;EACtF;;EACAP,aAAaA,CAAChK,MAAM,EAAE;IAClB,IAAIA,MAAM,KAAK,EAAE,CAAC,mCAAmC;MACjD,OAAOA,MAAM;IACjB;IACA,IAAI,IAAI,CAAC3D,cAAc,CAACwE,UAAU,CAAC,SAAS,CAAC,4BAA4B,CAAC,IACtE,IAAI,CAACrH,aAAa,KAAK,GAAG,CAAC,4BAA4B;MACvD;MACAwG,MAAM,GAAGA,MAAM,CAACpC,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,CAAC,wBAAwB,CAAC;IACzF;;IACA,MAAM4M,kBAAkB,GAAG,IAAI,CAACC,2BAA2B,CAAC,IAAI,CAACpO,cAAc,CAAC;IAChF,MAAMqO,cAAc,GAAG,IAAI,CAACJ,0BAA0B,CAAC,IAAI,CAACF,uBAAuB,CAACpK,MAAM,CAAC,CAAC;IAC5F,IAAI,CAAC,IAAI,CAAC0F,aAAa,EAAE;MACrB,OAAOgF,cAAc;IACzB;IACA,IAAIF,kBAAkB,EAAE;MACpB,IAAIxK,MAAM,KAAK,IAAI,CAACxG,aAAa,EAAE;QAC/B,OAAO,IAAI;MACf;MACA,IAAI,IAAI,CAACS,cAAc,CAACyD,MAAM,GAAG,EAAE,EAAE;QACjC,OAAO4K,MAAM,CAACoC,cAAc,CAAC;MACjC;MACA,OAAO,IAAI,CAACC,eAAe,CAAC,IAAI,CAACtO,cAAc,EAAEqO,cAAc,CAAC;IACpE,CAAC,MACI;MACD,OAAOA,cAAc;IACzB;EACJ;EACAL,qBAAqBA,CAAA,EAAG;IACpB,KAAK,MAAMO,GAAG,IAAI,IAAI,CAAC9P,QAAQ,EAAE;MAC7B;MACA,IAAI,IAAI,CAACA,QAAQ,CAAC8P,GAAG,CAAC,IAAI,IAAI,CAAC9P,QAAQ,CAAC8P,GAAG,CAAC,EAAEC,cAAc,CAAC,SAAS,CAAC,EAAE;QACrE,MAAMC,aAAa,GAAG,IAAI,CAAChQ,QAAQ,CAAC8P,GAAG,CAAC,EAAE7P,OAAO,CAACuF,QAAQ,CAAC,CAAC;QAC5D,MAAMvF,OAAO,GAAG,IAAI,CAACD,QAAQ,CAAC8P,GAAG,CAAC,EAAE7P,OAAO;QAC3C,IAAI+P,aAAa,EAAEnM,QAAQ,CAAC,GAAG,CAAC,gCAAgC,CAAC,IAC7D5D,OAAO,EAAEgD,IAAI,CAAC,IAAI,CAAC1B,cAAc,CAAC,EAAE;UACpC,OAAO,IAAI;QACf;MACJ;IACJ;IACA,OAAO,KAAK;EAChB;EACA;EACAoO,2BAA2BA,CAACM,aAAa,EAAE;IACvC,MAAMC,OAAO,GAAGD,aAAa,CAACvN,KAAK,CAAC,IAAIxC,MAAM,CAAE,sBAAqB,CAAC,CAAC;IACvE,OAAOgQ,OAAO,GAAG7M,MAAM,CAAC6M,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;EAC9C;EACAL,eAAeA,CAACM,mBAAmB,EAAEP,cAAc,EAAE;IACjD,MAAMF,kBAAkB,GAAGS,mBAAmB,CAACpN,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;IAC5D,IAAIoN,mBAAmB,CAAC5N,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IACnC,IAAI,CAAC9C,QAAQ,IAAI4D,MAAM,CAACqM,kBAAkB,CAAC,GAAG,CAAE,EAAE;MACnD,IAAI,IAAI,CAAChR,aAAa,KAAK,GAAG,CAAC,8BAA8B,IAAI,CAACe,QAAQ,EAAE;QACxE;QACAmQ,cAAc,GAAGA,cAAc,CAAC9M,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;MACrD;MACA,OAAO,IAAI,CAACrD,QAAQ,GACd4D,MAAM,CAACuM,cAAc,CAAC,CAACQ,OAAO,CAAC/M,MAAM,CAACqM,kBAAkB,CAAC,CAAC,GAC1DrM,MAAM,CAACuM,cAAc,CAAC,CAACQ,OAAO,CAAC,CAAC,CAAC;IAC3C;IACA,OAAO,IAAI,CAAC7C,cAAc,CAACqC,cAAc,CAAC;EAC9C;EACAS,qBAAqBA,CAACC,OAAO,EAAE;IAC3B,OAASA,OAAO,CAAC5N,KAAK,CAAC,UAAU,CAAC,IAC9B4N,OAAO,CACF7N,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC,CAC3C8N,MAAM,CAAC,CAACC,KAAK,EAAEC,OAAO,EAAEnH,KAAK,KAAK;MACnC,IAAI,CAACoH,MAAM,GACPD,OAAO,KAAK,GAAG,CAAC,2CAA2CnH,KAAK,GAAG,IAAI,CAACoH,MAAM;MAClF,IAAID,OAAO,KAAK,GAAG,CAAC,2CAA2C;QAC3D,OAAO,IAAI,CAACrI,gBAAgB,CAACqI,OAAO,CAAC,GAAGD,KAAK,GAAGC,OAAO,GAAGD,KAAK;MACnE;MACA,IAAI,CAACG,IAAI,GAAGrH,KAAK;MACjB,MAAMsH,YAAY,GAAGvN,MAAM,CAACiN,OAAO,CAACvN,KAAK,CAAC,IAAI,CAAC2N,MAAM,GAAG,CAAC,EAAE,IAAI,CAACC,IAAI,CAAC,CAAC;MACtE,MAAME,WAAW,GAAG,IAAI3O,KAAK,CAAC0O,YAAY,GAAG,CAAC,CAAC,CAACpO,IAAI,CAAC8N,OAAO,CAAC,IAAI,CAACI,MAAM,GAAG,CAAC,CAAC,CAAC;MAC9E,IAAIJ,OAAO,CAACvN,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC2N,MAAM,CAAC,CAAC9N,MAAM,GAAG,CAAC,IACxC0N,OAAO,CAACzM,QAAQ,CAAC,GAAG,CAAC,6BAA6B,CAAC,EAAE;QACrD,MAAMiN,OAAO,GAAGR,OAAO,CAACvN,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC2N,MAAM,GAAG,CAAC,CAAC;QACjD,OAAOI,OAAO,CAACjN,QAAQ,CAAC,GAAG,CAAC,wCAAwC,CAAC,GAC/D2M,KAAK,GAAGK,WAAW,GACnBC,OAAO,GAAGN,KAAK,GAAGK,WAAW;MACvC,CAAC,MACI;QACD,OAAOL,KAAK,GAAGK,WAAW;MAC9B;IACJ,CAAC,EAAE,EAAE,CAAC,IACNP,OAAO;EACf;EACAS,0BAA0BA,CAAA,EAAG;IACzB,OAAQ,GAAG,CAAEtD,cAAc,CAAC,CAAC,CAACvK,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;EACjD;EAAC,QAAA4G,CAAA,GACQ,IAAI,CAACC,IAAI;IAAA,IAAAiH,2BAAA;IAAA,gBAAAC,uBAAAhH,CAAA;MAAA,QAAA+G,2BAAA,KAAAA,2BAAA,GAhlB+E7T,EAAE,CAAA+T,qBAAA,CAglBQxG,cAAc,IAAAT,CAAA,IAAdS,cAAc;IAAA;EAAA,GAAsD;EAAA,QAAAR,EAAA,GACtK,IAAI,CAACC,KAAK,kBAjlB8EhN,EAAE,CAAAiN,kBAAA;IAAAC,KAAA,EAilBYK,cAAc;IAAAJ,OAAA,EAAdI,cAAc,CAAAX;EAAA,EAAG;AACpI;AACA;EAAA,QAAAQ,SAAA,oBAAAA,SAAA,KAnlBqGpN,EAAE,CAAAqN,iBAAA,CAmlBXE,cAAc,EAAc,CAAC;IAC7GD,IAAI,EAAElN;EACV,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA,SAAS4T,cAAcA,CAAA,EAAG;EACtB,MAAMC,UAAU,GAAG9T,MAAM,CAACe,cAAc,CAAC;EACzC,MAAMgT,WAAW,GAAG/T,MAAM,CAACc,UAAU,CAAC;EACtC,OAAOiT,WAAW,YAAYC,QAAQ,GAChC;IAAE,GAAGF,UAAU;IAAE,GAAGC,WAAW,CAAC;EAAE,CAAC,GACnC;IAAE,GAAGD,UAAU;IAAE,GAAGC;EAAY,CAAC;AAC3C;AACA,SAASE,cAAcA,CAACF,WAAW,EAAE;EACjC,OAAO,CACH;IACIG,OAAO,EAAEpT,UAAU;IACnBqT,QAAQ,EAAEJ;EACd,CAAC,EACD;IACIG,OAAO,EAAEnT,cAAc;IACvBoT,QAAQ,EAAEnT;EACd,CAAC,EACD;IACIkT,OAAO,EAAErT,eAAe;IACxBuT,UAAU,EAAEP;EAChB,CAAC,EACDzG,cAAc,CACjB;AACL;AACA,SAASiH,yBAAyBA,CAACN,WAAW,EAAE;EAC5C,OAAO3T,wBAAwB,CAAC6T,cAAc,CAACF,WAAW,CAAC,CAAC;AAChE;AAEA,MAAMO,gBAAgB,CAAC;EACnBzQ,WAAWA,CAAA,EAAG;IACV;IACA,IAAI,CAACI,cAAc,GAAG,EAAE;IACxB,IAAI,CAACjC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACU,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAACxB,MAAM,GAAG,EAAE;IAChB,IAAI,CAACD,MAAM,GAAG,EAAE;IAChB,IAAI,CAACE,iBAAiB,GAAG,GAAG;IAC5B,IAAI,CAACC,aAAa,GAAG,GAAG;IACxB,IAAI,CAACK,qBAAqB,GAAG,IAAI;IACjC,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACH,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,oBAAoB,GAAG,IAAI;IAChC,IAAI,CAACI,mBAAmB,GAAG,IAAI;IAC/B,IAAI,CAACN,YAAY,GAAG,IAAI;IACxB,IAAI,CAACD,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACU,UAAU,GAAG,IAAI;IACtB,IAAI,CAACF,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,oBAAoB,GAAG,IAAI;IAChC,IAAI,CAACG,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACE,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACE,mBAAmB,GAAG,IAAI;IAC/B,IAAI,CAACH,GAAG,GAAG,IAAI;IACf,IAAI,CAACI,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACE,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACJ,sBAAsB,GAAG,IAAI;IAClC,IAAI,CAACK,UAAU,GAAG,IAAI1C,YAAY,CAAC,CAAC;IACpC,IAAI,CAACwU,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAAC5G,oBAAoB,GAAG,EAAE;IAC9B,IAAI,CAAC6G,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB;IACA,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB,IAAI,CAACzG,QAAQ,GAAGlO,MAAM,CAACU,QAAQ,CAAC;IAChC,IAAI,CAACkU,YAAY,GAAG5U,MAAM,CAACoN,cAAc,EAAE;MAAEyH,IAAI,EAAE;IAAK,CAAC,CAAC;IAC1D,IAAI,CAAC/Q,OAAO,GAAG9D,MAAM,CAACa,eAAe,CAAC;IACtC;IACA,IAAI,CAACmN,QAAQ,GAAIxB,CAAC,IAAK,CAAE,CAAC;IAC1B;IACA,IAAI,CAACsI,OAAO,GAAG,MAAM,CAAE,CAAC;EAC5B;EACAC,WAAWA,CAACC,OAAO,EAAE;IACjB,MAAM;MAAE/Q,cAAc;MAAEjC,iBAAiB;MAAEU,QAAQ;MAAExB,MAAM;MAAED,MAAM;MAAEE,iBAAiB;MAAEC,aAAa;MAAEK,qBAAqB;MAAEC,WAAW;MAAEH,aAAa;MAAEC,oBAAoB;MAAEI,mBAAmB;MAAEN,YAAY;MAAED,eAAe;MAAEU,UAAU;MAAEF,cAAc;MAAEC,oBAAoB;MAAEG,gBAAgB;MAAEE,QAAQ;MAAEE,mBAAmB;MAAEH,GAAG;MAAEI,gBAAgB;MAAEE,iBAAiB;MAAEJ;IAAwB,CAAC,GAAG4S,OAAO;IACpZ,IAAI/Q,cAAc,EAAE;MAChB,IAAIA,cAAc,CAACgR,YAAY,KAAKhR,cAAc,CAACiR,aAAa,IAC5D,CAACjR,cAAc,CAACkR,WAAW,EAAE;QAC7B,IAAI,CAACP,YAAY,CAACjH,WAAW,GAAG,IAAI;MACxC;MACA,IAAI1J,cAAc,CAACgR,YAAY,IAC3BhR,cAAc,CAACgR,YAAY,CAAC9P,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;QAC5E,IAAI,CAACsI,oBAAoB,GAAG3J,cAAc,CAACgR,YAAY,CAClD9P,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,CACnCiQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAChB,OAAOD,CAAC,CAAC/P,MAAM,GAAGgQ,CAAC,CAAChQ,MAAM;QAC9B,CAAC,CAAC;QACF,IAAI,CAACiQ,QAAQ,CAAC,CAAC;MACnB,CAAC,MACI;QACD,IAAI,CAAC3H,oBAAoB,GAAG,EAAE;QAC9B,IAAI,CAAC2G,UAAU,GAAGtQ,cAAc,CAACgR,YAAY,IAAI,EAAE,CAAC;QACpD,IAAI,CAACL,YAAY,CAAC3Q,cAAc,GAAG,IAAI,CAACsQ,UAAU;MACtD;IACJ;IACA,IAAIzS,oBAAoB,EAAE;MACtB,IAAI,CAAC8S,YAAY,CAAC9S,oBAAoB,GAAGA,oBAAoB,CAACmT,YAAY;MAC1E,IAAI,IAAI,CAACL,YAAY,CAAC9S,oBAAoB,EAAE;QACxC,IAAI,CAAC8S,YAAY,CAAC5S,iBAAiB,GAAG,IAAI,CAAC4S,YAAY,CAAC5S,iBAAiB,CAACwJ,MAAM,CAAEgK,CAAC,IAAKA,CAAC,KAAK,GAAG,CAAC,0BAA0B,CAAC;MACjI;IACJ;;IACA,IAAIxT,iBAAiB,EAAE;MACnB,IAAI,CAACA,iBAAiB,CAACiT,YAAY,IAAI,CAACrQ,KAAK,CAACC,OAAO,CAAC7C,iBAAiB,CAACiT,YAAY,CAAC,EAAE;QACnF;MACJ,CAAC,MACI;QACD,IAAI,CAACL,YAAY,CAAC5S,iBAAiB,GAAGA,iBAAiB,CAACiT,YAAY,IAAI,EAAE;MAC9E;IACJ;IACA;IACA,IAAIvS,QAAQ,IAAIA,QAAQ,CAACuS,YAAY,EAAE;MACnC,IAAI,CAACL,YAAY,CAAClS,QAAQ,GAAGA,QAAQ,CAACuS,YAAY;IACtD;IACA,IAAI/S,GAAG,IAAIA,GAAG,CAAC+S,YAAY,EAAE;MACzB,IAAI,CAACL,YAAY,CAAC1S,GAAG,GAAGA,GAAG,CAAC+S,YAAY;IAC5C;IACA,IAAI/T,MAAM,EAAE;MACR,IAAI,CAAC0T,YAAY,CAAC1T,MAAM,GAAGA,MAAM,CAAC+T,YAAY;IAClD;IACA,IAAIhU,MAAM,EAAE;MACR,IAAI,CAAC2T,YAAY,CAAC3T,MAAM,GAAGA,MAAM,CAACgU,YAAY;IAClD;IACA,IAAI9T,iBAAiB,EAAE;MACnB,IAAI,CAACyT,YAAY,CAACzT,iBAAiB,GAAGA,iBAAiB,CAAC8T,YAAY;IACxE;IACA,IAAI7T,aAAa,EAAE;MACf,IAAI,CAACwT,YAAY,CAACxT,aAAa,GAAGA,aAAa,CAAC6T,YAAY;IAChE;IACA,IAAIxT,qBAAqB,EAAE;MACvB,IAAI,CAACmT,YAAY,CAACnT,qBAAqB,GAAGA,qBAAqB,CAACwT,YAAY;IAChF;IACA,IAAIvT,WAAW,EAAE;MACb,IAAI,CAACkT,YAAY,CAAClT,WAAW,GAAGA,WAAW,CAACuT,YAAY;IAC5D;IACA,IAAI1T,aAAa,EAAE;MACf,IAAI,CAACqT,YAAY,CAACrT,aAAa,GAAGA,aAAa,CAAC0T,YAAY;MAC5D,IAAI1T,aAAa,CAAC2T,aAAa,KAAK,KAAK,IACrC3T,aAAa,CAAC0T,YAAY,KAAK,IAAI,IACnC,IAAI,CAACP,UAAU,EAAE;QACjBe,qBAAqB,CAAC,MAAM;UACxB,IAAI,CAACb,YAAY,CAAC3G,WAAW,EAAEuB,aAAa,CAACkG,KAAK,CAAC,CAAC;QACxD,CAAC,CAAC;MACN;IACJ;IACA,IAAIlU,oBAAoB,EAAE;MACtB,IAAI,CAACoT,YAAY,CAACpT,oBAAoB,GAAGA,oBAAoB,CAACyT,YAAY;IAC9E;IACA,IAAIrT,mBAAmB,EAAE;MACrB,IAAI,CAACgT,YAAY,CAAChT,mBAAmB,GAAGA,mBAAmB,CAACqT,YAAY;IAC5E;IACA,IAAI3T,YAAY,EAAE;MACd,IAAI,CAACsT,YAAY,CAACtT,YAAY,GAAGA,YAAY,CAAC2T,YAAY;IAC9D;IACA,IAAI5T,eAAe,EAAE;MACjB,IAAI,CAACuT,YAAY,CAACvT,eAAe,GAAGA,eAAe,CAAC4T,YAAY;IACpE;IACA,IAAIlT,UAAU,EAAE;MACZ,IAAI,CAAC6S,YAAY,CAAC7S,UAAU,GAAGA,UAAU,CAACkT,YAAY;IAC1D;IACA,IAAIpT,cAAc,EAAE;MAChB,IAAI,CAAC+S,YAAY,CAAC/S,cAAc,GAAGA,cAAc,CAACoT,YAAY;IAClE;IACA,IAAIhT,gBAAgB,EAAE;MAClB,IAAI,CAAC2S,YAAY,CAAC3S,gBAAgB,GAAGA,gBAAgB,CAACgT,YAAY;IACtE;IACA,IAAI9S,QAAQ,EAAE;MACV,IAAI,CAACyS,YAAY,CAACzS,QAAQ,GAAGA,QAAQ,CAAC8S,YAAY;IACtD;IACA,IAAI5S,mBAAmB,EAAE;MACrB,IAAI,CAACuS,YAAY,CAACvS,mBAAmB,GAAGA,mBAAmB,CAAC4S,YAAY;IAC5E;IACA,IAAI3S,gBAAgB,EAAE;MAClB,IAAI,CAACsS,YAAY,CAACtS,gBAAgB,GAAGA,gBAAgB,CAAC2S,YAAY;IACtE;IACA,IAAIzS,iBAAiB,EAAE;MACnB,IAAI,CAACoS,YAAY,CAACpS,iBAAiB,GAAGA,iBAAiB,CAACyS,YAAY;IACxE;IACA,IAAI7S,sBAAsB,EAAE;MACxB,IAAI,CAACwS,YAAY,CAACxS,sBAAsB,GAAGA,sBAAsB,CAAC6S,YAAY;IAClF;IACA,IAAI,CAACU,UAAU,CAAC,CAAC;EACrB;EACA;EACAC,QAAQA,CAAC;IAAErT;EAAM,CAAC,EAAE;IAChB,IAAI,CAAC,IAAI,CAACqS,YAAY,CAAC7S,UAAU,IAAI,CAAC,IAAI,CAACwS,UAAU,EAAE;MACnD,OAAO,IAAI;IACf;IACA,IAAI,IAAI,CAACK,YAAY,CAACxM,OAAO,EAAE;MAC3B,OAAO,IAAI,CAACyN,sBAAsB,CAACtT,KAAK,CAAC;IAC7C;IACA,IAAI,IAAI,CAACqS,YAAY,CAACpM,YAAY,EAAE;MAChC,OAAO,IAAI,CAACqN,sBAAsB,CAACtT,KAAK,CAAC;IAC7C;IACA,IAAI,IAAI,CAACgS,UAAU,CAAC9L,UAAU,CAAC,WAAW,CAAC,8BAA8B,CAAC,EAAE;MACxE,OAAO,IAAI;IACf;IACA,IAAI9E,iBAAiB,CAAC4C,QAAQ,CAAC,IAAI,CAACgO,UAAU,CAAC,EAAE;MAC7C,OAAO,IAAI;IACf;IACA,IAAI,IAAI,CAACK,YAAY,CAACvT,eAAe,EAAE;MACnC,OAAO,IAAI;IACf;IACA,IAAIqC,SAAS,CAAC6C,QAAQ,CAAC,IAAI,CAACgO,UAAU,CAAC,EAAE;MACrC,OAAO,IAAI,CAACuB,aAAa,CAACvT,KAAK,CAAC;IACpC;IACA,IAAIA,KAAK,IAAIA,KAAK,CAAC2F,QAAQ,CAAC,CAAC,CAAC5C,MAAM,IAAI,CAAC,EAAE;MACvC,IAAIyQ,YAAY,GAAG,CAAC;MACpB,IAAI,IAAI,CAACxB,UAAU,CAAC9L,UAAU,CAAC,SAAS,CAAC,4BAA4B,CAAC,EAAE;QACpE,OAAO,IAAI;MACf;MACA,KAAK,MAAM+J,GAAG,IAAI,IAAI,CAACoC,YAAY,CAAClS,QAAQ,EAAE;QAC1C,IAAI,IAAI,CAACkS,YAAY,CAAClS,QAAQ,CAAC8P,GAAG,CAAC,EAAE3P,QAAQ,EAAE;UAC3C,IAAI,IAAI,CAAC0R,UAAU,CAACtP,OAAO,CAACuN,GAAG,CAAC,KAAK,IAAI,CAAC+B,UAAU,CAACyB,WAAW,CAACxD,GAAG,CAAC,EAAE;YACnE,MAAMyD,GAAG,GAAG,IAAI,CAAC1B,UAAU,CACtBpP,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC,CAC3CqG,MAAM,CAAEnF,CAAC,IAAKA,CAAC,KAAKmM,GAAG,CAAC,CACxBtN,IAAI,CAAC,EAAE,CAAC,iCAAiC,CAAC;YAC/C6Q,YAAY,IAAIE,GAAG,CAAC3Q,MAAM;UAC9B,CAAC,MACI,IAAI,IAAI,CAACiP,UAAU,CAACtP,OAAO,CAACuN,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;YAC1CuD,YAAY,EAAE;UAClB;UACA,IAAI,IAAI,CAACxB,UAAU,CAACtP,OAAO,CAACuN,GAAG,CAAC,KAAK,CAAC,CAAC,IACnCjQ,KAAK,CAAC2F,QAAQ,CAAC,CAAC,CAAC5C,MAAM,IAAI,IAAI,CAACiP,UAAU,CAACtP,OAAO,CAACuN,GAAG,CAAC,EAAE;YACzD,OAAO,IAAI;UACf;UACA,IAAIuD,YAAY,KAAK,IAAI,CAACxB,UAAU,CAACjP,MAAM,EAAE;YACzC,OAAO,IAAI;UACf;QACJ;MACJ;MACA,IAAI,IAAI,CAACiP,UAAU,CAACtP,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,KAAK,CAAC,IAC3E1C,KAAK,CAAC2F,QAAQ,CAAC,CAAC,CAAC5C,MAAM,KACnB,IAAI,CAACiP,UAAU,CAACjP,MAAM,GAClBS,MAAM,CAAC,CAAC,IAAI,CAACwO,UAAU,CAACpP,KAAK,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC,CAAC,CAAC,IAC1E,EAAE,CAAC,mCAAmCA,KAAK,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC,CAAC,CAAC,CAAC,GAClG,CAAC,EAAE;QACX,OAAO,IAAI;MACf,CAAC,MACI,IAAK,IAAI,CAACoP,UAAU,CAACtP,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,GAAG,CAAC,IACvE1C,KAAK,CAAC2F,QAAQ,CAAC,CAAC,CAAC5C,MAAM,GACnB,IAAI,CAACiP,UAAU,CAACtP,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,IAChE,IAAI,CAACsP,UAAU,CAACtP,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,GAAG,CAAC,IAClE1C,KAAK,CAAC2F,QAAQ,CAAC,CAAC,CAAC5C,MAAM,GACnB,IAAI,CAACiP,UAAU,CAACtP,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAE,IAC1E,IAAI,CAACsP,UAAU,CAACtP,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,KAAK,CAAC,EAAE;QAC7E,OAAO,IAAI,CAAC4Q,sBAAsB,CAACtT,KAAK,CAAC;MAC7C;MACA,IAAI,IAAI,CAACgS,UAAU,CAACtP,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,KAAK,CAAC,CAAC,IACpE,IAAI,CAACsP,UAAU,CAACtP,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,KAAK,CAAC,CAAC,EAAE;QAC1E;QACA1C,KAAK,GAAG,OAAOA,KAAK,KAAK,QAAQ,GAAG2N,MAAM,CAAC3N,KAAK,CAAC,GAAGA,KAAK;QACzD,MAAM2T,KAAK,GAAG,IAAI,CAAC3B,UAAU,CAACpP,KAAK,CAAC,GAAG,CAAC;QACxC,MAAMG,MAAM,GAAG,IAAI,CAACsP,YAAY,CAACnT,qBAAqB,GAChD,IAAI,CAAC8S,UAAU,CAACjP,MAAM,GACpB,IAAI,CAACsP,YAAY,CAAC5D,0BAA0B,CAAC,IAAI,CAACuD,UAAU,CAAC,GAC7DwB,YAAY,GACd,IAAI,CAAC7U,MAAM,GACP,IAAI,CAACqT,UAAU,CAACjP,MAAM,GAAG,IAAI,CAACpE,MAAM,CAACoE,MAAM,GAAGyQ,YAAY,GAC1D,IAAI,CAACxB,UAAU,CAACjP,MAAM,GAAGyQ,YAAY;QAC/C,IAAIG,KAAK,CAAC5Q,MAAM,KAAK,CAAC,EAAE;UACpB,IAAI/C,KAAK,CAAC2F,QAAQ,CAAC,CAAC,CAAC5C,MAAM,GAAGA,MAAM,EAAE;YAClC,OAAO,IAAI,CAACuQ,sBAAsB,CAACtT,KAAK,CAAC;UAC7C;QACJ;QACA,IAAI2T,KAAK,CAAC5Q,MAAM,GAAG,CAAC,EAAE;UAClB,MAAM6Q,cAAc,GAAGD,KAAK,CAACA,KAAK,CAAC5Q,MAAM,GAAG,CAAC,CAAC;UAC9C,IAAI6Q,cAAc,IACd,IAAI,CAACvB,YAAY,CAAC5S,iBAAiB,CAACuE,QAAQ,CAAC4P,cAAc,CAAC,CAAC,CAAC,CAAC,IAC/DjG,MAAM,CAAC3N,KAAK,CAAC,CAACgE,QAAQ,CAAC4P,cAAc,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAC/C,CAAC,IAAI,CAAC1U,qBAAqB,EAAE;YAC7B,MAAM2U,OAAO,GAAG7T,KAAK,CAAC4C,KAAK,CAACgR,cAAc,CAAC,CAAC,CAAC,CAAC;YAC9C,OAAOC,OAAO,CAACA,OAAO,CAAC9Q,MAAM,GAAG,CAAC,CAAC,CAACA,MAAM,KAAK6Q,cAAc,CAAC7Q,MAAM,GAAG,CAAC,GACjE,IAAI,GACJ,IAAI,CAACuQ,sBAAsB,CAACtT,KAAK,CAAC;UAC5C,CAAC,MACI,IAAI,CAAE4T,cAAc,IACrB,CAAC,IAAI,CAACvB,YAAY,CAAC5S,iBAAiB,CAACuE,QAAQ,CAAC4P,cAAc,CAAC,CAAC,CAAC,CAAC,IAChE,CAACA,cAAc,IACf,IAAI,CAACvB,YAAY,CAACnT,qBAAqB,KACvCc,KAAK,CAAC+C,MAAM,IAAIA,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI;UACf,CAAC,MACI;YACD,OAAO,IAAI,CAACuQ,sBAAsB,CAACtT,KAAK,CAAC;UAC7C;QACJ;MACJ;MACA,IAAI,IAAI,CAACgS,UAAU,CAACtP,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,KAAK,CAAC,IACnE,IAAI,CAACsP,UAAU,CAACtP,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,KAAK,CAAC,EAAE;QACzE,OAAO,IAAI;MACf;IACJ;IACA,IAAI1C,KAAK,EAAE;MACP,IAAI,CAACE,UAAU,CAAC4T,IAAI,CAAC,CAAC;MACtB,OAAO,IAAI;IACf;IACA,OAAO,IAAI;EACf;EACAC,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC7B,WAAW,GAAG,IAAI;EAC3B;EACA8B,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC7B,UAAU,GAAG,IAAI;EAC1B;EACA8B,aAAaA,CAACjU,KAAK,EAAE;IACjB;IACA,IAAI,CAACA,KAAK,KAAK,EAAE,CAAC,qCAAqCA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKZ,SAAS,KACxF,IAAI,CAACiT,YAAY,CAAC1Q,WAAW,EAAE;MAC/B,IAAI,CAAC0Q,YAAY,CAAC1Q,WAAW,GAAG,IAAI,CAAC0Q,YAAY,CAAC/F,cAAc,CAAC,EAAE,CAAC,iCAAiC,CAAC;IAC1G;EACJ;;EACA4H,OAAOA,CAACC,CAAC,EAAE;IACP;IACA,IAAI,IAAI,CAAC/B,YAAY,EACjB;IACJ,MAAMgC,EAAE,GAAGD,CAAC,CAACE,MAAM;IACnB,MAAMC,gBAAgB,GAAG,IAAI,CAACjC,YAAY,CAACtS,gBAAgB,CAACqU,EAAE,CAACpU,KAAK,CAAC;IACrE,IAAIoU,EAAE,CAACxJ,IAAI,KAAK,QAAQ,EAAE;MACtB,IAAI,OAAO0J,gBAAgB,KAAK,QAAQ,IAAI,OAAOA,gBAAgB,KAAK,QAAQ,EAAE;QAC9EF,EAAE,CAACpU,KAAK,GAAGsU,gBAAgB,CAAC3O,QAAQ,CAAC,CAAC;QACtC,IAAI,CAAC4O,WAAW,GAAGH,EAAE,CAACpU,KAAK;QAC3B,IAAI,CAACgT,QAAQ,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,CAAChB,UAAU,EAAE;UAClB,IAAI,CAACvG,QAAQ,CAAC2I,EAAE,CAACpU,KAAK,CAAC;UACvB;QACJ;QACA,IAAIgF,QAAQ,GAAGoP,EAAE,CAACI,cAAc,KAAK,CAAC,GAChCJ,EAAE,CAACI,cAAc,GAAG,IAAI,CAACnC,YAAY,CAAC1T,MAAM,CAACoE,MAAM,GACnDqR,EAAE,CAACI,cAAc;QACvB,IAAI,IAAI,CAACxV,aAAa,IAClB,IAAI,CAACa,sBAAsB,IAC3B,IAAI,CAACwS,YAAY,CAACpT,oBAAoB,CAAC8D,MAAM,KAAK,CAAC,EAAE;UACrD,MAAM+D,WAAW,GAAGsN,EAAE,CAACpU,KAAK,CAACkD,KAAK,CAAC8B,QAAQ,GAAG,CAAC,EAAEA,QAAQ,CAAC;UAC1D,MAAMyP,YAAY,GAAG,IAAI,CAAC9V,MAAM,CAACoE,MAAM;UACvC,MAAM2R,YAAY,GAAG,IAAI,CAACrC,YAAY,CAACrL,gBAAgB,CAACF,WAAW,EAAE,IAAI,CAACuL,YAAY,CAAC3Q,cAAc,CAACsD,QAAQ,GAAG,CAAC,GAAGyP,YAAY,CAAC,IAC9H,EAAE,CAAC,iCAAiC,CAAC;UACzC,MAAME,qBAAqB,GAAG,IAAI,CAACtC,YAAY,CAACrL,gBAAgB,CAACF,WAAW,EAAE,IAAI,CAACuL,YAAY,CAAC3Q,cAAc,CAACsD,QAAQ,GAAG,CAAC,GAAGyP,YAAY,CAAC,IACvI,EAAE,CAAC,iCAAiC,CAAC;UACzC,MAAMG,oBAAoB,GAAG,IAAI,CAACvC,YAAY,CAACpH,QAAQ,KAAK,IAAI,CAACoH,YAAY,CAACnH,MAAM;UACpF,MAAMD,QAAQ,GAAGzH,MAAM,CAAC,IAAI,CAAC6O,YAAY,CAACpH,QAAQ,CAAC,GAAGwJ,YAAY,IAAI,EAAE;UACxE,MAAMvJ,MAAM,GAAG1H,MAAM,CAAC,IAAI,CAAC6O,YAAY,CAACnH,MAAM,CAAC,GAAGuJ,YAAY,IAAI,EAAE;UACpE,IAAI,IAAI,CAACI,KAAK,KAAK,WAAW,CAAC,gCAAgC;YAC3D,IAAI,CAACD,oBAAoB,EAAE;cACvB,IAAI,IAAI,CAACvC,YAAY,CAACpH,QAAQ,KAAKwJ,YAAY,EAAE;gBAC7C,IAAI,CAACpC,YAAY,CAAC1Q,WAAW,GACzB,IAAI,CAAChD,MAAM,GACP,IAAI,CAAC0T,YAAY,CAACrH,WAAW,CAAC9H,KAAK,CAAC,CAAC,EAAEgI,MAAM,CAAC,GAC9C,IAAI,CAACqJ,WAAW,CAAC3R,KAAK,CAAC,IAAI,CAACjE,MAAM,CAAC,CAACgE,IAAI,CAAC,EAAE,CAAC;cACxD,CAAC,MACI,IAAI,IAAI,CAAC0P,YAAY,CAACpH,QAAQ,KAC/B,IAAI,CAACoH,YAAY,CAACrH,WAAW,CAACjI,MAAM,GAAG0R,YAAY,EAAE;gBACrD,IAAI,CAACpC,YAAY,CAAC1Q,WAAW,GACzB,IAAI,CAAC4S,WAAW,GACZ,IAAI,CAAClC,YAAY,CAACrH,WAAW,CAAC9H,KAAK,CAAC+H,QAAQ,EAAEC,MAAM,CAAC;cACjE,CAAC,MACI;gBACD,IAAI,CAACmH,YAAY,CAAC1Q,WAAW,GACzB,IAAI,CAAChD,MAAM,GACP,IAAI,CAAC4V,WAAW,CACX3R,KAAK,CAAC,IAAI,CAACjE,MAAM,CAAC,CAClBgE,IAAI,CAAC,EAAE,CAAC,CACRO,KAAK,CAAC,CAAC,EAAE+H,QAAQ,CAAC,GACvB,IAAI,CAACoH,YAAY,CAACrH,WAAW,CAAC9H,KAAK,CAAC+H,QAAQ,EAAEC,MAAM,CAAC,GACrD,IAAI,CAACmH,YAAY,CAAC1Q,WAAW,CAACuB,KAAK,CAACgI,MAAM,GAAGuJ,YAAY,EAAE,IAAI,CAACpC,YAAY,CAACrH,WAAW,CAACjI,MAAM,GAAG0R,YAAY,CAAC,GAC/G,IAAI,CAAC/V,MAAM;cACvB;YACJ,CAAC,MACI,IAAI,CAAC,IAAI,CAAC2T,YAAY,CAAC5S,iBAAiB,CAACuE,QAAQ,CAAC,IAAI,CAACqO,YAAY,CAAC3Q,cAAc,CAACwB,KAAK,CAAC8B,QAAQ,GAAG,IAAI,CAACrG,MAAM,CAACoE,MAAM,EAAEiC,QAAQ,GAAG,CAAC,GAAG,IAAI,CAACrG,MAAM,CAACoE,MAAM,CAAC,CAAC,IAC5J6R,oBAAoB,EAAE;cACtB,IAAI3J,QAAQ,KAAK,CAAC,IAAI,IAAI,CAACtM,MAAM,EAAE;gBAC/B,IAAI,CAAC0T,YAAY,CAAC1Q,WAAW,GACzB,IAAI,CAAChD,MAAM,GACP,IAAI,CAAC0T,YAAY,CAACpT,oBAAoB,GACtCmV,EAAE,CAACpU,KAAK,CACH4C,KAAK,CAAC,IAAI,CAACjE,MAAM,CAAC,CAClBgE,IAAI,CAAC,EAAE,CAAC,CACRC,KAAK,CAAC,IAAI,CAAClE,MAAM,CAAC,CAClBiE,IAAI,CAAC,EAAE,CAAC,GACb,IAAI,CAACjE,MAAM;gBACnBsG,QAAQ,GAAGA,QAAQ,GAAG,CAAC;cAC3B,CAAC,MACI;gBACD,MAAM8P,KAAK,GAAGV,EAAE,CAACpU,KAAK,CAACqD,SAAS,CAAC,CAAC,EAAE2B,QAAQ,CAAC;gBAC7C,MAAM+P,KAAK,GAAGX,EAAE,CAACpU,KAAK,CAACqD,SAAS,CAAC2B,QAAQ,CAAC;gBAC1C,IAAI,CAACqN,YAAY,CAAC1Q,WAAW,GACzBmT,KAAK,GAAG,IAAI,CAACzC,YAAY,CAACpT,oBAAoB,GAAG8V,KAAK;cAC9D;YACJ;UACJ;UACA,IAAI,IAAI,CAACF,KAAK,KAAK,WAAW,CAAC,gCAAgC;YAC3D,IAAI,CAACH,YAAY,IAAI,CAACC,qBAAqB,IAAIC,oBAAoB,EAAE;cACjE5P,QAAQ,GAAGxB,MAAM,CAAC4Q,EAAE,CAACI,cAAc,CAAC,GAAG,CAAC;YAC5C,CAAC,MACI,IAAI,IAAI,CAACnC,YAAY,CAAC5S,iBAAiB,CAACuE,QAAQ,CAACoQ,EAAE,CAACpU,KAAK,CAACkD,KAAK,CAAC8B,QAAQ,EAAEA,QAAQ,GAAG,CAAC,CAAC,CAAC,IACzF2P,qBAAqB,IACrB,CAAC,IAAI,CAACtC,YAAY,CAAC5S,iBAAiB,CAACuE,QAAQ,CAACoQ,EAAE,CAACpU,KAAK,CAACkD,KAAK,CAAC8B,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAG,CAAC,CAAC,CAAC,EAAE;cAC3F,IAAI,CAACqN,YAAY,CAAC1Q,WAAW,GACzByS,EAAE,CAACpU,KAAK,CAACkD,KAAK,CAAC,CAAC,EAAE8B,QAAQ,GAAG,CAAC,CAAC,GAC3BoP,EAAE,CAACpU,KAAK,CAACkD,KAAK,CAAC8B,QAAQ,EAAEA,QAAQ,GAAG,CAAC,CAAC,GACtC8B,WAAW,GACXsN,EAAE,CAACpU,KAAK,CAACkD,KAAK,CAAC8B,QAAQ,GAAG,CAAC,CAAC;cACpCA,QAAQ,GAAGA,QAAQ,GAAG,CAAC;YAC3B,CAAC,MACI,IAAI0P,YAAY,EAAE;cACnB,IAAI,CAACrC,YAAY,CAAC1Q,WAAW,GACzByS,EAAE,CAACpU,KAAK,CAACkD,KAAK,CAAC,CAAC,EAAE8B,QAAQ,GAAG,CAAC,CAAC,GAC3B8B,WAAW,GACXsN,EAAE,CAACpU,KAAK,CACHkD,KAAK,CAAC8B,QAAQ,GAAG,CAAC,CAAC,CACnBpC,KAAK,CAAC,IAAI,CAAClE,MAAM,CAAC,CAClBiE,IAAI,CAAC,EAAE,CAAC,GACb,IAAI,CAACjE,MAAM;YACvB;UACJ;QACJ;QACA,IAAIsW,UAAU,GAAG,CAAC;QAClB,IAAIzP,cAAc,GAAG,KAAK;QAC1B,IAAI,IAAI,CAACsP,KAAK,KAAK,QAAQ,CAAC,+BAA+B,WAAW,CAAC,gCAAgC;UACnG,IAAI,CAACxC,YAAY,CAACxQ,uBAAuB,GAAG,IAAI;QACpD;QACA,IAAI,IAAI,CAAC0S,WAAW,CAACxR,MAAM,IAAI,IAAI,CAACsP,YAAY,CAAC3Q,cAAc,CAACqB,MAAM,GAAG,CAAC,IACtE,IAAI,CAAC8R,KAAK,KAAK,WAAW,CAAC,kCAC3B,IAAI,CAACxC,YAAY,CAAC3Q,cAAc,KAAK,YAAY,CAAC,0CAClDsD,QAAQ,GAAG,EAAE,EAAE;UACf,MAAM8B,WAAW,GAAG,IAAI,CAACyN,WAAW,CAACrR,KAAK,CAAC8B,QAAQ,GAAG,CAAC,EAAEA,QAAQ,CAAC;UAClEoP,EAAE,CAACpU,KAAK,GACJ,IAAI,CAACuU,WAAW,CAACrR,KAAK,CAAC,CAAC,EAAE8B,QAAQ,GAAG,CAAC,CAAC,GACnC8B,WAAW,GACX,IAAI,CAACyN,WAAW,CAACrR,KAAK,CAAC8B,QAAQ,GAAG,CAAC,CAAC;QAChD;QACA,IAAI,IAAI,CAACqN,YAAY,CAAC3Q,cAAc,KAAK,YAAY,CAAC,0CAClD,IAAI,CAAChC,gBAAgB,EAAE;UACvB,IAAKsF,QAAQ,GAAG,CAAC,IAAIxB,MAAM,CAAC4Q,EAAE,CAACpU,KAAK,CAAC,GAAG,EAAE,IAAIwD,MAAM,CAAC4Q,EAAE,CAACpU,KAAK,CAAC,GAAG,EAAE,IAC9DgF,QAAQ,KAAK,CAAC,IAAIxB,MAAM,CAAC4Q,EAAE,CAACpU,KAAK,CAACkD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAG,EAAE;YACvD8B,QAAQ,GAAGA,QAAQ,GAAG,CAAC;UAC3B;QACJ;QACA,IAAI,IAAI,CAACqN,YAAY,CAAC3Q,cAAc,KAAK,UAAU,CAAC,8CAChD,IAAI,CAAC/B,GAAG,EAAE;UACV,IAAI,IAAI,CAACuS,WAAW,IAAIkC,EAAE,CAACpU,KAAK,CAACkD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,kCAAkC;YACpFkR,EAAE,CAACpU,KAAK,GAAGoU,EAAE,CAACpU,KAAK,CAACkD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGkR,EAAE,CAACpU,KAAK,CAACkD,KAAK,CAAC,CAAC,EAAEkR,EAAE,CAACpU,KAAK,CAAC+C,MAAM,CAAC;UACxE;UACAqR,EAAE,CAACpU,KAAK,GACJoU,EAAE,CAACpU,KAAK,KAAK,IAAI,CAAC,mCACZ,GAAG,CAAC,mCACJoU,EAAE,CAACpU,KAAK;QACtB;QACA,IAAI,CAACqS,YAAY,CAACtF,iBAAiB,CAAC/H,QAAQ,EAAE,IAAI,CAACkN,WAAW,EAAE,IAAI,CAAC2C,KAAK,KAAK,WAAW,CAAC,kCAAkC,IAAI,CAACA,KAAK,KAAK,QAAQ,CAAC,6BAA6B,CAACrP,KAAK,EAAEyP,eAAe,KAAK;UAC1M,IAAI,CAAC/C,WAAW,GAAG,KAAK;UACxB8C,UAAU,GAAGxP,KAAK;UAClBD,cAAc,GAAG0P,eAAe;QACpC,CAAC,CAAC;QACF;QACA,IAAI,IAAI,CAAC/H,iBAAiB,CAAC,CAAC,KAAKkH,EAAE,EAAE;UACjC;QACJ;QACA;QACA,IAAI,IAAI,CAAC/I,oBAAoB,CAACtI,MAAM,EAAE;UAClC,IAAI,IAAI,CAAC8R,KAAK,KAAK,WAAW,CAAC,gCAAgC;YAC3D7P,QAAQ,GAAG,IAAI,CAACvF,iBAAiB,CAACuE,QAAQ,CAAC,IAAI,CAACuQ,WAAW,CAACrR,KAAK,CAAC8B,QAAQ,GAAG,CAAC,EAAEA,QAAQ,CAAC,CAAC,GACpFA,QAAQ,GAAG,CAAC,GACZA,QAAQ;UAClB,CAAC,MACI;YACDA,QAAQ,GACJoP,EAAE,CAACI,cAAc,KAAK,CAAC,GACjBJ,EAAE,CAACI,cAAc,GAAG,IAAI,CAACnC,YAAY,CAAC1T,MAAM,CAACoE,MAAM,GACnDqR,EAAE,CAACI,cAAc;UAC/B;QACJ;QACA,IAAI,CAACvC,SAAS,GACV,IAAI,CAACA,SAAS,KAAK,CAAC,IAAI,IAAI,CAACsC,WAAW,CAACxR,MAAM,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAACkP,SAAS;QACjF,IAAIiD,eAAe,GAAG,IAAI,CAACjD,SAAS,GAC9B,IAAI,CAACsC,WAAW,CAACxR,MAAM,GAAGiC,QAAQ,GAAGgQ,UAAU,GAC/ChQ,QAAQ,IACL,IAAI,CAAC6P,KAAK,KAAK,WAAW,CAAC,kCAAkC,CAACtP,cAAc,GAAG,CAAC,GAAGyP,UAAU,CAAC;QACvG,IAAIE,eAAe,GAAG,IAAI,CAACC,qBAAqB,CAAC,CAAC,EAAE;UAChDD,eAAe,GAAG,IAAI,CAACC,qBAAqB,CAAC,CAAC;QAClD;QACA,IAAID,eAAe,GAAG,CAAC,EAAE;UACrBA,eAAe,GAAG,CAAC;QACvB;QACAd,EAAE,CAACgB,iBAAiB,CAACF,eAAe,EAAEA,eAAe,CAAC;QACtD,IAAI,CAACjD,SAAS,GAAG,IAAI;MACzB,CAAC,MACI;QACDoD,OAAO,CAACC,IAAI,CAAC,oEAAoE,EAAE,OAAOhB,gBAAgB,CAAC;MAC/G;IACJ,CAAC,MACI;MACD,IAAI,CAACjC,YAAY,CAACtF,iBAAiB,CAACqH,EAAE,CAACpU,KAAK,CAAC+C,MAAM,EAAE,IAAI,CAACmP,WAAW,EAAE,IAAI,CAAC2C,KAAK,KAAK,WAAW,CAAC,kCAAkC,IAAI,CAACA,KAAK,KAAK,QAAQ,CAAC,2BAA2B,CAAC;IAC5L;EACJ;EACA;EACAU,kBAAkBA,CAAA,EAAG;IACjB,IAAI,CAACnD,YAAY,GAAG,IAAI;EAC5B;EACA;EACAoD,gBAAgBA,CAACrB,CAAC,EAAE;IAChB,IAAI,CAAC/B,YAAY,GAAG,KAAK;IACzB,IAAI,CAACF,WAAW,GAAG,IAAI;IACvB,IAAI,CAACgC,OAAO,CAACC,CAAC,CAAC;EACnB;EACAsB,MAAMA,CAACtB,CAAC,EAAE;IACN,IAAI,IAAI,CAACnC,UAAU,EAAE;MACjB,MAAMoC,EAAE,GAAGD,CAAC,CAACE,MAAM;MACnB,IAAI,IAAI,CAACzU,QAAQ,IAAIwU,EAAE,CAACpU,KAAK,CAAC+C,MAAM,GAAG,CAAC,IAAI,OAAO,IAAI,CAAClE,aAAa,KAAK,QAAQ,EAAE;QAChF,MAAM6C,cAAc,GAAG,IAAI,CAAC2Q,YAAY,CAAC3Q,cAAc;QACvD,MAAMQ,SAAS,GAAGsB,MAAM,CAAC,IAAI,CAAC6O,YAAY,CAAC3Q,cAAc,CAACwB,KAAK,CAACxB,cAAc,CAACqB,MAAM,GAAG,CAAC,EAAErB,cAAc,CAACqB,MAAM,CAAC,CAAC;QAClH,IAAIb,SAAS,GAAG,CAAC,EAAE;UACfkS,EAAE,CAACpU,KAAK,GAAG,IAAI,CAACtB,MAAM,GAAG0V,EAAE,CAACpU,KAAK,CAAC4C,KAAK,CAAC,IAAI,CAAClE,MAAM,CAAC,CAACiE,IAAI,CAAC,EAAE,CAAC,GAAGyR,EAAE,CAACpU,KAAK;UACxE,MAAM8J,WAAW,GAAGsK,EAAE,CAACpU,KAAK,CAAC4C,KAAK,CAAC,IAAI,CAAC/D,aAAa,CAAC,CAAC,CAAC,CAAC;UACzDuV,EAAE,CAACpU,KAAK,GAAGoU,EAAE,CAACpU,KAAK,CAACgE,QAAQ,CAAC,IAAI,CAACnF,aAAa,CAAC,GAC1CuV,EAAE,CAACpU,KAAK,GACN,GAAG,CAAC,iCAAiC0V,MAAM,CAACxT,SAAS,GAAG4H,WAAW,CAAC/G,MAAM,CAAC,GAC3E,IAAI,CAACrE,MAAM,GACb0V,EAAE,CAACpU,KAAK,GACN,IAAI,CAACnB,aAAa,GAClB,GAAG,CAAC,iCAAiC6W,MAAM,CAACxT,SAAS,CAAC,GACtD,IAAI,CAACxD,MAAM;UACnB,IAAI,CAAC2T,YAAY,CAAC1Q,WAAW,GAAGyS,EAAE,CAACpU,KAAK;QAC5C;MACJ;MACA,IAAI,CAACqS,YAAY,CAAClF,iBAAiB,CAAC,CAAC;IACzC;IACA,IAAI,CAACgF,UAAU,GAAG,KAAK;IACvB,IAAI,CAACI,OAAO,CAAC,CAAC;EAClB;EACAoD,OAAOA,CAACxB,CAAC,EAAE;IACP,IAAI,CAAC,IAAI,CAACnC,UAAU,EAAE;MAClB;IACJ;IACA,MAAMoC,EAAE,GAAGD,CAAC,CAACE,MAAM;IACnB,MAAMuB,QAAQ,GAAG,CAAC;IAClB,MAAMC,MAAM,GAAG,CAAC;IAChB,IAAIzB,EAAE,KAAK,IAAI,IACXA,EAAE,CAACI,cAAc,KAAK,IAAI,IAC1BJ,EAAE,CAACI,cAAc,KAAKJ,EAAE,CAAC0B,YAAY,IACrC1B,EAAE,CAACI,cAAc,GAAG,IAAI,CAACnC,YAAY,CAAC1T,MAAM,CAACoE,MAAM;IACnD;IACAoR,CAAC,CAAC4B,OAAO,KAAK,EAAE,EAAE;MAClB,IAAI,IAAI,CAAC1D,YAAY,CAACrT,aAAa,IAAI,CAAC,IAAI,CAACa,sBAAsB,EAAE;QACjE;QACA,IAAI,CAACwS,YAAY,CAACrH,WAAW,GAAG,IAAI,CAACqH,YAAY,CAACxG,eAAe,CAAC,CAAC;QACnE,IAAIuI,EAAE,CAACgB,iBAAiB,IACpB,IAAI,CAAC/C,YAAY,CAAC1T,MAAM,GAAG,IAAI,CAAC0T,YAAY,CAACrH,WAAW,KAAKoJ,EAAE,CAACpU,KAAK,EAAE;UACvE;UACAoU,EAAE,CAAC4B,KAAK,CAAC,CAAC;UACV5B,EAAE,CAACgB,iBAAiB,CAACQ,QAAQ,EAAEC,MAAM,CAAC;QAC1C,CAAC,MACI;UACD;UACA,IAAIzB,EAAE,CAACI,cAAc,GAAG,IAAI,CAACnC,YAAY,CAAC1Q,WAAW,CAACoB,MAAM,EAAE;YAC1D;YACAqR,EAAE,CAACgB,iBAAiB,CAAC,IAAI,CAAC/C,YAAY,CAAC1Q,WAAW,CAACoB,MAAM,EAAE,IAAI,CAACsP,YAAY,CAAC1Q,WAAW,CAACoB,MAAM,CAAC;UACpG;QACJ;MACJ;IACJ;IACA,MAAMkT,SAAS,GAAG7B,EAAE,KACfA,EAAE,CAACpU,KAAK,KAAK,IAAI,CAACqS,YAAY,CAAC1T,MAAM,GAChC,IAAI,CAAC0T,YAAY,CAAC1T,MAAM,GAAG,IAAI,CAAC0T,YAAY,CAACrH,WAAW,GACxDoJ,EAAE,CAACpU,KAAK,CAAC;IACnB;IACA,IAAIoU,EAAE,IAAIA,EAAE,CAACpU,KAAK,KAAKiW,SAAS,EAAE;MAC9B7B,EAAE,CAACpU,KAAK,GAAGiW,SAAS;IACxB;IACA;IACA,IAAI7B,EAAE,IACFA,EAAE,CAACxJ,IAAI,KAAK,QAAQ,IACpB,CAACwJ,EAAE,CAACI,cAAc,IAAIJ,EAAE,CAAC0B,YAAY,KACjC,IAAI,CAACzD,YAAY,CAAC1T,MAAM,CAACoE,MAAM,EAAE;MACrCqR,EAAE,CAACI,cAAc,GAAG,IAAI,CAACnC,YAAY,CAAC1T,MAAM,CAACoE,MAAM;MACnD;IACJ;IACA;IACA,IAAIqR,EAAE,IAAIA,EAAE,CAAC0B,YAAY,GAAG,IAAI,CAACX,qBAAqB,CAAC,CAAC,EAAE;MACtDf,EAAE,CAAC0B,YAAY,GAAG,IAAI,CAACX,qBAAqB,CAAC,CAAC;IAClD;EACJ;EACA;EACAe,SAASA,CAAC/B,CAAC,EAAE;IACT,IAAI,CAAC,IAAI,CAACnC,UAAU,EAAE;MAClB;IACJ;IACA,IAAI,IAAI,CAACI,YAAY,EAAE;MACnB;MACA,IAAI+B,CAAC,CAAClE,GAAG,KAAK,OAAO,EACjB,IAAI,CAACuF,gBAAgB,CAACrB,CAAC,CAAC;MAC5B;IACJ;IACA,IAAI,CAACU,KAAK,GAAGV,CAAC,CAACgC,IAAI,GAAGhC,CAAC,CAACgC,IAAI,GAAGhC,CAAC,CAAClE,GAAG;IACpC,MAAMmE,EAAE,GAAGD,CAAC,CAACE,MAAM;IACnB,IAAI,CAACE,WAAW,GAAGH,EAAE,CAACpU,KAAK;IAC3B,IAAI,CAACgT,QAAQ,CAAC,CAAC;IACf,IAAIoB,EAAE,CAACxJ,IAAI,KAAK,QAAQ,EAAE;MACtB,IAAIuJ,CAAC,CAAClE,GAAG,KAAK,SAAS,CAAC,+BAA+B;QACnDkE,CAAC,CAACiC,cAAc,CAAC,CAAC;MACtB;MACA,IAAIjC,CAAC,CAAClE,GAAG,KAAK,WAAW,CAAC,mCACtBkE,CAAC,CAAClE,GAAG,KAAK,WAAW,CAAC,kCACtBkE,CAAC,CAAClE,GAAG,KAAK,QAAQ,CAAC,6BAA6B;QAChD,IAAIkE,CAAC,CAAClE,GAAG,KAAK,WAAW,CAAC,kCAAkCmE,EAAE,CAACpU,KAAK,CAAC+C,MAAM,KAAK,CAAC,EAAE;UAC/EqR,EAAE,CAACI,cAAc,GAAGJ,EAAE,CAAC0B,YAAY;QACvC;QACA,IAAI3B,CAAC,CAAClE,GAAG,KAAK,WAAW,CAAC,kCAAkCmE,EAAE,CAACI,cAAc,KAAK,CAAC,EAAE;UACjF;UACA,IAAI,CAAC/U,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,EAAEsD,MAAM,GACjD,IAAI,CAACtD,iBAAiB,GACtB,IAAI,CAAC8B,OAAO,CAAC9B,iBAAiB;UACpC,IAAI,IAAI,CAACd,MAAM,CAACoE,MAAM,GAAG,CAAC,IACtBqR,EAAE,CAACI,cAAc,IAAI,IAAI,CAAC7V,MAAM,CAACoE,MAAM,EAAE;YACzCqR,EAAE,CAACgB,iBAAiB,CAAC,IAAI,CAACzW,MAAM,CAACoE,MAAM,EAAEqR,EAAE,CAAC0B,YAAY,CAAC;UAC7D,CAAC,MACI;YACD,IAAI,IAAI,CAACvB,WAAW,CAACxR,MAAM,KAAKqR,EAAE,CAACI,cAAc,IAC7CJ,EAAE,CAACI,cAAc,KAAK,CAAC,EAAE;cACzB,OAAO,IAAI,CAAC/U,iBAAiB,CAACuE,QAAQ,CAAC,CAAC,IAAI,CAACuQ,WAAW,CAACH,EAAE,CAACI,cAAc,GAAG,CAAC,CAAC,IAC3E,EAAE,CAAC,mCAAmC7O,QAAQ,CAAC,CAAC,CAAC,KAC/C,IAAI,CAAChH,MAAM,CAACoE,MAAM,IAAI,CAAC,IACrBqR,EAAE,CAACI,cAAc,GAAG,IAAI,CAAC7V,MAAM,CAACoE,MAAM,IACtC,IAAI,CAACpE,MAAM,CAACoE,MAAM,KAAK,CAAC,CAAC,EAAE;gBAC/BqR,EAAE,CAACgB,iBAAiB,CAAChB,EAAE,CAACI,cAAc,GAAG,CAAC,EAAEJ,EAAE,CAAC0B,YAAY,CAAC;cAChE;YACJ;UACJ;QACJ;QACA,IAAI,CAACO,wBAAwB,CAACjC,EAAE,CAAC;QACjC,IAAI,IAAI,CAAC/B,YAAY,CAAC1T,MAAM,CAACoE,MAAM,IAC/BqR,EAAE,CAACI,cAAc,IAAI,IAAI,CAACnC,YAAY,CAAC1T,MAAM,CAACoE,MAAM,IACpDqR,EAAE,CAAC0B,YAAY,IAAI,IAAI,CAACzD,YAAY,CAAC1T,MAAM,CAACoE,MAAM,EAAE;UACpDoR,CAAC,CAACiC,cAAc,CAAC,CAAC;QACtB;QACA,MAAME,WAAW,GAAGlC,EAAE,CAACI,cAAc;QACrC,IAAIL,CAAC,CAAClE,GAAG,KAAK,WAAW,CAAC,kCACtB,CAACmE,EAAE,CAACmC,QAAQ,IACZD,WAAW,KAAK,CAAC,IACjBlC,EAAE,CAAC0B,YAAY,KAAK1B,EAAE,CAACpU,KAAK,CAAC+C,MAAM,IACnCqR,EAAE,CAACpU,KAAK,CAAC+C,MAAM,KAAK,CAAC,EAAE;UACvB,IAAI,CAACkP,SAAS,GAAG,IAAI,CAACI,YAAY,CAAC1T,MAAM,GAAG,IAAI,CAAC0T,YAAY,CAAC1T,MAAM,CAACoE,MAAM,GAAG,CAAC;UAC/E,IAAI,CAACsP,YAAY,CAACtN,SAAS,CAAC,IAAI,CAACsN,YAAY,CAAC1T,MAAM,EAAE,IAAI,CAAC0T,YAAY,CAAC3Q,cAAc,EAAE,IAAI,CAACuQ,SAAS,CAAC;QAC3G;MACJ;MACA,IAAI,CAAC,CAAC,IAAI,CAACvT,MAAM,IACb,IAAI,CAACA,MAAM,CAACqE,MAAM,GAAG,CAAC,IACtB,IAAI,CAACwR,WAAW,CAACxR,MAAM,GAAG,IAAI,CAACrE,MAAM,CAACqE,MAAM,GAAGqR,EAAE,CAACI,cAAc,EAAE;QAClEJ,EAAE,CAACgB,iBAAiB,CAAC,IAAI,CAACb,WAAW,CAACxR,MAAM,GAAG,IAAI,CAACrE,MAAM,CAACqE,MAAM,EAAE,IAAI,CAACwR,WAAW,CAACxR,MAAM,CAAC;MAC/F,CAAC,MACI,IAAKoR,CAAC,CAACgC,IAAI,KAAK,MAAM,IAAIhC,CAAC,CAACqC,OAAO,IACnCrC,CAAC,CAACgC,IAAI,KAAK,MAAM,IAAIhC,CAAC,CAACsC,OAAQ,CAAC;MAAA,EACnC;QACErC,EAAE,CAACgB,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAACD,qBAAqB,CAAC,CAAC,CAAC;QACrDhB,CAAC,CAACiC,cAAc,CAAC,CAAC;MACtB;MACA,IAAI,CAAC/D,YAAY,CAACpH,QAAQ,GAAGmJ,EAAE,CAACI,cAAc;MAC9C,IAAI,CAACnC,YAAY,CAACnH,MAAM,GAAGkJ,EAAE,CAAC0B,YAAY;IAC9C;EACJ;EACA;EACMY,UAAUA,CAACC,YAAY,EAAE;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC3B,IAAI,OAAOF,YAAY,KAAK,QAAQ,IAAIA,YAAY,KAAK,IAAI,IAAI,OAAO,IAAIA,YAAY,EAAE;QACtF,IAAI,SAAS,IAAIA,YAAY,EAAE;UAC3BC,KAAI,CAACE,gBAAgB,CAACzK,OAAO,CAACsK,YAAY,CAACI,OAAO,CAAC,CAAC;QACxD;QACA;QACAJ,YAAY,GAAGA,YAAY,CAAC3W,KAAK;MACrC;MACA,IAAI2W,YAAY,KAAK,IAAI,EAAE;QACvB;QACAA,YAAY,GAAGC,KAAI,CAAC7W,gBAAgB,GAC9B6W,KAAI,CAAC7W,gBAAgB,CAAC4W,YAAY,CAAC,GACnCA,YAAY;MACtB;MACA,IAAI,OAAOA,YAAY,KAAK,QAAQ,IAChC,OAAOA,YAAY,KAAK,QAAQ,IAChCA,YAAY,KAAK,IAAI,IACrBA,YAAY,KAAKvX,SAAS,EAAE;QAC5B,IAAIuX,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAKvX,SAAS,EAAE;UACrDwX,KAAI,CAACvE,YAAY,CAAC9G,aAAa,GAAG,EAAE;UACpCqL,KAAI,CAACvE,YAAY,CAAC/G,cAAc,GAAG,EAAE;QACzC;QACA;QACA,IAAIzH,UAAU,GAAG8S,YAAY;QAC7B,IAAI,OAAO9S,UAAU,KAAK,QAAQ,IAC9B+S,KAAI,CAAC5E,UAAU,CAAC9L,UAAU,CAAC,WAAW,CAAC,8BAA8B,CAAC,EAAE;UACxE;UACArC,UAAU,GAAG8J,MAAM,CAAC9J,UAAU,CAAC;UAC/B,MAAMmT,mBAAmB,GAAGJ,KAAI,CAACvE,YAAY,CAACnB,0BAA0B,CAAC,CAAC;UAC1E,IAAI,CAAC7O,KAAK,CAACC,OAAO,CAACsU,KAAI,CAACvE,YAAY,CAACxT,aAAa,CAAC,EAAE;YACjD;YACAgF,UAAU,GACN+S,KAAI,CAACvE,YAAY,CAACxT,aAAa,KAAKmY,mBAAmB,GACjDnT,UAAU,CAACZ,OAAO,CAAC+T,mBAAmB,EAAEJ,KAAI,CAACvE,YAAY,CAACxT,aAAa,CAAC,GACxEgF,UAAU;UACxB;UACA,IAAI+S,KAAI,CAACvE,YAAY,CAACzS,QAAQ,IAC1BiE,UAAU,IACV+S,KAAI,CAAClV,cAAc,IACnBkV,KAAI,CAAC1X,qBAAqB,KAAK,KAAK,EAAE;YACtC;YACA2E,UAAU,GAAG+S,KAAI,CAACvE,YAAY,CAACrC,eAAe,CAAC4G,KAAI,CAACvE,YAAY,CAAC3Q,cAAc,EAAEmC,UAAU,CAAC;UAChG;UACA,IAAI+S,KAAI,CAACvE,YAAY,CAACxT,aAAa,KAAK,GAAG,CAAC,4BAA4B;YACpE;YACAgF,UAAU,GAAGA,UAAU,CAClB8B,QAAQ,CAAC,CAAC,CACV1C,OAAO,CAAC,GAAG,CAAC,0BAA0B,GAAG,CAAC,0BAA0B,CAAC;UAC9E;;UACA,IAAI2T,KAAI,CAAClV,cAAc,EAAEwE,UAAU,CAAC,WAAW,CAAC,8BAA8B,CAAC,IAAI0Q,KAAI,CAAChX,QAAQ,EAAE;YAC9FsT,qBAAqB,CAAC,MAAM;cACxB0D,KAAI,CAACvE,YAAY,CAACtN,SAAS,CAAClB,UAAU,EAAE8B,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAEiR,KAAI,CAACvE,YAAY,CAAC3Q,cAAc,CAAC;YAC/F,CAAC,CAAC;UACN;UACAkV,KAAI,CAACvE,YAAY,CAACtH,aAAa,GAAG,IAAI;QAC1C;QACA,IAAI,OAAOlH,UAAU,KAAK,QAAQ,EAAE;UAChC;UACAA,UAAU,GAAG,EAAE;QACnB;QACA+S,KAAI,CAACrC,WAAW,GAAG1Q,UAAU;QAC7B+S,KAAI,CAAC5D,QAAQ,CAAC,CAAC;QACf,IAAKnP,UAAU,IAAI+S,KAAI,CAACvE,YAAY,CAAC3Q,cAAc,IAC9CkV,KAAI,CAACvE,YAAY,CAAC3Q,cAAc,KAC5BkV,KAAI,CAACvE,YAAY,CAAC1T,MAAM,IAAIiY,KAAI,CAACvE,YAAY,CAACrT,aAAa,CAAE,EAAE;UACpE;UACA,OAAO4X,KAAI,CAAC7W,gBAAgB,KAAK,UAAU,GACpC6W,KAAI,CAACvE,YAAY,CAAClH,YAAY,GAAG,IAAI,GACtC,EAAE;UACRyL,KAAI,CAACvE,YAAY,CAAClE,mBAAmB,GAAG,CACpC,OAAO,EACPyI,KAAI,CAACvE,YAAY,CAACtN,SAAS,CAAClB,UAAU,EAAE+S,KAAI,CAACvE,YAAY,CAAC3Q,cAAc,CAAC,CAC5E;UACD;UACA,OAAOkV,KAAI,CAAC7W,gBAAgB,KAAK,UAAU,GACpC6W,KAAI,CAACvE,YAAY,CAAClH,YAAY,GAAG,KAAK,GACvC,EAAE;QACZ,CAAC,MACI;UACDyL,KAAI,CAACvE,YAAY,CAAClE,mBAAmB,GAAG,CAAC,OAAO,EAAEtK,UAAU,CAAC;QACjE;QACA+S,KAAI,CAACrC,WAAW,GAAG1Q,UAAU;MACjC,CAAC,MACI;QACDwR,OAAO,CAACC,IAAI,CAAC,oEAAoE,EAAE,OAAOqB,YAAY,CAAC;MAC3G;IAAC;EACL;EACAM,gBAAgBA,CAACC,EAAE,EAAE;IACjB,IAAI,CAAC7E,YAAY,CAAC5G,QAAQ,GAAG,IAAI,CAACA,QAAQ,GAAGyL,EAAE;EACnD;EACAC,iBAAiBA,CAACD,EAAE,EAAE;IAClB,IAAI,CAAC3E,OAAO,GAAG2E,EAAE;EACrB;EACAhK,iBAAiBA,CAACvB,QAAQ,GAAG,IAAI,CAACA,QAAQ,EAAE;IACxC,MAAMsD,YAAY,GAAGtD,QAAQ,EAAEuD,aAAa,EAAEC,UAAU;IACxD,IAAI,CAACF,YAAY,EAAEC,aAAa,EAAE;MAC9B,OAAOvD,QAAQ,CAACuD,aAAa;IACjC,CAAC,MACI;MACD,OAAO,IAAI,CAAChC,iBAAiB,CAAC+B,YAAY,CAAC;IAC/C;EACJ;EACAoH,wBAAwBA,CAACjC,EAAE,EAAE;IACzBA,EAAE,CAACI,cAAc,GAAG4C,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAAC,IAAI,CAAC3Y,MAAM,CAACoE,MAAM,EAAEqR,EAAE,CAACI,cAAc,CAAC,EAAE,IAAI,CAACD,WAAW,CAACxR,MAAM,GAAG,IAAI,CAACrE,MAAM,CAACqE,MAAM,CAAC;IAC3HqR,EAAE,CAAC0B,YAAY,GAAGsB,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAAC,IAAI,CAAC3Y,MAAM,CAACoE,MAAM,EAAEqR,EAAE,CAAC0B,YAAY,CAAC,EAAE,IAAI,CAACvB,WAAW,CAACxR,MAAM,GAAG,IAAI,CAACrE,MAAM,CAACqE,MAAM,CAAC;EAC3H;EACA;EACA+T,gBAAgBA,CAACS,UAAU,EAAE;IACzB,IAAI,CAAClF,YAAY,CAAClE,mBAAmB,GAAG,CAAC,UAAU,EAAEoJ,UAAU,CAAC;EACpE;EACA;EACAnE,UAAUA,CAAA,EAAG;IACT,IAAI,CAACf,YAAY,CAAC3Q,cAAc,GAAG,IAAI,CAAC2Q,YAAY,CAAC7B,qBAAqB,CAAC,IAAI,CAACwB,UAAU,IAAI,EAAE,CAAC;IACjG,IAAI,CAACK,YAAY,CAAClE,mBAAmB,GAAG,CACpC,OAAO,EACP,IAAI,CAACkE,YAAY,CAACtN,SAAS,CAAC,IAAI,CAACwP,WAAW,EAAE,IAAI,CAAClC,YAAY,CAAC3Q,cAAc,CAAC,CAClF;EACL;EACA6R,aAAaA,CAACvT,KAAK,EAAE;IACjB,MAAMwX,UAAU,GAAG,IAAI,CAACxF,UAAU,CAC7BpP,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC,CAC3CqG,MAAM,CAAE/H,CAAC,IAAKA,CAAC,KAAK,GAAG,CAAC,CAAC6B,MAAM;IACpC,IAAI,CAAC/C,KAAK,EAAE;MACR,OAAO,IAAI,CAAC,CAAC;IACjB;;IACA,IAAK,EAAEA,KAAK,CAACA,KAAK,CAAC+C,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI/C,KAAK,CAAC+C,MAAM,GAAGyU,UAAU,IACpExX,KAAK,CAAC+C,MAAM,IAAIyU,UAAU,GAAG,CAAC,EAAE;MAChC,OAAO,IAAI,CAAClE,sBAAsB,CAACtT,KAAK,CAAC;IAC7C;IACA,OAAO,IAAI;EACf;EACAmV,qBAAqBA,CAAA,EAAG;IACpB,OAAQ,IAAI,CAAC9C,YAAY,CAAC1Q,WAAW,CAACoB,MAAM,IACxC,IAAI,CAACsP,YAAY,CAAC1Q,WAAW,CAACoB,MAAM,GAAG,IAAI,CAACsP,YAAY,CAAC1T,MAAM,CAACoE,MAAM;EAC9E;EACAuQ,sBAAsBA,CAAC3R,WAAW,EAAE;IAChC,OAAO;MACHkD,IAAI,EAAE;QACF4S,YAAY,EAAE,IAAI,CAACzF,UAAU;QAC7BrQ;MACJ;IACJ,CAAC;EACL;EACAqR,QAAQA,CAAA,EAAG;IACP,IAAI,CAAC3H,oBAAoB,CAAC7B,IAAI,CAAE3E,IAAI,IAAK;MACrC,MAAMoD,YAAY,GAAGpD,IAAI,CACpBjC,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC,CAC3C4G,IAAI,CAAEX,IAAI,IAAK,IAAI,CAACwJ,YAAY,CAAC5S,iBAAiB,CAACuE,QAAQ,CAAC6E,IAAI,CAAC,CAAC;MACvE,IAAKZ,YAAY,IAAI,IAAI,CAACsM,WAAW,IAAI,CAAC1P,IAAI,CAACb,QAAQ,CAAC,GAAG,CAAC,6BAA6B,CAAC,IACtFa,IAAI,CAACb,QAAQ,CAAC,GAAG,CAAC,wCAAwC,CAAC,EAAE;QAC7D,MAAMZ,IAAI,GAAG,IAAI,CAACiP,YAAY,CAAClG,UAAU,CAAC,IAAI,CAACoI,WAAW,CAAC,EAAExR,MAAM,IAC/D,IAAI,CAACsP,YAAY,CAAClG,UAAU,CAACtH,IAAI,CAAC,EAAE9B,MAAM;QAC9C,IAAIK,IAAI,EAAE;UACN,IAAI,CAAC4O,UAAU,GACX,IAAI,CAACtQ,cAAc,GACf,IAAI,CAAC2Q,YAAY,CAAC3Q,cAAc,GAC5BmD,IAAI,CAACb,QAAQ,CAAC,GAAG,CAAC,wCAAwC,CAAC,GACrD,IAAI,CAACqO,YAAY,CAAC7B,qBAAqB,CAAC3L,IAAI,CAAC,GAC7CA,IAAI;UACtB,OAAOzB,IAAI;QACf,CAAC,MACI;UACD,MAAMsU,UAAU,GAAG,IAAI,CAACrM,oBAAoB,CAAC,IAAI,CAACA,oBAAoB,CAACtI,MAAM,GAAG,CAAC,CAAC,IAC9E,EAAE,CAAC;UACP,IAAI,CAACiP,UAAU,GACX,IAAI,CAACtQ,cAAc,GACf,IAAI,CAAC2Q,YAAY,CAAC3Q,cAAc,GAC5BgW,UAAU,CAAC1T,QAAQ,CAAC,GAAG,CAAC,wCAAwC,CAAC,GAC3D,IAAI,CAACqO,YAAY,CAAC7B,qBAAqB,CAACkH,UAAU,CAAC,GACnDA,UAAU;QAChC;MACJ,CAAC,MACI;QACD,MAAMC,KAAK,GAAG,IAAI,CAACpD,WAAW,EACxB3R,KAAK,CAAC,EAAE,CAAC,iCAAiC,CAAC,CAC5CgG,KAAK,CAAC,CAACgP,SAAS,EAAEnO,KAAK,KAAK;UAC7B,MAAMoO,SAAS,GAAGhT,IAAI,CAACiT,MAAM,CAACrO,KAAK,CAAC;UACpC,OAAO,IAAI,CAAC4I,YAAY,CAACrL,gBAAgB,CAAC4Q,SAAS,EAAEC,SAAS,CAAC;QACnE,CAAC,CAAC;QACF,IAAIF,KAAK,EAAE;UACP,IAAI,CAAC3F,UAAU,GAAG,IAAI,CAACtQ,cAAc,GAAG,IAAI,CAAC2Q,YAAY,CAAC3Q,cAAc,GAAGmD,IAAI;UAC/E,OAAO8S,KAAK;QAChB;MACJ;IACJ,CAAC,CAAC;EACN;EAAC,QAAA1N,CAAA,GACQ,IAAI,CAACC,IAAI,YAAA6N,yBAAA3N,CAAA;IAAA,YAAAA,CAAA,IAAyF2H,gBAAgB;EAAA,CAAmD;EAAA,QAAA1H,EAAA,GACrK,IAAI,CAAC2N,IAAI,kBAv6C+E1a,EAAE,CAAA2a,iBAAA;IAAArN,IAAA,EAu6CJmH,gBAAgB;IAAAmG,SAAA;IAAAC,YAAA,WAAAC,8BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QAv6Cd/a,EAAE,CAAAib,UAAA,mBAAAC,0CAAA;UAAA,OAu6CJF,GAAA,CAAAvE,OAAA,CAAQ,CAAC;QAAA,qBAAA0E,0CAAAC,MAAA;UAAA,OAATJ,GAAA,CAAAtE,OAAA,CAAA0E,MAAc,CAAC;QAAA,6BAAAC,kDAAAD,MAAA;UAAA,OAAfJ,GAAA,CAAArE,aAAA,CAAAyE,MAAoB,CAAC;QAAA,qBAAAE,0CAAAF,MAAA;UAAA,OAArBJ,GAAA,CAAApE,OAAA,CAAAwE,MAAc,CAAC;QAAA,gCAAAG,qDAAAH,MAAA;UAAA,OAAfJ,GAAA,CAAA/C,kBAAA,CAAAmD,MAAyB,CAAC;QAAA,8BAAAI,mDAAAJ,MAAA;UAAA,OAA1BJ,GAAA,CAAA9C,gBAAA,CAAAkD,MAAuB,CAAC;QAAA,oBAAAK,yCAAAL,MAAA;UAAA,OAAxBJ,GAAA,CAAA7C,MAAA,CAAAiD,MAAa,CAAC;QAAA,qBAAAM,0CAAAN,MAAA;UAAA,OAAdJ,GAAA,CAAA3C,OAAA,CAAA+C,MAAc,CAAC;QAAA,uBAAAO,4CAAAP,MAAA;UAAA,OAAfJ,GAAA,CAAApC,SAAA,CAAAwC,MAAgB,CAAC;QAAA;MAAA;IAAA;IAAAQ,MAAA;MAAAxX,cAAA;MAAAjC,iBAAA;MAAAU,QAAA;MAAAxB,MAAA;MAAAD,MAAA;MAAAE,iBAAA;MAAAC,aAAA;MAAAK,qBAAA;MAAAC,WAAA;MAAAH,aAAA;MAAAC,oBAAA;MAAAI,mBAAA;MAAAN,YAAA;MAAAD,eAAA;MAAAU,UAAA;MAAAF,cAAA;MAAAC,oBAAA;MAAAG,gBAAA;MAAAE,QAAA;MAAAE,mBAAA;MAAAH,GAAA;MAAAI,gBAAA;MAAAE,iBAAA;MAAAJ,sBAAA;IAAA;IAAAsZ,OAAA;MAAAjZ,UAAA;IAAA;IAAAkZ,QAAA;IAAAC,UAAA;IAAAC,QAAA,GAv6Cfhc,EAAE,CAAAic,kBAAA,CAu6C4wC,CACv2C;MACI5H,OAAO,EAAEvT,iBAAiB;MAC1Bob,WAAW,EAAEzH,gBAAgB;MAC7BzM,KAAK,EAAE;IACX,CAAC,EACD;MACIqM,OAAO,EAAEtT,aAAa;MACtBmb,WAAW,EAAEzH,gBAAgB;MAC7BzM,KAAK,EAAE;IACX,CAAC,EACDuF,cAAc,CACjB,GAn7C4FvN,EAAE,CAAAmc,oBAAA;EAAA,EAm7CzB;AAC9E;AACA;EAAA,QAAA/O,SAAA,oBAAAA,SAAA,KAr7CqGpN,EAAE,CAAAqN,iBAAA,CAq7CXoH,gBAAgB,EAAc,CAAC;IAC/GnH,IAAI,EAAE9M,SAAS;IACf4b,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,6BAA6B;MACvCN,UAAU,EAAE,IAAI;MAChBO,SAAS,EAAE,CACP;QACIjI,OAAO,EAAEvT,iBAAiB;QAC1Bob,WAAW,EAAEzH,gBAAgB;QAC7BzM,KAAK,EAAE;MACX,CAAC,EACD;QACIqM,OAAO,EAAEtT,aAAa;QACtBmb,WAAW,EAAEzH,gBAAgB;QAC7BzM,KAAK,EAAE;MACX,CAAC,EACDuF,cAAc,CACjB;MACDuO,QAAQ,EAAE;IACd,CAAC;EACT,CAAC,CAAC,QAAkB;IAAE1X,cAAc,EAAE,CAAC;MAC/BkJ,IAAI,EAAE7M,KAAK;MACX2b,IAAI,EAAE,CAAC,MAAM;IACjB,CAAC,CAAC;IAAEja,iBAAiB,EAAE,CAAC;MACpBmL,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEoC,QAAQ,EAAE,CAAC;MACXyK,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEY,MAAM,EAAE,CAAC;MACTiM,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEW,MAAM,EAAE,CAAC;MACTkM,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEa,iBAAiB,EAAE,CAAC;MACpBgM,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEc,aAAa,EAAE,CAAC;MAChB+L,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEmB,qBAAqB,EAAE,CAAC;MACxB0L,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEoB,WAAW,EAAE,CAAC;MACdyL,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEiB,aAAa,EAAE,CAAC;MAChB4L,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEkB,oBAAoB,EAAE,CAAC;MACvB2L,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEsB,mBAAmB,EAAE,CAAC;MACtBuL,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEgB,YAAY,EAAE,CAAC;MACf6L,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEe,eAAe,EAAE,CAAC;MAClB8L,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEyB,UAAU,EAAE,CAAC;MACboL,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEuB,cAAc,EAAE,CAAC;MACjBsL,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEwB,oBAAoB,EAAE,CAAC;MACvBqL,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAE2B,gBAAgB,EAAE,CAAC;MACnBkL,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAE6B,QAAQ,EAAE,CAAC;MACXgL,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAE+B,mBAAmB,EAAE,CAAC;MACtB8K,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAE4B,GAAG,EAAE,CAAC;MACNiL,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEgC,gBAAgB,EAAE,CAAC;MACnB6K,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEkC,iBAAiB,EAAE,CAAC;MACpB2K,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAE8B,sBAAsB,EAAE,CAAC;MACzB+K,IAAI,EAAE7M;IACV,CAAC,CAAC;IAAEmC,UAAU,EAAE,CAAC;MACb0K,IAAI,EAAE5M;IACV,CAAC,CAAC;IAAE+V,OAAO,EAAE,CAAC;MACVnJ,IAAI,EAAE3M,YAAY;MAClByb,IAAI,EAAE,CAAC,OAAO;IAClB,CAAC,CAAC;IAAE1F,OAAO,EAAE,CAAC;MACVpJ,IAAI,EAAE3M,YAAY;MAClByb,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;IAC9B,CAAC,CAAC;IAAEzF,aAAa,EAAE,CAAC;MAChBrJ,IAAI,EAAE3M,YAAY;MAClByb,IAAI,EAAE,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;IACtC,CAAC,CAAC;IAAExF,OAAO,EAAE,CAAC;MACVtJ,IAAI,EAAE3M,YAAY;MAClByb,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;IAC9B,CAAC,CAAC;IAAEnE,kBAAkB,EAAE,CAAC;MACrB3K,IAAI,EAAE3M,YAAY;MAClByb,IAAI,EAAE,CAAC,kBAAkB,EAAE,CAAC,QAAQ,CAAC;IACzC,CAAC,CAAC;IAAElE,gBAAgB,EAAE,CAAC;MACnB5K,IAAI,EAAE3M,YAAY;MAClByb,IAAI,EAAE,CAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC;IACvC,CAAC,CAAC;IAAEjE,MAAM,EAAE,CAAC;MACT7K,IAAI,EAAE3M,YAAY;MAClByb,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC;IAC7B,CAAC,CAAC;IAAE/D,OAAO,EAAE,CAAC;MACV/K,IAAI,EAAE3M,YAAY;MAClByb,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;IAC9B,CAAC,CAAC;IAAExD,SAAS,EAAE,CAAC;MACZtL,IAAI,EAAE3M,YAAY;MAClByb,IAAI,EAAE,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;IAChC,CAAC;EAAE,CAAC;AAAA;AAEhB,MAAMG,WAAW,CAAC;EACdvY,WAAWA,CAAA,EAAG;IACV,IAAI,CAACwY,cAAc,GAAG,CAAC,CAAC;IACxB,IAAI,CAACzH,YAAY,GAAG5U,MAAM,CAACoN,cAAc,CAAC;IAC1C,IAAI,CAACQ,oBAAoB,GAAG,EAAE;IAC9B,IAAI,CAACxG,IAAI,GAAG,EAAE;EAClB;EACAkV,SAASA,CAAC/Z,KAAK,EAAE6E,IAAI,EAAE;IAAE1E,QAAQ;IAAE,GAAG6Z;EAAO,CAAC,GAAG,CAAC,CAAC,EAAE;IACjD,MAAMC,aAAa,GAAG;MAClBvY,cAAc,EAAEmD,IAAI;MACpB,GAAG,IAAI,CAACiV,cAAc;MACtB,GAAGE,MAAM;MACT7Z,QAAQ,EAAE;QACN,GAAG,IAAI,CAACkS,YAAY,CAAClS,QAAQ;QAC7B,GAAGA;MACP;IACJ,CAAC;IACD+Z,MAAM,CAACC,OAAO,CAACF,aAAa,CAAC,CAACG,OAAO,CAAC,CAAC,CAACnK,GAAG,EAAEjQ,KAAK,CAAC,KAAK;MACpD;MACA,IAAI,CAACqS,YAAY,CAACpC,GAAG,CAAC,GAAGjQ,KAAK;IAClC,CAAC,CAAC;IACF,IAAI6E,IAAI,CAACb,QAAQ,CAAC,IAAI,CAAC,EAAE;MACrB,IAAIa,IAAI,CAACjC,KAAK,CAAC,IAAI,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;QAC7B,IAAI,CAACsI,oBAAoB,GAAGxG,IAAI,CAACjC,KAAK,CAAC,IAAI,CAAC,CAACiQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACxD,OAAOD,CAAC,CAAC/P,MAAM,GAAGgQ,CAAC,CAAChQ,MAAM;QAC9B,CAAC,CAAC;QACF,IAAI,CAACiQ,QAAQ,CAAChT,KAAK,CAAC;QACpB,OAAO,IAAI,CAACqS,YAAY,CAACtN,SAAS,CAAE,GAAE/E,KAAM,EAAC,EAAE,IAAI,CAAC6E,IAAI,CAAC;MAC7D,CAAC,MACI;QACD,IAAI,CAACwG,oBAAoB,GAAG,EAAE;QAC9B,OAAO,IAAI,CAACgH,YAAY,CAACtN,SAAS,CAAE,GAAE/E,KAAM,EAAC,EAAE,IAAI,CAAC6E,IAAI,CAAC;MAC7D;IACJ;IACA,IAAIA,IAAI,CAACb,QAAQ,CAAC,GAAG,CAAC,wCAAwC,CAAC,EAAE;MAC7D,OAAO,IAAI,CAACqO,YAAY,CAACtN,SAAS,CAAE,GAAE/E,KAAM,EAAC,EAAE,IAAI,CAACqS,YAAY,CAAC7B,qBAAqB,CAAC3L,IAAI,CAAC,CAAC;IACjG;IACA,IAAIA,IAAI,CAACqB,UAAU,CAAC,WAAW,CAAC,8BAA8B,CAAC,EAAE;MAC7D,IAAI8T,MAAM,CAACnb,aAAa,EAAE;QACtB,IAAI,CAACwT,YAAY,CAACxT,aAAa,GAAGmb,MAAM,CAACnb,aAAa;MAC1D;MACA,IAAImb,MAAM,CAACpb,iBAAiB,EAAE;QAC1B,IAAI,CAACyT,YAAY,CAACzT,iBAAiB,GAAGob,MAAM,CAACpb,iBAAiB;MAClE;MACA,IAAIob,MAAM,CAACpa,QAAQ,EAAE;QACjB;QACA,IAAI,CAACyS,YAAY,CAACzS,QAAQ,GAAGoa,MAAM,CAACpa,QAAQ;MAChD;MACA;MACAI,KAAK,GAAG2N,MAAM,CAAC3N,KAAK,CAAC;MACrB,MAAMgX,mBAAmB,GAAG,IAAI,CAAC3E,YAAY,CAACnB,0BAA0B,CAAC,CAAC;MAC1E,IAAI,CAAC7O,KAAK,CAACC,OAAO,CAAC,IAAI,CAAC+P,YAAY,CAACxT,aAAa,CAAC,EAAE;QACjD;QACAmB,KAAK,GACD,IAAI,CAACqS,YAAY,CAACxT,aAAa,KAAKmY,mBAAmB,GACjDhX,KAAK,CAACiD,OAAO,CAAC+T,mBAAmB,EAAE,IAAI,CAAC3E,YAAY,CAACxT,aAAa,CAAC,GACnEmB,KAAK;MACnB;MACA,IAAI,IAAI,CAACqS,YAAY,CAACzS,QAAQ,IAC1BI,KAAK,IACL,IAAI,CAACqS,YAAY,CAACnT,qBAAqB,KAAK,KAAK,EAAE;QACnD;QACAc,KAAK,GAAG,IAAI,CAACqS,YAAY,CAACrC,eAAe,CAACnL,IAAI,EAAE7E,KAAK,CAAC;MAC1D;MACA,IAAI,IAAI,CAACqS,YAAY,CAACxT,aAAa,KAAK,GAAG,CAAC,4BAA4B;QACpE;QACAmB,KAAK,GAAGA,KAAK,CAAC2F,QAAQ,CAAC,CAAC,CAAC1C,OAAO,CAAC,GAAG,CAAC,0BAA0B,GAAG,CAAC,0BAA0B,CAAC;MAClG;;MACA,IAAI,CAACoP,YAAY,CAACtH,aAAa,GAAG,IAAI;IAC1C;IACA,IAAI/K,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKZ,SAAS,EAAE;MACvC,OAAO,IAAI,CAACiT,YAAY,CAACtN,SAAS,CAAC,EAAE,EAAEF,IAAI,CAAC;IAChD;IACA,OAAO,IAAI,CAACwN,YAAY,CAACtN,SAAS,CAAE,GAAE/E,KAAM,EAAC,EAAE6E,IAAI,CAAC;EACxD;EACAmO,QAAQA,CAAChT,KAAK,EAAE;IACZ,IAAI,IAAI,CAACqL,oBAAoB,CAACtI,MAAM,GAAG,CAAC,EAAE;MACtC,IAAI,CAACsI,oBAAoB,CAAC7B,IAAI,CAAE3E,IAAI,IAAK;QACrC,MAAMzB,IAAI,GAAG,IAAI,CAACiP,YAAY,CAAClG,UAAU,CAACnM,KAAK,CAAC,EAAE+C,MAAM,IACpD,IAAI,CAACsP,YAAY,CAAClG,UAAU,CAACtH,IAAI,CAAC,EAAE9B,MAAM;QAC9C,IAAI/C,KAAK,IAAIoD,IAAI,EAAE;UACf,IAAI,CAACyB,IAAI,GAAGA,IAAI;UAChB,OAAOzB,IAAI;QACf,CAAC,MACI;UACD,MAAMsU,UAAU,GAAG,IAAI,CAACrM,oBAAoB,CAAC,IAAI,CAACA,oBAAoB,CAACtI,MAAM,GAAG,CAAC,CAAC,IAC9E,EAAE,CAAC;UACP,IAAI,CAAC8B,IAAI,GAAG6S,UAAU;QAC1B;MACJ,CAAC,CAAC;IACN;EACJ;EAAC,QAAAzN,CAAA,GACQ,IAAI,CAACC,IAAI,YAAAmQ,oBAAAjQ,CAAA;IAAA,YAAAA,CAAA,IAAyFyP,WAAW;EAAA,CAA8C;EAAA,QAAAxP,EAAA,GAC3J,IAAI,CAACiQ,KAAK,kBAtnD8Ehd,EAAE,CAAAid,YAAA;IAAAnM,IAAA;IAAAxD,IAAA,EAsnDMiP,WAAW;IAAAW,IAAA;IAAAnB,UAAA;EAAA,EAAqC;AAC7J;AACA;EAAA,QAAA3O,SAAA,oBAAAA,SAAA,KAxnDqGpN,EAAE,CAAAqN,iBAAA,CAwnDXkP,WAAW,EAAc,CAAC;IAC1GjP,IAAI,EAAE1M,IAAI;IACVwb,IAAI,EAAE,CAAC;MACCtL,IAAI,EAAE,MAAM;MACZoM,IAAI,EAAE,IAAI;MACVnB,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;;AAEA,SAAS7a,cAAc,EAAED,UAAU,EAAED,eAAe,EAAEyT,gBAAgB,EAAE8H,WAAW,EAAEhP,cAAc,EAAEpM,aAAa,EAAEqT,yBAAyB,EAAEJ,cAAc,EAAEvQ,SAAS,EAAEC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/sidebar.service\";\nimport * as i2 from \"@angular/common\";\nfunction TogglemenuComponent_img_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"img\", 2);\n    i0.ɵɵlistener(\"click\", function TogglemenuComponent_img_0_Template_img_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.toggleSidebar());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TogglemenuComponent_img_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"img\", 3);\n    i0.ɵɵlistener(\"click\", function TogglemenuComponent_img_2_Template_img_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.toggleSidebar());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nexport class TogglemenuComponent {\n  constructor(sidebarService) {\n    this.sidebarService = sidebarService;\n    this.menuToggled = new EventEmitter(); // Event to notify parent components if necessary\n  }\n  // Get the current state of the sidebar\n  isSidebarOpen() {\n    return this.sidebarService.getSidebarState(); // Use service method to get current state\n  }\n  // Toggle the sidebar visibility\n  toggleSidebar() {\n    this.sidebarService.toggleSidebar(); // Use service to handle the toggle\n  }\n\n  onClick() {\n    this.toggleSidebar(); // Toggle the sidebar state\n    this.menuToggled.emit(); // Notify parent components, if needed\n  }\n  static #_ = this.ɵfac = function TogglemenuComponent_Factory(t) {\n    return new (t || TogglemenuComponent)(i0.ɵɵdirectiveInject(i1.SidebarService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TogglemenuComponent,\n    selectors: [[\"app-togglemenu\"]],\n    outputs: {\n      menuToggled: \"menuToggled\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[\"src\", \"../../../../assets/images/setadireita.png\", \"width\", \"25\", \"height\", \"25\", \"alt\", \"Open Sidebar\", 3, \"click\", 4, \"ngIf\"], [\"src\", \"../../../../assets/images/setaesquerda.png\", \"width\", \"25\", \"height\", \"25\", \"alt\", \"Close Sidebar\", 3, \"click\", 4, \"ngIf\"], [\"src\", \"../../../../assets/images/setadireita.png\", \"width\", \"25\", \"height\", \"25\", \"alt\", \"Open Sidebar\", 3, \"click\"], [\"src\", \"../../../../assets/images/setaesquerda.png\", \"width\", \"25\", \"height\", \"25\", \"alt\", \"Close Sidebar\", 3, \"click\"]],\n    template: function TogglemenuComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TogglemenuComponent_img_0_Template, 1, 0, \"img\", 0);\n        i0.ɵɵelementStart(1, \"div\");\n        i0.ɵɵtemplate(2, TogglemenuComponent_img_2_Template, 1, 0, \"img\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.isSidebarOpen());\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isSidebarOpen());\n      }\n    },\n    dependencies: [CommonModule, i2.NgIf],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","CommonModule","i0","ɵɵelementStart","ɵɵlistener","TogglemenuComponent_img_0_Template_img_click_0_listener","ɵɵrestoreView","_r3","ctx_r2","ɵɵnextContext","ɵɵresetView","toggleSidebar","ɵɵelementEnd","TogglemenuComponent_img_2_Template_img_click_0_listener","_r5","ctx_r4","TogglemenuComponent","constructor","sidebarService","menuToggled","isSidebarOpen","getSidebarState","onClick","emit","_","ɵɵdirectiveInject","i1","SidebarService","_2","selectors","outputs","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","TogglemenuComponent_Template","rf","ctx","ɵɵtemplate","TogglemenuComponent_img_0_Template","TogglemenuComponent_img_2_Template","ɵɵproperty","ɵɵadvance","i2","NgIf","styles"],"sources":["C:\\Users\\lucas\\OneDrive\\Documentos\\GitHub\\CBLXToolPFP\\frontend\\src\\app\\components\\jornada\\togglemenu\\togglemenu.component.ts","C:\\Users\\lucas\\OneDrive\\Documentos\\GitHub\\CBLXToolPFP\\frontend\\src\\app\\components\\jornada\\togglemenu\\togglemenu.component.html"],"sourcesContent":["import { Component, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SidebarService } from '../../../services/sidebar.service';\r\n\r\n@Component({\r\n  selector: 'app-togglemenu',\r\n  templateUrl: './togglemenu.component.html',\r\n  styleUrls: ['./togglemenu.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n})\r\nexport class TogglemenuComponent {\r\n\r\n  @Output() menuToggled = new EventEmitter<void>(); // Event to notify parent components if necessary\r\n\r\n  constructor(public sidebarService: SidebarService) {}\r\n\r\n  // Get the current state of the sidebar\r\n  isSidebarOpen(): boolean {\r\n    return this.sidebarService.getSidebarState();  // Use service method to get current state\r\n  }\r\n\r\n  // Toggle the sidebar visibility\r\n  toggleSidebar(): void {\r\n    this.sidebarService.toggleSidebar();  // Use service to handle the toggle\r\n  }\r\n\r\n  onClick(): void {\r\n    this.toggleSidebar();  // Toggle the sidebar state\r\n    this.menuToggled.emit();  // Notify parent components, if needed\r\n  }\r\n}\r\n","\r\n<!-- Toggle right icon when sidebar is closed -->\r\n<img\r\n  src=\"../../../../assets/images/setadireita.png\"\r\n  *ngIf=\"!isSidebarOpen()\"\r\n  (click)=\"toggleSidebar()\"\r\n  width=\"25\"\r\n  height=\"25\"\r\n  alt=\"Open Sidebar\"\r\n>\r\n\r\n<!-- Toggle left icon when sidebar is open -->\r\n<div>\r\n  <img\r\n    src=\"../../../../assets/images/setaesquerda.png\"\r\n    *ngIf=\"isSidebarOpen()\"\r\n    (click)=\"toggleSidebar()\"\r\n    width=\"25\"\r\n    height=\"25\"\r\n    alt=\"Close Sidebar\"\r\n  >\r\n</div>"],"mappings":"AAAA,SAA4BA,YAAY,QAAQ,eAAe;AAC/D,SAASC,YAAY,QAAQ,iBAAiB;;;;;;;ICC9CC,EAAA,CAAAC,cAAA,aAOC;IAJCD,EAAA,CAAAE,UAAA,mBAAAC,wDAAA;MAAAH,EAAA,CAAAI,aAAA,CAAAC,GAAA;MAAA,MAAAC,MAAA,GAAAN,EAAA,CAAAO,aAAA;MAAA,OAASP,EAAA,CAAAQ,WAAA,CAAAF,MAAA,CAAAG,aAAA,EAAe;IAAA,EAAC;IAH3BT,EAAA,CAAAU,YAAA,EAOC;;;;;;IAICV,EAAA,CAAAC,cAAA,aAOC;IAJCD,EAAA,CAAAE,UAAA,mBAAAS,wDAAA;MAAAX,EAAA,CAAAI,aAAA,CAAAQ,GAAA;MAAA,MAAAC,MAAA,GAAAb,EAAA,CAAAO,aAAA;MAAA,OAASP,EAAA,CAAAQ,WAAA,CAAAK,MAAA,CAAAJ,aAAA,EAAe;IAAA,EAAC;IAH3BT,EAAA,CAAAU,YAAA,EAOC;;;ADTH,OAAM,MAAOI,mBAAmB;EAI9BC,YAAmBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IAFvB,KAAAC,WAAW,GAAG,IAAInB,YAAY,EAAQ,CAAC,CAAC;EAEE;EAEpD;EACAoB,aAAaA,CAAA;IACX,OAAO,IAAI,CAACF,cAAc,CAACG,eAAe,EAAE,CAAC,CAAE;EACjD;EAEA;EACAV,aAAaA,CAAA;IACX,IAAI,CAACO,cAAc,CAACP,aAAa,EAAE,CAAC,CAAE;EACxC;;EAEAW,OAAOA,CAAA;IACL,IAAI,CAACX,aAAa,EAAE,CAAC,CAAE;IACvB,IAAI,CAACQ,WAAW,CAACI,IAAI,EAAE,CAAC,CAAE;EAC5B;EAAC,QAAAC,CAAA,G;qBAnBUR,mBAAmB,EAAAd,EAAA,CAAAuB,iBAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAnBZ,mBAAmB;IAAAa,SAAA;IAAAC,OAAA;MAAAX,WAAA;IAAA;IAAAY,UAAA;IAAAC,QAAA,GAAA9B,EAAA,CAAA+B,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCThCrC,EAAA,CAAAuC,UAAA,IAAAC,kCAAA,iBAOC;QAGDxC,EAAA,CAAAC,cAAA,UAAK;QACHD,EAAA,CAAAuC,UAAA,IAAAE,kCAAA,iBAOC;QACHzC,EAAA,CAAAU,YAAA,EAAM;;;QAjBHV,EAAA,CAAA0C,UAAA,UAAAJ,GAAA,CAAApB,aAAA,GAAsB;QAWpBlB,EAAA,CAAA2C,SAAA,GAAqB;QAArB3C,EAAA,CAAA0C,UAAA,SAAAJ,GAAA,CAAApB,aAAA,GAAqB;;;mBDNdnB,YAAY,EAAA6C,EAAA,CAAAC,IAAA;IAAAC,MAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import utils from '../../../../scoring/utils.esm.js';\nimport { ALPHA_INVERTED, ALL_LOWER_INVERTED, ONE_UPPER, ONE_LOWER, START_UPPER, END_UPPER, ALL_UPPER_INVERTED } from '../../../../data/const.esm.js';\nconst getVariations = cleanedWord => {\n  const wordArray = cleanedWord.split('');\n  const upperCaseCount = wordArray.filter(char => char.match(ONE_UPPER)).length;\n  const lowerCaseCount = wordArray.filter(char => char.match(ONE_LOWER)).length;\n  let variations = 0;\n  const variationLength = Math.min(upperCaseCount, lowerCaseCount);\n  for (let i = 1; i <= variationLength; i += 1) {\n    variations += utils.nCk(upperCaseCount + lowerCaseCount, i);\n  }\n  return variations;\n};\nvar uppercaseVariant = word => {\n  // clean words of non alpha characters to remove the reward effekt to capitalize the first letter https://github.com/dropbox/zxcvbn/issues/232\n  const cleanedWord = word.replace(ALPHA_INVERTED, '');\n  if (cleanedWord.match(ALL_LOWER_INVERTED) || cleanedWord.toLowerCase() === cleanedWord) {\n    return 1;\n  }\n  // a capitalized word is the most common capitalization scheme,\n  // so it only doubles the search space (uncapitalized + capitalized).\n  // all caps and end-capitalized are common enough too, underestimate as 2x factor to be safe.\n  const commonCases = [START_UPPER, END_UPPER, ALL_UPPER_INVERTED];\n  const commonCasesLength = commonCases.length;\n  for (let i = 0; i < commonCasesLength; i += 1) {\n    const regex = commonCases[i];\n    if (cleanedWord.match(regex)) {\n      return 2;\n    }\n  }\n  // otherwise calculate the number of ways to capitalize U+L uppercase+lowercase letters\n  // with U uppercase letters or less. or, if there's more uppercase than lower (for eg. PASSwORD),\n  // the number of ways to lowercase U+L letters with L lowercase letters or less.\n  return getVariations(cleanedWord);\n};\nexport { uppercaseVariant as default };","map":{"version":3,"names":["utils","ALPHA_INVERTED","ALL_LOWER_INVERTED","ONE_UPPER","ONE_LOWER","START_UPPER","END_UPPER","ALL_UPPER_INVERTED","getVariations","cleanedWord","wordArray","split","upperCaseCount","filter","char","match","length","lowerCaseCount","variations","variationLength","Math","min","i","nCk","uppercaseVariant","word","replace","toLowerCase","commonCases","commonCasesLength","regex","default"],"sources":["C:/Users/j-mai/Documents/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/matcher/dictionary/variants/scoring/uppercase.esm.js"],"sourcesContent":["import utils from '../../../../scoring/utils.esm.js';\nimport { ALPHA_INVERTED, ALL_LOWER_INVERTED, ONE_UPPER, ONE_LOWER, START_UPPER, END_UPPER, ALL_UPPER_INVERTED } from '../../../../data/const.esm.js';\n\nconst getVariations = cleanedWord => {\n  const wordArray = cleanedWord.split('');\n  const upperCaseCount = wordArray.filter(char => char.match(ONE_UPPER)).length;\n  const lowerCaseCount = wordArray.filter(char => char.match(ONE_LOWER)).length;\n  let variations = 0;\n  const variationLength = Math.min(upperCaseCount, lowerCaseCount);\n  for (let i = 1; i <= variationLength; i += 1) {\n    variations += utils.nCk(upperCaseCount + lowerCaseCount, i);\n  }\n  return variations;\n};\nvar uppercaseVariant = (word => {\n  // clean words of non alpha characters to remove the reward effekt to capitalize the first letter https://github.com/dropbox/zxcvbn/issues/232\n  const cleanedWord = word.replace(ALPHA_INVERTED, '');\n  if (cleanedWord.match(ALL_LOWER_INVERTED) || cleanedWord.toLowerCase() === cleanedWord) {\n    return 1;\n  }\n  // a capitalized word is the most common capitalization scheme,\n  // so it only doubles the search space (uncapitalized + capitalized).\n  // all caps and end-capitalized are common enough too, underestimate as 2x factor to be safe.\n  const commonCases = [START_UPPER, END_UPPER, ALL_UPPER_INVERTED];\n  const commonCasesLength = commonCases.length;\n  for (let i = 0; i < commonCasesLength; i += 1) {\n    const regex = commonCases[i];\n    if (cleanedWord.match(regex)) {\n      return 2;\n    }\n  }\n  // otherwise calculate the number of ways to capitalize U+L uppercase+lowercase letters\n  // with U uppercase letters or less. or, if there's more uppercase than lower (for eg. PASSwORD),\n  // the number of ways to lowercase U+L letters with L lowercase letters or less.\n  return getVariations(cleanedWord);\n});\n\nexport { uppercaseVariant as default };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kCAAkC;AACpD,SAASC,cAAc,EAAEC,kBAAkB,EAAEC,SAAS,EAAEC,SAAS,EAAEC,WAAW,EAAEC,SAAS,EAAEC,kBAAkB,QAAQ,+BAA+B;AAEpJ,MAAMC,aAAa,GAAGC,WAAW,IAAI;EACnC,MAAMC,SAAS,GAAGD,WAAW,CAACE,KAAK,CAAC,EAAE,CAAC;EACvC,MAAMC,cAAc,GAAGF,SAAS,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAACZ,SAAS,CAAC,CAAC,CAACa,MAAM;EAC7E,MAAMC,cAAc,GAAGP,SAAS,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAACX,SAAS,CAAC,CAAC,CAACY,MAAM;EAC7E,IAAIE,UAAU,GAAG,CAAC;EAClB,MAAMC,eAAe,GAAGC,IAAI,CAACC,GAAG,CAACT,cAAc,EAAEK,cAAc,CAAC;EAChE,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,eAAe,EAAEG,CAAC,IAAI,CAAC,EAAE;IAC5CJ,UAAU,IAAIlB,KAAK,CAACuB,GAAG,CAACX,cAAc,GAAGK,cAAc,EAAEK,CAAC,CAAC;EAC7D;EACA,OAAOJ,UAAU;AACnB,CAAC;AACD,IAAIM,gBAAgB,GAAIC,IAAI,IAAI;EAC9B;EACA,MAAMhB,WAAW,GAAGgB,IAAI,CAACC,OAAO,CAACzB,cAAc,EAAE,EAAE,CAAC;EACpD,IAAIQ,WAAW,CAACM,KAAK,CAACb,kBAAkB,CAAC,IAAIO,WAAW,CAACkB,WAAW,CAAC,CAAC,KAAKlB,WAAW,EAAE;IACtF,OAAO,CAAC;EACV;EACA;EACA;EACA;EACA,MAAMmB,WAAW,GAAG,CAACvB,WAAW,EAAEC,SAAS,EAAEC,kBAAkB,CAAC;EAChE,MAAMsB,iBAAiB,GAAGD,WAAW,CAACZ,MAAM;EAC5C,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,iBAAiB,EAAEP,CAAC,IAAI,CAAC,EAAE;IAC7C,MAAMQ,KAAK,GAAGF,WAAW,CAACN,CAAC,CAAC;IAC5B,IAAIb,WAAW,CAACM,KAAK,CAACe,KAAK,CAAC,EAAE;MAC5B,OAAO,CAAC;IACV;EACF;EACA;EACA;EACA;EACA,OAAOtB,aAAa,CAACC,WAAW,CAAC;AACnC,CAAE;AAEF,SAASe,gBAAgB,IAAIO,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
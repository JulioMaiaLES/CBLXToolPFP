{"ast":null,"code":"import { zxcvbnOptions } from './Options.esm.js';\nimport bruteforceMatcher from './matcher/bruteforce/feedback.esm.js';\nimport dateMatcher from './matcher/date/feedback.esm.js';\nimport dictionaryMatcher from './matcher/dictionary/feedback.esm.js';\nimport regexMatcher from './matcher/regex/feedback.esm.js';\nimport repeatMatcher from './matcher/repeat/feedback.esm.js';\nimport sequenceMatcher from './matcher/sequence/feedback.esm.js';\nimport spatialMatcher from './matcher/spatial/feedback.esm.js';\nimport separatorMatcher from './matcher/separator/feedback.esm.js';\nconst defaultFeedback = {\n  warning: null,\n  suggestions: []\n};\n/*\r\n * -------------------------------------------------------------------------------\r\n *  Generate feedback ---------------------------------------------------------------\r\n * -------------------------------------------------------------------------------\r\n */\nclass Feedback {\n  constructor() {\n    this.matchers = {\n      bruteforce: bruteforceMatcher,\n      date: dateMatcher,\n      dictionary: dictionaryMatcher,\n      regex: regexMatcher,\n      repeat: repeatMatcher,\n      sequence: sequenceMatcher,\n      spatial: spatialMatcher,\n      separator: separatorMatcher\n    };\n    this.defaultFeedback = {\n      warning: null,\n      suggestions: []\n    };\n    this.setDefaultSuggestions();\n  }\n  setDefaultSuggestions() {\n    this.defaultFeedback.suggestions.push(zxcvbnOptions.translations.suggestions.useWords, zxcvbnOptions.translations.suggestions.noNeed);\n  }\n  getFeedback(score, sequence) {\n    if (sequence.length === 0) {\n      return this.defaultFeedback;\n    }\n    if (score > 2) {\n      return defaultFeedback;\n    }\n    const extraFeedback = zxcvbnOptions.translations.suggestions.anotherWord;\n    const longestMatch = this.getLongestMatch(sequence);\n    let feedback = this.getMatchFeedback(longestMatch, sequence.length === 1);\n    if (feedback !== null && feedback !== undefined) {\n      feedback.suggestions.unshift(extraFeedback);\n    } else {\n      feedback = {\n        warning: null,\n        suggestions: [extraFeedback]\n      };\n    }\n    return feedback;\n  }\n  getLongestMatch(sequence) {\n    let longestMatch = sequence[0];\n    const slicedSequence = sequence.slice(1);\n    slicedSequence.forEach(match => {\n      if (match.token.length > longestMatch.token.length) {\n        longestMatch = match;\n      }\n    });\n    return longestMatch;\n  }\n  getMatchFeedback(match, isSoleMatch) {\n    if (this.matchers[match.pattern]) {\n      return this.matchers[match.pattern](match, isSoleMatch);\n    }\n    if (zxcvbnOptions.matchers[match.pattern] && 'feedback' in zxcvbnOptions.matchers[match.pattern]) {\n      return zxcvbnOptions.matchers[match.pattern].feedback(match, isSoleMatch);\n    }\n    return defaultFeedback;\n  }\n}\nexport { Feedback as default };","map":{"version":3,"names":["zxcvbnOptions","bruteforceMatcher","dateMatcher","dictionaryMatcher","regexMatcher","repeatMatcher","sequenceMatcher","spatialMatcher","separatorMatcher","defaultFeedback","warning","suggestions","Feedback","constructor","matchers","bruteforce","date","dictionary","regex","repeat","sequence","spatial","separator","setDefaultSuggestions","push","translations","useWords","noNeed","getFeedback","score","length","extraFeedback","anotherWord","longestMatch","getLongestMatch","feedback","getMatchFeedback","undefined","unshift","slicedSequence","slice","forEach","match","token","isSoleMatch","pattern","default"],"sources":["C:/Users/Julio/Documents/Projects/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/Feedback.esm.js"],"sourcesContent":["import { zxcvbnOptions } from './Options.esm.js';\r\nimport bruteforceMatcher from './matcher/bruteforce/feedback.esm.js';\r\nimport dateMatcher from './matcher/date/feedback.esm.js';\r\nimport dictionaryMatcher from './matcher/dictionary/feedback.esm.js';\r\nimport regexMatcher from './matcher/regex/feedback.esm.js';\r\nimport repeatMatcher from './matcher/repeat/feedback.esm.js';\r\nimport sequenceMatcher from './matcher/sequence/feedback.esm.js';\r\nimport spatialMatcher from './matcher/spatial/feedback.esm.js';\r\nimport separatorMatcher from './matcher/separator/feedback.esm.js';\r\n\r\nconst defaultFeedback = {\r\n  warning: null,\r\n  suggestions: []\r\n};\r\n/*\r\n * -------------------------------------------------------------------------------\r\n *  Generate feedback ---------------------------------------------------------------\r\n * -------------------------------------------------------------------------------\r\n */\r\nclass Feedback {\r\n  constructor() {\r\n    this.matchers = {\r\n      bruteforce: bruteforceMatcher,\r\n      date: dateMatcher,\r\n      dictionary: dictionaryMatcher,\r\n      regex: regexMatcher,\r\n      repeat: repeatMatcher,\r\n      sequence: sequenceMatcher,\r\n      spatial: spatialMatcher,\r\n      separator: separatorMatcher\r\n    };\r\n    this.defaultFeedback = {\r\n      warning: null,\r\n      suggestions: []\r\n    };\r\n    this.setDefaultSuggestions();\r\n  }\r\n  setDefaultSuggestions() {\r\n    this.defaultFeedback.suggestions.push(zxcvbnOptions.translations.suggestions.useWords, zxcvbnOptions.translations.suggestions.noNeed);\r\n  }\r\n  getFeedback(score, sequence) {\r\n    if (sequence.length === 0) {\r\n      return this.defaultFeedback;\r\n    }\r\n    if (score > 2) {\r\n      return defaultFeedback;\r\n    }\r\n    const extraFeedback = zxcvbnOptions.translations.suggestions.anotherWord;\r\n    const longestMatch = this.getLongestMatch(sequence);\r\n    let feedback = this.getMatchFeedback(longestMatch, sequence.length === 1);\r\n    if (feedback !== null && feedback !== undefined) {\r\n      feedback.suggestions.unshift(extraFeedback);\r\n    } else {\r\n      feedback = {\r\n        warning: null,\r\n        suggestions: [extraFeedback]\r\n      };\r\n    }\r\n    return feedback;\r\n  }\r\n  getLongestMatch(sequence) {\r\n    let longestMatch = sequence[0];\r\n    const slicedSequence = sequence.slice(1);\r\n    slicedSequence.forEach(match => {\r\n      if (match.token.length > longestMatch.token.length) {\r\n        longestMatch = match;\r\n      }\r\n    });\r\n    return longestMatch;\r\n  }\r\n  getMatchFeedback(match, isSoleMatch) {\r\n    if (this.matchers[match.pattern]) {\r\n      return this.matchers[match.pattern](match, isSoleMatch);\r\n    }\r\n    if (zxcvbnOptions.matchers[match.pattern] && 'feedback' in zxcvbnOptions.matchers[match.pattern]) {\r\n      return zxcvbnOptions.matchers[match.pattern].feedback(match, isSoleMatch);\r\n    }\r\n    return defaultFeedback;\r\n  }\r\n}\r\n\r\nexport { Feedback as default };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
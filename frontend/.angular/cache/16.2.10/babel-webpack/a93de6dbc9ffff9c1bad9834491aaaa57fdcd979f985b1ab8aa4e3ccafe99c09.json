{"ast":null,"code":"/**\r\n * @license Angular v16.2.12\r\n * (c) 2010-2022 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgZone, ApplicationRef, makeEnvironmentProviders, PLATFORM_ID, APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { defer, throwError, fromEvent, of, concat, Subject, NEVER, merge } from 'rxjs';\nimport { map, filter, switchMap, publish, take, tap, delay } from 'rxjs/operators';\nconst ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\nfunction errorObservable(message) {\n  return defer(() => throwError(new Error(message)));\n}\n/**\r\n * @publicApi\r\n */\nclass NgswCommChannel {\n  constructor(serviceWorker) {\n    this.serviceWorker = serviceWorker;\n    if (!serviceWorker) {\n      this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n    } else {\n      const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n      const controllerChanges = controllerChangeEvents.pipe(map(() => serviceWorker.controller));\n      const currentController = defer(() => of(serviceWorker.controller));\n      const controllerWithChanges = concat(currentController, controllerChanges);\n      this.worker = controllerWithChanges.pipe(filter(c => !!c));\n      this.registration = this.worker.pipe(switchMap(() => serviceWorker.getRegistration()));\n      const rawEvents = fromEvent(serviceWorker, 'message');\n      const rawEventPayload = rawEvents.pipe(map(event => event.data));\n      const eventsUnconnected = rawEventPayload.pipe(filter(event => event && event.type));\n      const events = eventsUnconnected.pipe(publish());\n      events.connect();\n      this.events = events;\n    }\n  }\n  postMessage(action, payload) {\n    return this.worker.pipe(take(1), tap(sw => {\n      sw.postMessage({\n        action,\n        ...payload\n      });\n    })).toPromise().then(() => undefined);\n  }\n  postMessageWithOperation(type, payload, operationNonce) {\n    const waitForOperationCompleted = this.waitForOperationCompleted(operationNonce);\n    const postMessage = this.postMessage(type, payload);\n    return Promise.all([postMessage, waitForOperationCompleted]).then(([, result]) => result);\n  }\n  generateNonce() {\n    return Math.round(Math.random() * 10000000);\n  }\n  eventsOfType(type) {\n    let filterFn;\n    if (typeof type === 'string') {\n      filterFn = event => event.type === type;\n    } else {\n      filterFn = event => type.includes(event.type);\n    }\n    return this.events.pipe(filter(filterFn));\n  }\n  nextEventOfType(type) {\n    return this.eventsOfType(type).pipe(take(1));\n  }\n  waitForOperationCompleted(nonce) {\n    return this.eventsOfType('OPERATION_COMPLETED').pipe(filter(event => event.nonce === nonce), take(1), map(event => {\n      if (event.result !== undefined) {\n        return event.result;\n      }\n      throw new Error(event.error);\n    })).toPromise();\n  }\n  get isEnabled() {\n    return !!this.serviceWorker;\n  }\n}\n\n/**\r\n * Subscribe and listen to\r\n * [Web Push\r\n * Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices) through\r\n * Angular Service Worker.\r\n *\r\n * @usageNotes\r\n *\r\n * You can inject a `SwPush` instance into any component or service\r\n * as a dependency.\r\n *\r\n * <code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\"\r\n * header=\"app.component.ts\"></code-example>\r\n *\r\n * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\r\n * The call returns a `Promise` with a new\r\n * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\r\n * instance.\r\n *\r\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\"\r\n * header=\"app.component.ts\"></code-example>\r\n *\r\n * A request is rejected if the user denies permission, or if the browser\r\n * blocks or does not support the Push API or ServiceWorkers.\r\n * Check `SwPush.isEnabled` to confirm status.\r\n *\r\n * Invoke Push Notifications by pushing a message with the following payload.\r\n *\r\n * ```ts\r\n * {\r\n *   \"notification\": {\r\n *     \"actions\": NotificationAction[],\r\n *     \"badge\": USVString,\r\n *     \"body\": DOMString,\r\n *     \"data\": any,\r\n *     \"dir\": \"auto\"|\"ltr\"|\"rtl\",\r\n *     \"icon\": USVString,\r\n *     \"image\": USVString,\r\n *     \"lang\": DOMString,\r\n *     \"renotify\": boolean,\r\n *     \"requireInteraction\": boolean,\r\n *     \"silent\": boolean,\r\n *     \"tag\": DOMString,\r\n *     \"timestamp\": DOMTimeStamp,\r\n *     \"title\": DOMString,\r\n *     \"vibrate\": number[]\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * Only `title` is required. See `Notification`\r\n * [instance\r\n * properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\r\n *\r\n * While the subscription is active, Service Worker listens for\r\n * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\r\n * occurrences and creates\r\n * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\r\n * instances in response.\r\n *\r\n * Unsubscribe using `SwPush.unsubscribe()`.\r\n *\r\n * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\r\n * clicks on a notification. For example:\r\n *\r\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\"\r\n * header=\"app.component.ts\"></code-example>\r\n *\r\n * You can read more on handling notification clicks in the [Service worker notifications\r\n * guide](guide/service-worker-notifications).\r\n *\r\n * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)\r\n * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)\r\n * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\r\n * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)\r\n * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\r\n *\r\n * @publicApi\r\n */\nclass SwPush {\n  /**\r\n   * True if the Service Worker is enabled (supported by the browser and enabled via\r\n   * `ServiceWorkerModule`).\r\n   */\n  get isEnabled() {\n    return this.sw.isEnabled;\n  }\n  constructor(sw) {\n    this.sw = sw;\n    this.pushManager = null;\n    this.subscriptionChanges = new Subject();\n    if (!sw.isEnabled) {\n      this.messages = NEVER;\n      this.notificationClicks = NEVER;\n      this.subscription = NEVER;\n      return;\n    }\n    this.messages = this.sw.eventsOfType('PUSH').pipe(map(message => message.data));\n    this.notificationClicks = this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map(message => message.data));\n    this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\n    const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\n    this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n  }\n  /**\r\n   * Subscribes to Web Push Notifications,\r\n   * after requesting and receiving user permission.\r\n   *\r\n   * @param options An object containing the `serverPublicKey` string.\r\n   * @returns A Promise that resolves to the new subscription object.\r\n   */\n  requestSubscription(options) {\n    if (!this.sw.isEnabled || this.pushManager === null) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const pushOptions = {\n      userVisibleOnly: true\n    };\n    let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n    let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n    for (let i = 0; i < key.length; i++) {\n      applicationServerKey[i] = key.charCodeAt(i);\n    }\n    pushOptions.applicationServerKey = applicationServerKey;\n    return this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1)).toPromise().then(sub => {\n      this.subscriptionChanges.next(sub);\n      return sub;\n    });\n  }\n  /**\r\n   * Unsubscribes from Service Worker push notifications.\r\n   *\r\n   * @returns A Promise that is resolved when the operation succeeds, or is rejected if there is no\r\n   *          active subscription or the unsubscribe operation fails.\r\n   */\n  unsubscribe() {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const doUnsubscribe = sub => {\n      if (sub === null) {\n        throw new Error('Not subscribed to push notifications.');\n      }\n      return sub.unsubscribe().then(success => {\n        if (!success) {\n          throw new Error('Unsubscribe failed!');\n        }\n        this.subscriptionChanges.next(null);\n      });\n    };\n    return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n  }\n  decodeBase64(input) {\n    return atob(input);\n  }\n  static #_ = this.ɵfac = function SwPush_Factory(t) {\n    return new (t || SwPush)(i0.ɵɵinject(NgswCommChannel));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SwPush,\n    factory: SwPush.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwPush, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NgswCommChannel\n    }];\n  }, null);\n})();\n\n/**\r\n * Subscribe to update notifications from the Service Worker, trigger update\r\n * checks, and forcibly activate updates.\r\n *\r\n * @see {@link guide/service-worker-communications Service worker communication guide}\r\n *\r\n * @publicApi\r\n */\nclass SwUpdate {\n  /**\r\n   * True if the Service Worker is enabled (supported by the browser and enabled via\r\n   * `ServiceWorkerModule`).\r\n   */\n  get isEnabled() {\n    return this.sw.isEnabled;\n  }\n  constructor(sw) {\n    this.sw = sw;\n    if (!sw.isEnabled) {\n      this.versionUpdates = NEVER;\n      this.available = NEVER;\n      this.activated = NEVER;\n      this.unrecoverable = NEVER;\n      return;\n    }\n    this.versionUpdates = this.sw.eventsOfType(['VERSION_DETECTED', 'VERSION_INSTALLATION_FAILED', 'VERSION_READY', 'NO_NEW_VERSION_DETECTED']);\n    this.available = this.versionUpdates.pipe(filter(evt => evt.type === 'VERSION_READY'), map(evt => ({\n      type: 'UPDATE_AVAILABLE',\n      current: evt.currentVersion,\n      available: evt.latestVersion\n    })));\n    this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n    this.unrecoverable = this.sw.eventsOfType('UNRECOVERABLE_STATE');\n  }\n  /**\r\n   * Checks for an update and waits until the new version is downloaded from the server and ready\r\n   * for activation.\r\n   *\r\n   * @returns a promise that\r\n   * - resolves to `true` if a new version was found and is ready to be activated.\r\n   * - resolves to `false` if no new version was found\r\n   * - rejects if any error occurs\r\n   */\n  checkForUpdate() {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const nonce = this.sw.generateNonce();\n    return this.sw.postMessageWithOperation('CHECK_FOR_UPDATES', {\n      nonce\n    }, nonce);\n  }\n  /**\r\n   * Updates the current client (i.e. browser tab) to the latest version that is ready for\r\n   * activation.\r\n   *\r\n   * In most cases, you should not use this method and instead should update a client by reloading\r\n   * the page.\r\n   *\r\n   * <div class=\"alert is-important\">\r\n   *\r\n   * Updating a client without reloading can easily result in a broken application due to a version\r\n   * mismatch between the [application shell](guide/glossary#app-shell) and other page resources,\r\n   * such as [lazy-loaded chunks](guide/glossary#lazy-loading), whose filenames may change between\r\n   * versions.\r\n   *\r\n   * Only use this method, if you are certain it is safe for your specific use case.\r\n   *\r\n   * </div>\r\n   *\r\n   * @returns a promise that\r\n   *  - resolves to `true` if an update was activated successfully\r\n   *  - resolves to `false` if no update was available (for example, the client was already on the\r\n   *    latest version).\r\n   *  - rejects if any error occurs\r\n   */\n  activateUpdate() {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const nonce = this.sw.generateNonce();\n    return this.sw.postMessageWithOperation('ACTIVATE_UPDATE', {\n      nonce\n    }, nonce);\n  }\n  static #_ = this.ɵfac = function SwUpdate_Factory(t) {\n    return new (t || SwUpdate)(i0.ɵɵinject(NgswCommChannel));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SwUpdate,\n    factory: SwUpdate.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwUpdate, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NgswCommChannel\n    }];\n  }, null);\n})();\n\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nconst SCRIPT = new InjectionToken('NGSW_REGISTER_SCRIPT');\nfunction ngswAppInitializer(injector, script, options, platformId) {\n  return () => {\n    if (!(isPlatformBrowser(platformId) && 'serviceWorker' in navigator && options.enabled !== false)) {\n      return;\n    }\n    // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n    // becomes active. This allows the SW to initialize itself even if there is no application\n    // traffic.\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      if (navigator.serviceWorker.controller !== null) {\n        navigator.serviceWorker.controller.postMessage({\n          action: 'INITIALIZE'\n        });\n      }\n    });\n    let readyToRegister$;\n    if (typeof options.registrationStrategy === 'function') {\n      readyToRegister$ = options.registrationStrategy();\n    } else {\n      const [strategy, ...args] = (options.registrationStrategy || 'registerWhenStable:30000').split(':');\n      switch (strategy) {\n        case 'registerImmediately':\n          readyToRegister$ = of(null);\n          break;\n        case 'registerWithDelay':\n          readyToRegister$ = delayWithTimeout(+args[0] || 0);\n          break;\n        case 'registerWhenStable':\n          readyToRegister$ = !args[0] ? whenStable(injector) : merge(whenStable(injector), delayWithTimeout(+args[0]));\n          break;\n        default:\n          // Unknown strategy.\n          throw new Error(`Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);\n      }\n    }\n    // Don't return anything to avoid blocking the application until the SW is registered.\n    // Also, run outside the Angular zone to avoid preventing the app from stabilizing (especially\n    // given that some registration strategies wait for the app to stabilize).\n    // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\n    const ngZone = injector.get(NgZone);\n    ngZone.runOutsideAngular(() => readyToRegister$.pipe(take(1)).subscribe(() => navigator.serviceWorker.register(script, {\n      scope: options.scope\n    }).catch(err => console.error('Service worker registration failed with:', err))));\n  };\n}\nfunction delayWithTimeout(timeout) {\n  return of(null).pipe(delay(timeout));\n}\nfunction whenStable(injector) {\n  const appRef = injector.get(ApplicationRef);\n  return appRef.isStable.pipe(filter(stable => stable));\n}\nfunction ngswCommChannelFactory(opts, platformId) {\n  return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker : undefined);\n}\n/**\r\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\r\n * `ServiceWorkerModule.register()`.\r\n *\r\n * You can use this token to define a provider that generates the registration options at runtime,\r\n * for example via a function call:\r\n *\r\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\r\n *     header=\"app.module.ts\"}\r\n *\r\n * @publicApi\r\n */\nclass SwRegistrationOptions {}\n/**\r\n * @publicApi\r\n *\r\n * Sets up providers to register the given Angular Service Worker script.\r\n *\r\n * If `enabled` is set to `false` in the given options, the module will behave as if service\r\n * workers are not supported by the browser, and the service worker will not be registered.\r\n *\r\n * Example usage:\r\n * ```ts\r\n * bootstrapApplication(AppComponent, {\r\n *   providers: [\r\n *     provideServiceWorker('ngsw-worker.js')\r\n *   ],\r\n * });\r\n * ```\r\n */\nfunction provideServiceWorker(script, options = {}) {\n  return makeEnvironmentProviders([SwPush, SwUpdate, {\n    provide: SCRIPT,\n    useValue: script\n  }, {\n    provide: SwRegistrationOptions,\n    useValue: options\n  }, {\n    provide: NgswCommChannel,\n    useFactory: ngswCommChannelFactory,\n    deps: [SwRegistrationOptions, PLATFORM_ID]\n  }, {\n    provide: APP_INITIALIZER,\n    useFactory: ngswAppInitializer,\n    deps: [Injector, SCRIPT, SwRegistrationOptions, PLATFORM_ID],\n    multi: true\n  }]);\n}\n\n/**\r\n * @publicApi\r\n */\nclass ServiceWorkerModule {\n  /**\r\n   * Register the given Angular Service Worker script.\r\n   *\r\n   * If `enabled` is set to `false` in the given options, the module will behave as if service\r\n   * workers are not supported by the browser, and the service worker will not be registered.\r\n   */\n  static register(script, options = {}) {\n    return {\n      ngModule: ServiceWorkerModule,\n      providers: [provideServiceWorker(script, options)]\n    };\n  }\n  static #_ = this.ɵfac = function ServiceWorkerModule_Factory(t) {\n    return new (t || ServiceWorkerModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ServiceWorkerModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [SwPush, SwUpdate]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServiceWorkerModule, [{\n    type: NgModule,\n    args: [{\n      providers: [SwPush, SwUpdate]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of this package.\r\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ServiceWorkerModule, SwPush, SwRegistrationOptions, SwUpdate, provideServiceWorker };","map":{"version":3,"names":["i0","Injectable","InjectionToken","NgZone","ApplicationRef","makeEnvironmentProviders","PLATFORM_ID","APP_INITIALIZER","Injector","NgModule","isPlatformBrowser","defer","throwError","fromEvent","of","concat","Subject","NEVER","merge","map","filter","switchMap","publish","take","tap","delay","ERR_SW_NOT_SUPPORTED","errorObservable","message","Error","NgswCommChannel","constructor","serviceWorker","worker","events","registration","controllerChangeEvents","controllerChanges","pipe","controller","currentController","controllerWithChanges","c","getRegistration","rawEvents","rawEventPayload","event","data","eventsUnconnected","type","connect","postMessage","action","payload","sw","toPromise","then","undefined","postMessageWithOperation","operationNonce","waitForOperationCompleted","Promise","all","result","generateNonce","Math","round","random","eventsOfType","filterFn","includes","nextEventOfType","nonce","error","isEnabled","SwPush","pushManager","subscriptionChanges","messages","notificationClicks","subscription","workerDrivenSubscriptions","pm","getSubscription","requestSubscription","options","reject","pushOptions","userVisibleOnly","key","decodeBase64","serverPublicKey","replace","applicationServerKey","Uint8Array","ArrayBuffer","length","i","charCodeAt","subscribe","sub","next","unsubscribe","doUnsubscribe","success","input","atob","_","ɵfac","SwPush_Factory","t","ɵɵinject","_2","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","SwUpdate","versionUpdates","available","activated","unrecoverable","evt","current","currentVersion","latestVersion","checkForUpdate","activateUpdate","SwUpdate_Factory","SCRIPT","ngswAppInitializer","injector","script","platformId","navigator","enabled","addEventListener","readyToRegister$","registrationStrategy","strategy","args","split","delayWithTimeout","whenStable","ngZone","get","runOutsideAngular","register","scope","catch","err","console","timeout","appRef","isStable","stable","ngswCommChannelFactory","opts","SwRegistrationOptions","provideServiceWorker","provide","useValue","useFactory","deps","multi","ServiceWorkerModule","ngModule","providers","ServiceWorkerModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector"],"sources":["C:/Users/lucas/OneDrive/Documentos/GitHub/CBLXToolPFP/frontend/node_modules/@angular/service-worker/fesm2022/service-worker.mjs"],"sourcesContent":["/**\r\n * @license Angular v16.2.12\r\n * (c) 2010-2022 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport * as i0 from '@angular/core';\r\nimport { Injectable, InjectionToken, NgZone, ApplicationRef, makeEnvironmentProviders, PLATFORM_ID, APP_INITIALIZER, Injector, NgModule } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { defer, throwError, fromEvent, of, concat, Subject, NEVER, merge } from 'rxjs';\r\nimport { map, filter, switchMap, publish, take, tap, delay } from 'rxjs/operators';\r\n\r\nconst ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\r\nfunction errorObservable(message) {\r\n    return defer(() => throwError(new Error(message)));\r\n}\r\n/**\r\n * @publicApi\r\n */\r\nclass NgswCommChannel {\r\n    constructor(serviceWorker) {\r\n        this.serviceWorker = serviceWorker;\r\n        if (!serviceWorker) {\r\n            this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\r\n        }\r\n        else {\r\n            const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\r\n            const controllerChanges = controllerChangeEvents.pipe(map(() => serviceWorker.controller));\r\n            const currentController = defer(() => of(serviceWorker.controller));\r\n            const controllerWithChanges = concat(currentController, controllerChanges);\r\n            this.worker = controllerWithChanges.pipe(filter((c) => !!c));\r\n            this.registration = (this.worker.pipe(switchMap(() => serviceWorker.getRegistration())));\r\n            const rawEvents = fromEvent(serviceWorker, 'message');\r\n            const rawEventPayload = rawEvents.pipe(map(event => event.data));\r\n            const eventsUnconnected = rawEventPayload.pipe(filter(event => event && event.type));\r\n            const events = eventsUnconnected.pipe(publish());\r\n            events.connect();\r\n            this.events = events;\r\n        }\r\n    }\r\n    postMessage(action, payload) {\r\n        return this.worker\r\n            .pipe(take(1), tap((sw) => {\r\n            sw.postMessage({\r\n                action,\r\n                ...payload,\r\n            });\r\n        }))\r\n            .toPromise()\r\n            .then(() => undefined);\r\n    }\r\n    postMessageWithOperation(type, payload, operationNonce) {\r\n        const waitForOperationCompleted = this.waitForOperationCompleted(operationNonce);\r\n        const postMessage = this.postMessage(type, payload);\r\n        return Promise.all([postMessage, waitForOperationCompleted]).then(([, result]) => result);\r\n    }\r\n    generateNonce() {\r\n        return Math.round(Math.random() * 10000000);\r\n    }\r\n    eventsOfType(type) {\r\n        let filterFn;\r\n        if (typeof type === 'string') {\r\n            filterFn = (event) => event.type === type;\r\n        }\r\n        else {\r\n            filterFn = (event) => type.includes(event.type);\r\n        }\r\n        return this.events.pipe(filter(filterFn));\r\n    }\r\n    nextEventOfType(type) {\r\n        return this.eventsOfType(type).pipe(take(1));\r\n    }\r\n    waitForOperationCompleted(nonce) {\r\n        return this.eventsOfType('OPERATION_COMPLETED')\r\n            .pipe(filter(event => event.nonce === nonce), take(1), map(event => {\r\n            if (event.result !== undefined) {\r\n                return event.result;\r\n            }\r\n            throw new Error(event.error);\r\n        }))\r\n            .toPromise();\r\n    }\r\n    get isEnabled() {\r\n        return !!this.serviceWorker;\r\n    }\r\n}\r\n\r\n/**\r\n * Subscribe and listen to\r\n * [Web Push\r\n * Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices) through\r\n * Angular Service Worker.\r\n *\r\n * @usageNotes\r\n *\r\n * You can inject a `SwPush` instance into any component or service\r\n * as a dependency.\r\n *\r\n * <code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\"\r\n * header=\"app.component.ts\"></code-example>\r\n *\r\n * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\r\n * The call returns a `Promise` with a new\r\n * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\r\n * instance.\r\n *\r\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\"\r\n * header=\"app.component.ts\"></code-example>\r\n *\r\n * A request is rejected if the user denies permission, or if the browser\r\n * blocks or does not support the Push API or ServiceWorkers.\r\n * Check `SwPush.isEnabled` to confirm status.\r\n *\r\n * Invoke Push Notifications by pushing a message with the following payload.\r\n *\r\n * ```ts\r\n * {\r\n *   \"notification\": {\r\n *     \"actions\": NotificationAction[],\r\n *     \"badge\": USVString,\r\n *     \"body\": DOMString,\r\n *     \"data\": any,\r\n *     \"dir\": \"auto\"|\"ltr\"|\"rtl\",\r\n *     \"icon\": USVString,\r\n *     \"image\": USVString,\r\n *     \"lang\": DOMString,\r\n *     \"renotify\": boolean,\r\n *     \"requireInteraction\": boolean,\r\n *     \"silent\": boolean,\r\n *     \"tag\": DOMString,\r\n *     \"timestamp\": DOMTimeStamp,\r\n *     \"title\": DOMString,\r\n *     \"vibrate\": number[]\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * Only `title` is required. See `Notification`\r\n * [instance\r\n * properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\r\n *\r\n * While the subscription is active, Service Worker listens for\r\n * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\r\n * occurrences and creates\r\n * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\r\n * instances in response.\r\n *\r\n * Unsubscribe using `SwPush.unsubscribe()`.\r\n *\r\n * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\r\n * clicks on a notification. For example:\r\n *\r\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\"\r\n * header=\"app.component.ts\"></code-example>\r\n *\r\n * You can read more on handling notification clicks in the [Service worker notifications\r\n * guide](guide/service-worker-notifications).\r\n *\r\n * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)\r\n * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)\r\n * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\r\n * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)\r\n * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\r\n *\r\n * @publicApi\r\n */\r\nclass SwPush {\r\n    /**\r\n     * True if the Service Worker is enabled (supported by the browser and enabled via\r\n     * `ServiceWorkerModule`).\r\n     */\r\n    get isEnabled() {\r\n        return this.sw.isEnabled;\r\n    }\r\n    constructor(sw) {\r\n        this.sw = sw;\r\n        this.pushManager = null;\r\n        this.subscriptionChanges = new Subject();\r\n        if (!sw.isEnabled) {\r\n            this.messages = NEVER;\r\n            this.notificationClicks = NEVER;\r\n            this.subscription = NEVER;\r\n            return;\r\n        }\r\n        this.messages = this.sw.eventsOfType('PUSH').pipe(map(message => message.data));\r\n        this.notificationClicks =\r\n            this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map((message) => message.data));\r\n        this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\r\n        const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\r\n        this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\r\n    }\r\n    /**\r\n     * Subscribes to Web Push Notifications,\r\n     * after requesting and receiving user permission.\r\n     *\r\n     * @param options An object containing the `serverPublicKey` string.\r\n     * @returns A Promise that resolves to the new subscription object.\r\n     */\r\n    requestSubscription(options) {\r\n        if (!this.sw.isEnabled || this.pushManager === null) {\r\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\r\n        }\r\n        const pushOptions = { userVisibleOnly: true };\r\n        let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\r\n        let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\r\n        for (let i = 0; i < key.length; i++) {\r\n            applicationServerKey[i] = key.charCodeAt(i);\r\n        }\r\n        pushOptions.applicationServerKey = applicationServerKey;\r\n        return this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1))\r\n            .toPromise()\r\n            .then(sub => {\r\n            this.subscriptionChanges.next(sub);\r\n            return sub;\r\n        });\r\n    }\r\n    /**\r\n     * Unsubscribes from Service Worker push notifications.\r\n     *\r\n     * @returns A Promise that is resolved when the operation succeeds, or is rejected if there is no\r\n     *          active subscription or the unsubscribe operation fails.\r\n     */\r\n    unsubscribe() {\r\n        if (!this.sw.isEnabled) {\r\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\r\n        }\r\n        const doUnsubscribe = (sub) => {\r\n            if (sub === null) {\r\n                throw new Error('Not subscribed to push notifications.');\r\n            }\r\n            return sub.unsubscribe().then(success => {\r\n                if (!success) {\r\n                    throw new Error('Unsubscribe failed!');\r\n                }\r\n                this.subscriptionChanges.next(null);\r\n            });\r\n        };\r\n        return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\r\n    }\r\n    decodeBase64(input) {\r\n        return atob(input);\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: SwPush, deps: [{ token: NgswCommChannel }], target: i0.ɵɵFactoryTarget.Injectable }); }\r\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: SwPush }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: SwPush, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: NgswCommChannel }]; } });\r\n\r\n/**\r\n * Subscribe to update notifications from the Service Worker, trigger update\r\n * checks, and forcibly activate updates.\r\n *\r\n * @see {@link guide/service-worker-communications Service worker communication guide}\r\n *\r\n * @publicApi\r\n */\r\nclass SwUpdate {\r\n    /**\r\n     * True if the Service Worker is enabled (supported by the browser and enabled via\r\n     * `ServiceWorkerModule`).\r\n     */\r\n    get isEnabled() {\r\n        return this.sw.isEnabled;\r\n    }\r\n    constructor(sw) {\r\n        this.sw = sw;\r\n        if (!sw.isEnabled) {\r\n            this.versionUpdates = NEVER;\r\n            this.available = NEVER;\r\n            this.activated = NEVER;\r\n            this.unrecoverable = NEVER;\r\n            return;\r\n        }\r\n        this.versionUpdates = this.sw.eventsOfType([\r\n            'VERSION_DETECTED',\r\n            'VERSION_INSTALLATION_FAILED',\r\n            'VERSION_READY',\r\n            'NO_NEW_VERSION_DETECTED',\r\n        ]);\r\n        this.available = this.versionUpdates.pipe(filter((evt) => evt.type === 'VERSION_READY'), map(evt => ({\r\n            type: 'UPDATE_AVAILABLE',\r\n            current: evt.currentVersion,\r\n            available: evt.latestVersion,\r\n        })));\r\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\r\n        this.unrecoverable = this.sw.eventsOfType('UNRECOVERABLE_STATE');\r\n    }\r\n    /**\r\n     * Checks for an update and waits until the new version is downloaded from the server and ready\r\n     * for activation.\r\n     *\r\n     * @returns a promise that\r\n     * - resolves to `true` if a new version was found and is ready to be activated.\r\n     * - resolves to `false` if no new version was found\r\n     * - rejects if any error occurs\r\n     */\r\n    checkForUpdate() {\r\n        if (!this.sw.isEnabled) {\r\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\r\n        }\r\n        const nonce = this.sw.generateNonce();\r\n        return this.sw.postMessageWithOperation('CHECK_FOR_UPDATES', { nonce }, nonce);\r\n    }\r\n    /**\r\n     * Updates the current client (i.e. browser tab) to the latest version that is ready for\r\n     * activation.\r\n     *\r\n     * In most cases, you should not use this method and instead should update a client by reloading\r\n     * the page.\r\n     *\r\n     * <div class=\"alert is-important\">\r\n     *\r\n     * Updating a client without reloading can easily result in a broken application due to a version\r\n     * mismatch between the [application shell](guide/glossary#app-shell) and other page resources,\r\n     * such as [lazy-loaded chunks](guide/glossary#lazy-loading), whose filenames may change between\r\n     * versions.\r\n     *\r\n     * Only use this method, if you are certain it is safe for your specific use case.\r\n     *\r\n     * </div>\r\n     *\r\n     * @returns a promise that\r\n     *  - resolves to `true` if an update was activated successfully\r\n     *  - resolves to `false` if no update was available (for example, the client was already on the\r\n     *    latest version).\r\n     *  - rejects if any error occurs\r\n     */\r\n    activateUpdate() {\r\n        if (!this.sw.isEnabled) {\r\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\r\n        }\r\n        const nonce = this.sw.generateNonce();\r\n        return this.sw.postMessageWithOperation('ACTIVATE_UPDATE', { nonce }, nonce);\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: SwUpdate, deps: [{ token: NgswCommChannel }], target: i0.ɵɵFactoryTarget.Injectable }); }\r\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: SwUpdate }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: SwUpdate, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: NgswCommChannel }]; } });\r\n\r\n/*!\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst SCRIPT = new InjectionToken('NGSW_REGISTER_SCRIPT');\r\nfunction ngswAppInitializer(injector, script, options, platformId) {\r\n    return () => {\r\n        if (!(isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\r\n            options.enabled !== false)) {\r\n            return;\r\n        }\r\n        // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\r\n        // becomes active. This allows the SW to initialize itself even if there is no application\r\n        // traffic.\r\n        navigator.serviceWorker.addEventListener('controllerchange', () => {\r\n            if (navigator.serviceWorker.controller !== null) {\r\n                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });\r\n            }\r\n        });\r\n        let readyToRegister$;\r\n        if (typeof options.registrationStrategy === 'function') {\r\n            readyToRegister$ = options.registrationStrategy();\r\n        }\r\n        else {\r\n            const [strategy, ...args] = (options.registrationStrategy || 'registerWhenStable:30000').split(':');\r\n            switch (strategy) {\r\n                case 'registerImmediately':\r\n                    readyToRegister$ = of(null);\r\n                    break;\r\n                case 'registerWithDelay':\r\n                    readyToRegister$ = delayWithTimeout(+args[0] || 0);\r\n                    break;\r\n                case 'registerWhenStable':\r\n                    readyToRegister$ = !args[0] ? whenStable(injector) :\r\n                        merge(whenStable(injector), delayWithTimeout(+args[0]));\r\n                    break;\r\n                default:\r\n                    // Unknown strategy.\r\n                    throw new Error(`Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);\r\n            }\r\n        }\r\n        // Don't return anything to avoid blocking the application until the SW is registered.\r\n        // Also, run outside the Angular zone to avoid preventing the app from stabilizing (especially\r\n        // given that some registration strategies wait for the app to stabilize).\r\n        // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\r\n        const ngZone = injector.get(NgZone);\r\n        ngZone.runOutsideAngular(() => readyToRegister$.pipe(take(1)).subscribe(() => navigator.serviceWorker.register(script, { scope: options.scope })\r\n            .catch(err => console.error('Service worker registration failed with:', err))));\r\n    };\r\n}\r\nfunction delayWithTimeout(timeout) {\r\n    return of(null).pipe(delay(timeout));\r\n}\r\nfunction whenStable(injector) {\r\n    const appRef = injector.get(ApplicationRef);\r\n    return appRef.isStable.pipe(filter(stable => stable));\r\n}\r\nfunction ngswCommChannelFactory(opts, platformId) {\r\n    return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\r\n        undefined);\r\n}\r\n/**\r\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\r\n * `ServiceWorkerModule.register()`.\r\n *\r\n * You can use this token to define a provider that generates the registration options at runtime,\r\n * for example via a function call:\r\n *\r\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\r\n *     header=\"app.module.ts\"}\r\n *\r\n * @publicApi\r\n */\r\nclass SwRegistrationOptions {\r\n}\r\n/**\r\n * @publicApi\r\n *\r\n * Sets up providers to register the given Angular Service Worker script.\r\n *\r\n * If `enabled` is set to `false` in the given options, the module will behave as if service\r\n * workers are not supported by the browser, and the service worker will not be registered.\r\n *\r\n * Example usage:\r\n * ```ts\r\n * bootstrapApplication(AppComponent, {\r\n *   providers: [\r\n *     provideServiceWorker('ngsw-worker.js')\r\n *   ],\r\n * });\r\n * ```\r\n */\r\nfunction provideServiceWorker(script, options = {}) {\r\n    return makeEnvironmentProviders([\r\n        SwPush,\r\n        SwUpdate,\r\n        { provide: SCRIPT, useValue: script },\r\n        { provide: SwRegistrationOptions, useValue: options },\r\n        {\r\n            provide: NgswCommChannel,\r\n            useFactory: ngswCommChannelFactory,\r\n            deps: [SwRegistrationOptions, PLATFORM_ID]\r\n        },\r\n        {\r\n            provide: APP_INITIALIZER,\r\n            useFactory: ngswAppInitializer,\r\n            deps: [Injector, SCRIPT, SwRegistrationOptions, PLATFORM_ID],\r\n            multi: true,\r\n        },\r\n    ]);\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nclass ServiceWorkerModule {\r\n    /**\r\n     * Register the given Angular Service Worker script.\r\n     *\r\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\r\n     * workers are not supported by the browser, and the service worker will not be registered.\r\n     */\r\n    static register(script, options = {}) {\r\n        return {\r\n            ngModule: ServiceWorkerModule,\r\n            providers: [provideServiceWorker(script, options)],\r\n        };\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ServiceWorkerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\r\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.12\", ngImport: i0, type: ServiceWorkerModule }); }\r\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ServiceWorkerModule, providers: [SwPush, SwUpdate] }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: ServiceWorkerModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{ providers: [SwPush, SwUpdate] }]\r\n        }] });\r\n\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of this package.\r\n */\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n// This file is not used to build this module. It is only used during editing\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { ServiceWorkerModule, SwPush, SwRegistrationOptions, SwUpdate, provideServiceWorker };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
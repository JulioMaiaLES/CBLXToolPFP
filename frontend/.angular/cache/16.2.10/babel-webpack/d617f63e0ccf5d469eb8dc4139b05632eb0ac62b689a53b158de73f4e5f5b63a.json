{"ast":null,"code":"import { distance } from 'fastest-levenshtein';\nconst getUsedThreshold = (password, entry, threshold) => {\n  const isPasswordToShort = password.length <= entry.length;\n  const isThresholdLongerThanPassword = password.length <= threshold;\n  const shouldUsePasswordLength = isPasswordToShort || isThresholdLongerThanPassword;\n  // if password is too small use the password length divided by 4 while the threshold needs to be at least 1\n  return shouldUsePasswordLength ? Math.ceil(password.length / 4) : threshold;\n};\nconst findLevenshteinDistance = (password, rankedDictionary, threshold) => {\n  let foundDistance = 0;\n  const found = Object.keys(rankedDictionary).find(entry => {\n    const usedThreshold = getUsedThreshold(password, entry, threshold);\n    if (Math.abs(password.length - entry.length) > usedThreshold) {\n      return false;\n    }\n    const foundEntryDistance = distance(password, entry);\n    const isInThreshold = foundEntryDistance <= usedThreshold;\n    if (isInThreshold) {\n      foundDistance = foundEntryDistance;\n    }\n    return isInThreshold;\n  });\n  if (found) {\n    return {\n      levenshteinDistance: foundDistance,\n      levenshteinDistanceEntry: found\n    };\n  }\n  return {};\n};\nexport { findLevenshteinDistance as default };","map":{"version":3,"names":["distance","getUsedThreshold","password","entry","threshold","isPasswordToShort","length","isThresholdLongerThanPassword","shouldUsePasswordLength","Math","ceil","findLevenshteinDistance","rankedDictionary","foundDistance","found","Object","keys","find","usedThreshold","abs","foundEntryDistance","isInThreshold","levenshteinDistance","levenshteinDistanceEntry","default"],"sources":["C:/Users/j-mai/Documents/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/levenshtein.esm.js"],"sourcesContent":["import { distance } from 'fastest-levenshtein';\n\nconst getUsedThreshold = (password, entry, threshold) => {\n  const isPasswordToShort = password.length <= entry.length;\n  const isThresholdLongerThanPassword = password.length <= threshold;\n  const shouldUsePasswordLength = isPasswordToShort || isThresholdLongerThanPassword;\n  // if password is too small use the password length divided by 4 while the threshold needs to be at least 1\n  return shouldUsePasswordLength ? Math.ceil(password.length / 4) : threshold;\n};\nconst findLevenshteinDistance = (password, rankedDictionary, threshold) => {\n  let foundDistance = 0;\n  const found = Object.keys(rankedDictionary).find(entry => {\n    const usedThreshold = getUsedThreshold(password, entry, threshold);\n    if (Math.abs(password.length - entry.length) > usedThreshold) {\n      return false;\n    }\n    const foundEntryDistance = distance(password, entry);\n    const isInThreshold = foundEntryDistance <= usedThreshold;\n    if (isInThreshold) {\n      foundDistance = foundEntryDistance;\n    }\n    return isInThreshold;\n  });\n  if (found) {\n    return {\n      levenshteinDistance: foundDistance,\n      levenshteinDistanceEntry: found\n    };\n  }\n  return {};\n};\n\nexport { findLevenshteinDistance as default };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,qBAAqB;AAE9C,MAAMC,gBAAgB,GAAGA,CAACC,QAAQ,EAAEC,KAAK,EAAEC,SAAS,KAAK;EACvD,MAAMC,iBAAiB,GAAGH,QAAQ,CAACI,MAAM,IAAIH,KAAK,CAACG,MAAM;EACzD,MAAMC,6BAA6B,GAAGL,QAAQ,CAACI,MAAM,IAAIF,SAAS;EAClE,MAAMI,uBAAuB,GAAGH,iBAAiB,IAAIE,6BAA6B;EAClF;EACA,OAAOC,uBAAuB,GAAGC,IAAI,CAACC,IAAI,CAACR,QAAQ,CAACI,MAAM,GAAG,CAAC,CAAC,GAAGF,SAAS;AAC7E,CAAC;AACD,MAAMO,uBAAuB,GAAGA,CAACT,QAAQ,EAAEU,gBAAgB,EAAER,SAAS,KAAK;EACzE,IAAIS,aAAa,GAAG,CAAC;EACrB,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACJ,gBAAgB,CAAC,CAACK,IAAI,CAACd,KAAK,IAAI;IACxD,MAAMe,aAAa,GAAGjB,gBAAgB,CAACC,QAAQ,EAAEC,KAAK,EAAEC,SAAS,CAAC;IAClE,IAAIK,IAAI,CAACU,GAAG,CAACjB,QAAQ,CAACI,MAAM,GAAGH,KAAK,CAACG,MAAM,CAAC,GAAGY,aAAa,EAAE;MAC5D,OAAO,KAAK;IACd;IACA,MAAME,kBAAkB,GAAGpB,QAAQ,CAACE,QAAQ,EAAEC,KAAK,CAAC;IACpD,MAAMkB,aAAa,GAAGD,kBAAkB,IAAIF,aAAa;IACzD,IAAIG,aAAa,EAAE;MACjBR,aAAa,GAAGO,kBAAkB;IACpC;IACA,OAAOC,aAAa;EACtB,CAAC,CAAC;EACF,IAAIP,KAAK,EAAE;IACT,OAAO;MACLQ,mBAAmB,EAAET,aAAa;MAClCU,wBAAwB,EAAET;IAC5B,CAAC;EACH;EACA,OAAO,CAAC,CAAC;AACX,CAAC;AAED,SAASH,uBAAuB,IAAIa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
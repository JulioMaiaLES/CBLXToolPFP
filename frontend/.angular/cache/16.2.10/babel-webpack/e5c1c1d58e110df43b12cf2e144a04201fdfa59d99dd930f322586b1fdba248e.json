{"ast":null,"code":"const extend = (listToExtend, list) =>\n// eslint-disable-next-line prefer-spread\nlistToExtend.push.apply(listToExtend, list);\n// sort on i primary, j secondary\nconst sorted = matches => matches.sort((m1, m2) => m1.i - m2.i || m1.j - m2.j);\nconst buildRankedDictionary = orderedList => {\n  const result = {};\n  let counter = 1; // rank starts at 1, not 0\n  orderedList.forEach(word => {\n    result[word] = counter;\n    counter += 1;\n  });\n  return result;\n};\nexport { buildRankedDictionary, extend, sorted };","map":{"version":3,"names":["extend","listToExtend","list","push","apply","sorted","matches","sort","m1","m2","i","j","buildRankedDictionary","orderedList","result","counter","forEach","word"],"sources":["C:/Users/j-mai/Documents/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/helper.esm.js"],"sourcesContent":["const extend = (listToExtend, list) =>\n// eslint-disable-next-line prefer-spread\nlistToExtend.push.apply(listToExtend, list);\n// sort on i primary, j secondary\nconst sorted = matches => matches.sort((m1, m2) => m1.i - m2.i || m1.j - m2.j);\nconst buildRankedDictionary = orderedList => {\n  const result = {};\n  let counter = 1; // rank starts at 1, not 0\n  orderedList.forEach(word => {\n    result[word] = counter;\n    counter += 1;\n  });\n  return result;\n};\n\nexport { buildRankedDictionary, extend, sorted };\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGA,CAACC,YAAY,EAAEC,IAAI;AAClC;AACAD,YAAY,CAACE,IAAI,CAACC,KAAK,CAACH,YAAY,EAAEC,IAAI,CAAC;AAC3C;AACA,MAAMG,MAAM,GAAGC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC,CAACC,EAAE,EAAEC,EAAE,KAAKD,EAAE,CAACE,CAAC,GAAGD,EAAE,CAACC,CAAC,IAAIF,EAAE,CAACG,CAAC,GAAGF,EAAE,CAACE,CAAC,CAAC;AAC9E,MAAMC,qBAAqB,GAAGC,WAAW,IAAI;EAC3C,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,IAAIC,OAAO,GAAG,CAAC,CAAC,CAAC;EACjBF,WAAW,CAACG,OAAO,CAACC,IAAI,IAAI;IAC1BH,MAAM,CAACG,IAAI,CAAC,GAAGF,OAAO;IACtBA,OAAO,IAAI,CAAC;EACd,CAAC,CAAC;EACF,OAAOD,MAAM;AACf,CAAC;AAED,SAASF,qBAAqB,EAAEZ,MAAM,EAAEK,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
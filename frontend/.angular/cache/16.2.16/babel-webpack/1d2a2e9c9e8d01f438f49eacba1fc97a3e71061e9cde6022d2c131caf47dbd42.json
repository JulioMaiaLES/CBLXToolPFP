{"ast":null,"code":"import { zxcvbnOptions } from './Options.esm.js';\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst MONTH = DAY * 31;\nconst YEAR = MONTH * 12;\nconst CENTURY = YEAR * 100;\nconst times = {\n  second: SECOND,\n  minute: MINUTE,\n  hour: HOUR,\n  day: DAY,\n  month: MONTH,\n  year: YEAR,\n  century: CENTURY\n};\n/*\n * -------------------------------------------------------------------------------\n *  Estimates time for an attacker ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass TimeEstimates {\n  translate(displayStr, value) {\n    let key = displayStr;\n    if (value !== undefined && value !== 1) {\n      key += 's';\n    }\n    const {\n      timeEstimation\n    } = zxcvbnOptions.translations;\n    return timeEstimation[key].replace('{base}', `${value}`);\n  }\n  estimateAttackTimes(guesses) {\n    const crackTimesSeconds = {\n      onlineThrottling100PerHour: guesses / (100 / 3600),\n      onlineNoThrottling10PerSecond: guesses / 10,\n      offlineSlowHashing1e4PerSecond: guesses / 1e4,\n      offlineFastHashing1e10PerSecond: guesses / 1e10\n    };\n    const crackTimesDisplay = {\n      onlineThrottling100PerHour: '',\n      onlineNoThrottling10PerSecond: '',\n      offlineSlowHashing1e4PerSecond: '',\n      offlineFastHashing1e10PerSecond: ''\n    };\n    Object.keys(crackTimesSeconds).forEach(scenario => {\n      const seconds = crackTimesSeconds[scenario];\n      crackTimesDisplay[scenario] = this.displayTime(seconds);\n    });\n    return {\n      crackTimesSeconds,\n      crackTimesDisplay,\n      score: this.guessesToScore(guesses)\n    };\n  }\n  guessesToScore(guesses) {\n    const DELTA = 5;\n    if (guesses < 1e3 + DELTA) {\n      // risky password: \"too guessable\"\n      return 0;\n    }\n    if (guesses < 1e6 + DELTA) {\n      // modest protection from throttled online attacks: \"very guessable\"\n      return 1;\n    }\n    if (guesses < 1e8 + DELTA) {\n      // modest protection from unthrottled online attacks: \"somewhat guessable\"\n      return 2;\n    }\n    if (guesses < 1e10 + DELTA) {\n      // modest protection from offline attacks: \"safely unguessable\"\n      // assuming a salted, slow hash function like bcrypt, scrypt, PBKDF2, argon, etc\n      return 3;\n    }\n    // strong protection from offline attacks under same scenario: \"very unguessable\"\n    return 4;\n  }\n  displayTime(seconds) {\n    let displayStr = 'centuries';\n    let base;\n    const timeKeys = Object.keys(times);\n    const foundIndex = timeKeys.findIndex(time => seconds < times[time]);\n    if (foundIndex > -1) {\n      displayStr = timeKeys[foundIndex - 1];\n      if (foundIndex !== 0) {\n        base = Math.round(seconds / times[displayStr]);\n      } else {\n        displayStr = 'ltSecond';\n      }\n    }\n    return this.translate(displayStr, base);\n  }\n}\nexport { TimeEstimates as default };","map":{"version":3,"names":["zxcvbnOptions","SECOND","MINUTE","HOUR","DAY","MONTH","YEAR","CENTURY","times","second","minute","hour","day","month","year","century","TimeEstimates","translate","displayStr","value","key","undefined","timeEstimation","translations","replace","estimateAttackTimes","guesses","crackTimesSeconds","onlineThrottling100PerHour","onlineNoThrottling10PerSecond","offlineSlowHashing1e4PerSecond","offlineFastHashing1e10PerSecond","crackTimesDisplay","Object","keys","forEach","scenario","seconds","displayTime","score","guessesToScore","DELTA","base","timeKeys","foundIndex","findIndex","time","Math","round","default"],"sources":["C:/Users/j-mai/Documents/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/TimeEstimates.esm.js"],"sourcesContent":["import { zxcvbnOptions } from './Options.esm.js';\n\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst MONTH = DAY * 31;\nconst YEAR = MONTH * 12;\nconst CENTURY = YEAR * 100;\nconst times = {\n  second: SECOND,\n  minute: MINUTE,\n  hour: HOUR,\n  day: DAY,\n  month: MONTH,\n  year: YEAR,\n  century: CENTURY\n};\n/*\n * -------------------------------------------------------------------------------\n *  Estimates time for an attacker ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass TimeEstimates {\n  translate(displayStr, value) {\n    let key = displayStr;\n    if (value !== undefined && value !== 1) {\n      key += 's';\n    }\n    const {\n      timeEstimation\n    } = zxcvbnOptions.translations;\n    return timeEstimation[key].replace('{base}', `${value}`);\n  }\n  estimateAttackTimes(guesses) {\n    const crackTimesSeconds = {\n      onlineThrottling100PerHour: guesses / (100 / 3600),\n      onlineNoThrottling10PerSecond: guesses / 10,\n      offlineSlowHashing1e4PerSecond: guesses / 1e4,\n      offlineFastHashing1e10PerSecond: guesses / 1e10\n    };\n    const crackTimesDisplay = {\n      onlineThrottling100PerHour: '',\n      onlineNoThrottling10PerSecond: '',\n      offlineSlowHashing1e4PerSecond: '',\n      offlineFastHashing1e10PerSecond: ''\n    };\n    Object.keys(crackTimesSeconds).forEach(scenario => {\n      const seconds = crackTimesSeconds[scenario];\n      crackTimesDisplay[scenario] = this.displayTime(seconds);\n    });\n    return {\n      crackTimesSeconds,\n      crackTimesDisplay,\n      score: this.guessesToScore(guesses)\n    };\n  }\n  guessesToScore(guesses) {\n    const DELTA = 5;\n    if (guesses < 1e3 + DELTA) {\n      // risky password: \"too guessable\"\n      return 0;\n    }\n    if (guesses < 1e6 + DELTA) {\n      // modest protection from throttled online attacks: \"very guessable\"\n      return 1;\n    }\n    if (guesses < 1e8 + DELTA) {\n      // modest protection from unthrottled online attacks: \"somewhat guessable\"\n      return 2;\n    }\n    if (guesses < 1e10 + DELTA) {\n      // modest protection from offline attacks: \"safely unguessable\"\n      // assuming a salted, slow hash function like bcrypt, scrypt, PBKDF2, argon, etc\n      return 3;\n    }\n    // strong protection from offline attacks under same scenario: \"very unguessable\"\n    return 4;\n  }\n  displayTime(seconds) {\n    let displayStr = 'centuries';\n    let base;\n    const timeKeys = Object.keys(times);\n    const foundIndex = timeKeys.findIndex(time => seconds < times[time]);\n    if (foundIndex > -1) {\n      displayStr = timeKeys[foundIndex - 1];\n      if (foundIndex !== 0) {\n        base = Math.round(seconds / times[displayStr]);\n      } else {\n        displayStr = 'ltSecond';\n      }\n    }\n    return this.translate(displayStr, base);\n  }\n}\n\nexport { TimeEstimates as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
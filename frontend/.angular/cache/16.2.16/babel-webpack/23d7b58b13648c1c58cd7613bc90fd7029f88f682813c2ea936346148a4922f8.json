{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { zoomInAnimation } from '@animations/route-animation';\nimport { ForgotPasswordComponent } from '@app/components/modals/forgot-password/forgot-password.component';\nimport { CookiesLoginComponent } from '@components/modals/cookies-login/cookies-login.component';\nimport { environment } from '@env';\nexport let LoginComponent = class LoginComponent {\n  constructor(fb, dialog, storage, authService, router) {\n    this.fb = fb;\n    this.dialog = dialog;\n    this.storage = storage;\n    this.authService = authService;\n    this.router = router;\n    this.loading = false;\n    this.view_pass = false;\n    this.version = environment.version;\n    this.login_form = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      remember: [false]\n    });\n  }\n  ngOnInit() {\n    this.awaitRemember();\n  }\n  loginSubmitHandler() {\n    if (this.login_form.invalid) {\n      this.login_form.markAllAsTouched();\n      return;\n    }\n    this.loading = true;\n    // Extraindo os valores de email, password e remember do formulário\n    const email = this.login_form.get('email')?.value ?? ''; // Garante que email nunca seja null ou undefined\n    const password = this.login_form.get('password')?.value ?? ''; // Garante que password nunca seja null ou undefined\n    const remember = this.login_form.get('remember')?.value;\n    // Passando email e password como argumentos separados para o login\n    this.authService.login(email, password).subscribe({\n      next: response => {\n        this.loading = false;\n        this.authService.setToken(response.token, remember); // `remember` já foi extraído\n        this.router.navigate(['/']);\n      },\n      error: () => {\n        this.loading = false;\n      }\n    });\n  }\n  awaitRemember() {\n    this.login_form.get('remember')?.valueChanges.subscribe(value => {\n      if (!value) return;\n      if (!this.storage.cookies) {\n        this.openCookieDialog();\n      }\n    });\n  }\n  handleOpenForgotPasswordModal() {\n    this.dialog.open(ForgotPasswordComponent, {\n      data: {\n        email: this.login_form.get('email')?.value\n      }\n    });\n  }\n  openCookieDialog() {\n    const dialogRef = this.dialog.open(CookiesLoginComponent, {\n      panelClass: 'cookies-dialog',\n      disableClose: true\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.storage.cookies = true;\n      } else {\n        this.login_form.get('remember')?.setValue(false);\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  animations: [zoomInAnimation]\n})], LoginComponent);","map":{"version":3,"names":["Component","Validators","zoomInAnimation","ForgotPasswordComponent","CookiesLoginComponent","environment","LoginComponent","constructor","fb","dialog","storage","authService","router","loading","view_pass","version","login_form","group","email","required","password","remember","ngOnInit","awaitRemember","loginSubmitHandler","invalid","markAllAsTouched","get","value","login","subscribe","next","response","setToken","token","navigate","error","valueChanges","cookies","openCookieDialog","handleOpenForgotPasswordModal","open","data","dialogRef","panelClass","disableClose","afterClosed","result","setValue","__decorate","selector","templateUrl","styleUrls","animations"],"sources":["C:\\Users\\j-mai\\Documents\\CBLXToolPFP\\frontend\\src\\app\\pages\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { zoomInAnimation } from '@animations/route-animation';\r\nimport { ForgotPasswordComponent } from '@app/components/modals/forgot-password/forgot-password.component';\r\nimport { CookiesLoginComponent } from '@components/modals/cookies-login/cookies-login.component';\r\nimport { environment } from '@env';\r\nimport { AuthService } from '@services/auth.service';\r\nimport { BodyJson } from '@services/http.service';\r\nimport { StorageService } from '@services/storage.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  animations: [zoomInAnimation],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    public dialog: MatDialog,\r\n    public storage: StorageService,\r\n    private authService: AuthService,\r\n    public router: Router\r\n  ) {}\r\n\r\n  loading = false;\r\n  view_pass = false;\r\n\r\n  version = environment.version;\r\n\r\n  login_form = this.fb.group({\r\n    email: ['', [Validators.required, Validators.email]],\r\n    password: ['', Validators.required],\r\n    remember: [false],\r\n  });\r\n\r\n  ngOnInit(): void {\r\n    this.awaitRemember();\r\n  }\r\n\r\n  loginSubmitHandler() {\r\n    if (this.login_form.invalid) {\r\n      this.login_form.markAllAsTouched();\r\n      return;\r\n    }\r\n  \r\n    this.loading = true;\r\n  \r\n    // Extraindo os valores de email, password e remember do formulário\r\n    const email = this.login_form.get('email')?.value ?? '';  // Garante que email nunca seja null ou undefined\r\n    const password = this.login_form.get('password')?.value ?? '';  // Garante que password nunca seja null ou undefined\r\n    const remember = this.login_form.get('remember')?.value;\r\n    // Passando email e password como argumentos separados para o login\r\n    this.authService.login(email, password).subscribe({\r\n      next: (response) => {\r\n        this.loading = false;\r\n        this.authService.setToken(response.token, remember as boolean);  // `remember` já foi extraído\r\n        this.router.navigate(['/']);\r\n      },\r\n      error: () => {\r\n        this.loading = false;\r\n      },\r\n    });\r\n  }\r\n  \r\n\r\n  awaitRemember() {\r\n    this.login_form.get('remember')?.valueChanges.subscribe((value) => {\r\n      if (!value) return;\r\n\r\n      if (!this.storage.cookies) {\r\n        this.openCookieDialog();\r\n      }\r\n    });\r\n  }\r\n\r\n  handleOpenForgotPasswordModal() {\r\n    this.dialog.open(ForgotPasswordComponent, {\r\n      data: { email: this.login_form.get('email')?.value },\r\n    });\r\n  }\r\n\r\n  openCookieDialog() {\r\n    const dialogRef = this.dialog.open(CookiesLoginComponent, {\r\n      panelClass: 'cookies-dialog',\r\n      disableClose: true,\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result: boolean) => {\r\n      if (result) {\r\n        this.storage.cookies = true;\r\n      } else {\r\n        this.login_form.get('remember')?.setValue(false);\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { buildRankedDictionary } from './helper.esm.js';\nimport l33tTable from './data/l33tTable.esm.js';\nimport translationKeys from './data/translationKeys.esm.js';\nimport TrieNode from './matcher/dictionary/variants/matching/unmunger/TrieNode.esm.js';\nimport l33tTableToTrieNode from './matcher/dictionary/variants/matching/unmunger/l33tTableToTrieNode.esm.js';\nclass Options {\n  constructor() {\n    this.matchers = {};\n    this.l33tTable = l33tTable;\n    this.trieNodeRoot = l33tTableToTrieNode(l33tTable, new TrieNode());\n    this.dictionary = {\n      userInputs: []\n    };\n    this.rankedDictionaries = {};\n    this.rankedDictionariesMaxWordSize = {};\n    this.translations = translationKeys;\n    this.graphs = {};\n    this.useLevenshteinDistance = false;\n    this.levenshteinThreshold = 2;\n    this.l33tMaxSubstitutions = 100;\n    this.maxLength = 256;\n    this.setRankedDictionaries();\n  }\n  // eslint-disable-next-line max-statements,complexity\n  setOptions(options = {}) {\n    if (options.l33tTable) {\n      this.l33tTable = options.l33tTable;\n      this.trieNodeRoot = l33tTableToTrieNode(options.l33tTable, new TrieNode());\n    }\n    if (options.dictionary) {\n      this.dictionary = options.dictionary;\n      this.setRankedDictionaries();\n    }\n    if (options.translations) {\n      this.setTranslations(options.translations);\n    }\n    if (options.graphs) {\n      this.graphs = options.graphs;\n    }\n    if (options.useLevenshteinDistance !== undefined) {\n      this.useLevenshteinDistance = options.useLevenshteinDistance;\n    }\n    if (options.levenshteinThreshold !== undefined) {\n      this.levenshteinThreshold = options.levenshteinThreshold;\n    }\n    if (options.l33tMaxSubstitutions !== undefined) {\n      this.l33tMaxSubstitutions = options.l33tMaxSubstitutions;\n    }\n    if (options.maxLength !== undefined) {\n      this.maxLength = options.maxLength;\n    }\n  }\n  setTranslations(translations) {\n    if (this.checkCustomTranslations(translations)) {\n      this.translations = translations;\n    } else {\n      throw new Error('Invalid translations object fallback to keys');\n    }\n  }\n  checkCustomTranslations(translations) {\n    let valid = true;\n    Object.keys(translationKeys).forEach(type => {\n      if (type in translations) {\n        const translationType = type;\n        Object.keys(translationKeys[translationType]).forEach(key => {\n          if (!(key in translations[translationType])) {\n            valid = false;\n          }\n        });\n      } else {\n        valid = false;\n      }\n    });\n    return valid;\n  }\n  setRankedDictionaries() {\n    const rankedDictionaries = {};\n    const rankedDictionariesMaxWorkSize = {};\n    Object.keys(this.dictionary).forEach(name => {\n      rankedDictionaries[name] = buildRankedDictionary(this.dictionary[name]);\n      rankedDictionariesMaxWorkSize[name] = this.getRankedDictionariesMaxWordSize(this.dictionary[name]);\n    });\n    this.rankedDictionaries = rankedDictionaries;\n    this.rankedDictionariesMaxWordSize = rankedDictionariesMaxWorkSize;\n  }\n  getRankedDictionariesMaxWordSize(list) {\n    const data = list.map(el => {\n      if (typeof el !== 'string') {\n        return el.toString().length;\n      }\n      return el.length;\n    });\n    // do not use Math.max(...data) because it can result in max stack size error because every entry will be used as an argument\n    if (data.length === 0) {\n      return 0;\n    }\n    return data.reduce((a, b) => Math.max(a, b), -Infinity);\n  }\n  buildSanitizedRankedDictionary(list) {\n    const sanitizedInputs = [];\n    list.forEach(input => {\n      const inputType = typeof input;\n      if (inputType === 'string' || inputType === 'number' || inputType === 'boolean') {\n        sanitizedInputs.push(input.toString().toLowerCase());\n      }\n    });\n    return buildRankedDictionary(sanitizedInputs);\n  }\n  extendUserInputsDictionary(dictionary) {\n    if (!this.dictionary.userInputs) {\n      this.dictionary.userInputs = [];\n    }\n    const newList = [...this.dictionary.userInputs, ...dictionary];\n    this.rankedDictionaries.userInputs = this.buildSanitizedRankedDictionary(newList);\n    this.rankedDictionariesMaxWordSize.userInputs = this.getRankedDictionariesMaxWordSize(newList);\n  }\n  addMatcher(name, matcher) {\n    if (this.matchers[name]) {\n      console.info(`Matcher ${name} already exists`);\n    } else {\n      this.matchers[name] = matcher;\n    }\n  }\n}\nconst zxcvbnOptions = new Options();\nexport { Options, zxcvbnOptions };","map":{"version":3,"names":["buildRankedDictionary","l33tTable","translationKeys","TrieNode","l33tTableToTrieNode","Options","constructor","matchers","trieNodeRoot","dictionary","userInputs","rankedDictionaries","rankedDictionariesMaxWordSize","translations","graphs","useLevenshteinDistance","levenshteinThreshold","l33tMaxSubstitutions","maxLength","setRankedDictionaries","setOptions","options","setTranslations","undefined","checkCustomTranslations","Error","valid","Object","keys","forEach","type","translationType","key","rankedDictionariesMaxWorkSize","name","getRankedDictionariesMaxWordSize","list","data","map","el","toString","length","reduce","a","b","Math","max","Infinity","buildSanitizedRankedDictionary","sanitizedInputs","input","inputType","push","toLowerCase","extendUserInputsDictionary","newList","addMatcher","matcher","console","info","zxcvbnOptions"],"sources":["C:/Users/j-mai/Documents/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/Options.esm.js"],"sourcesContent":["import { buildRankedDictionary } from './helper.esm.js';\nimport l33tTable from './data/l33tTable.esm.js';\nimport translationKeys from './data/translationKeys.esm.js';\nimport TrieNode from './matcher/dictionary/variants/matching/unmunger/TrieNode.esm.js';\nimport l33tTableToTrieNode from './matcher/dictionary/variants/matching/unmunger/l33tTableToTrieNode.esm.js';\n\nclass Options {\n  constructor() {\n    this.matchers = {};\n    this.l33tTable = l33tTable;\n    this.trieNodeRoot = l33tTableToTrieNode(l33tTable, new TrieNode());\n    this.dictionary = {\n      userInputs: []\n    };\n    this.rankedDictionaries = {};\n    this.rankedDictionariesMaxWordSize = {};\n    this.translations = translationKeys;\n    this.graphs = {};\n    this.useLevenshteinDistance = false;\n    this.levenshteinThreshold = 2;\n    this.l33tMaxSubstitutions = 100;\n    this.maxLength = 256;\n    this.setRankedDictionaries();\n  }\n  // eslint-disable-next-line max-statements,complexity\n  setOptions(options = {}) {\n    if (options.l33tTable) {\n      this.l33tTable = options.l33tTable;\n      this.trieNodeRoot = l33tTableToTrieNode(options.l33tTable, new TrieNode());\n    }\n    if (options.dictionary) {\n      this.dictionary = options.dictionary;\n      this.setRankedDictionaries();\n    }\n    if (options.translations) {\n      this.setTranslations(options.translations);\n    }\n    if (options.graphs) {\n      this.graphs = options.graphs;\n    }\n    if (options.useLevenshteinDistance !== undefined) {\n      this.useLevenshteinDistance = options.useLevenshteinDistance;\n    }\n    if (options.levenshteinThreshold !== undefined) {\n      this.levenshteinThreshold = options.levenshteinThreshold;\n    }\n    if (options.l33tMaxSubstitutions !== undefined) {\n      this.l33tMaxSubstitutions = options.l33tMaxSubstitutions;\n    }\n    if (options.maxLength !== undefined) {\n      this.maxLength = options.maxLength;\n    }\n  }\n  setTranslations(translations) {\n    if (this.checkCustomTranslations(translations)) {\n      this.translations = translations;\n    } else {\n      throw new Error('Invalid translations object fallback to keys');\n    }\n  }\n  checkCustomTranslations(translations) {\n    let valid = true;\n    Object.keys(translationKeys).forEach(type => {\n      if (type in translations) {\n        const translationType = type;\n        Object.keys(translationKeys[translationType]).forEach(key => {\n          if (!(key in translations[translationType])) {\n            valid = false;\n          }\n        });\n      } else {\n        valid = false;\n      }\n    });\n    return valid;\n  }\n  setRankedDictionaries() {\n    const rankedDictionaries = {};\n    const rankedDictionariesMaxWorkSize = {};\n    Object.keys(this.dictionary).forEach(name => {\n      rankedDictionaries[name] = buildRankedDictionary(this.dictionary[name]);\n      rankedDictionariesMaxWorkSize[name] = this.getRankedDictionariesMaxWordSize(this.dictionary[name]);\n    });\n    this.rankedDictionaries = rankedDictionaries;\n    this.rankedDictionariesMaxWordSize = rankedDictionariesMaxWorkSize;\n  }\n  getRankedDictionariesMaxWordSize(list) {\n    const data = list.map(el => {\n      if (typeof el !== 'string') {\n        return el.toString().length;\n      }\n      return el.length;\n    });\n    // do not use Math.max(...data) because it can result in max stack size error because every entry will be used as an argument\n    if (data.length === 0) {\n      return 0;\n    }\n    return data.reduce((a, b) => Math.max(a, b), -Infinity);\n  }\n  buildSanitizedRankedDictionary(list) {\n    const sanitizedInputs = [];\n    list.forEach(input => {\n      const inputType = typeof input;\n      if (inputType === 'string' || inputType === 'number' || inputType === 'boolean') {\n        sanitizedInputs.push(input.toString().toLowerCase());\n      }\n    });\n    return buildRankedDictionary(sanitizedInputs);\n  }\n  extendUserInputsDictionary(dictionary) {\n    if (!this.dictionary.userInputs) {\n      this.dictionary.userInputs = [];\n    }\n    const newList = [...this.dictionary.userInputs, ...dictionary];\n    this.rankedDictionaries.userInputs = this.buildSanitizedRankedDictionary(newList);\n    this.rankedDictionariesMaxWordSize.userInputs = this.getRankedDictionariesMaxWordSize(newList);\n  }\n  addMatcher(name, matcher) {\n    if (this.matchers[name]) {\n      console.info(`Matcher ${name} already exists`);\n    } else {\n      this.matchers[name] = matcher;\n    }\n  }\n}\nconst zxcvbnOptions = new Options();\n\nexport { Options, zxcvbnOptions };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
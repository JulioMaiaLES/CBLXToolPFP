{"ast":null,"code":"import { REFERENCE_YEAR, MIN_YEAR_SPACE } from '../../data/const.esm.js';\nvar regexMatcher = ({\n  regexName,\n  regexMatch,\n  token\n}) => {\n  const charClassBases = {\n    alphaLower: 26,\n    alphaUpper: 26,\n    alpha: 52,\n    alphanumeric: 62,\n    digits: 10,\n    symbols: 33\n  };\n  if (regexName in charClassBases) {\n    return charClassBases[regexName] ** token.length;\n  }\n  // TODO add more regex types for example special dates like 09.11\n  // eslint-disable-next-line default-case\n  switch (regexName) {\n    case 'recentYear':\n      // conservative estimate of year space: num years from REFERENCE_YEAR.\n      // if year is close to REFERENCE_YEAR, estimate a year space of MIN_YEAR_SPACE.\n      return Math.max(Math.abs(parseInt(regexMatch[0], 10) - REFERENCE_YEAR), MIN_YEAR_SPACE);\n  }\n  return 0;\n};\nexport { regexMatcher as default };","map":{"version":3,"names":["REFERENCE_YEAR","MIN_YEAR_SPACE","regexMatcher","regexName","regexMatch","token","charClassBases","alphaLower","alphaUpper","alpha","alphanumeric","digits","symbols","length","Math","max","abs","parseInt","default"],"sources":["C:/Users/j-mai/Documents/CBLXToolPFP/frontend/node_modules/@zxcvbn-ts/core/dist/matcher/regex/scoring.esm.js"],"sourcesContent":["import { REFERENCE_YEAR, MIN_YEAR_SPACE } from '../../data/const.esm.js';\n\nvar regexMatcher = (({\n  regexName,\n  regexMatch,\n  token\n}) => {\n  const charClassBases = {\n    alphaLower: 26,\n    alphaUpper: 26,\n    alpha: 52,\n    alphanumeric: 62,\n    digits: 10,\n    symbols: 33\n  };\n  if (regexName in charClassBases) {\n    return charClassBases[regexName] ** token.length;\n  }\n  // TODO add more regex types for example special dates like 09.11\n  // eslint-disable-next-line default-case\n  switch (regexName) {\n    case 'recentYear':\n      // conservative estimate of year space: num years from REFERENCE_YEAR.\n      // if year is close to REFERENCE_YEAR, estimate a year space of MIN_YEAR_SPACE.\n      return Math.max(Math.abs(parseInt(regexMatch[0], 10) - REFERENCE_YEAR), MIN_YEAR_SPACE);\n  }\n  return 0;\n});\n\nexport { regexMatcher as default };\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,cAAc,QAAQ,yBAAyB;AAExE,IAAIC,YAAY,GAAIA,CAAC;EACnBC,SAAS;EACTC,UAAU;EACVC;AACF,CAAC,KAAK;EACJ,MAAMC,cAAc,GAAG;IACrBC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE,EAAE;IACdC,KAAK,EAAE,EAAE;IACTC,YAAY,EAAE,EAAE;IAChBC,MAAM,EAAE,EAAE;IACVC,OAAO,EAAE;EACX,CAAC;EACD,IAAIT,SAAS,IAAIG,cAAc,EAAE;IAC/B,OAAOA,cAAc,CAACH,SAAS,CAAC,IAAIE,KAAK,CAACQ,MAAM;EAClD;EACA;EACA;EACA,QAAQV,SAAS;IACf,KAAK,YAAY;MACf;MACA;MACA,OAAOW,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACC,QAAQ,CAACb,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAGJ,cAAc,CAAC,EAAEC,cAAc,CAAC;EAC3F;EACA,OAAO,CAAC;AACV,CAAE;AAEF,SAASC,YAAY,IAAIgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class FormErrorPipe {\n  constructor() {\n    this.error_prefix = 'errors.form';\n  }\n  transform(value) {\n    if (value) {\n      const key = Object.keys(value)[0];\n      return this.error_prefix + '.' + key;\n    }\n    return '';\n  }\n  static {\n    this.ɵfac = function FormErrorPipe_Factory(t) {\n      return new (t || FormErrorPipe)();\n    };\n  }\n  static {\n    this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n      name: \"formError\",\n      type: FormErrorPipe,\n      pure: true\n    });\n  }\n}","map":{"version":3,"names":["FormErrorPipe","constructor","error_prefix","transform","value","key","Object","keys","pure"],"sources":["C:\\Users\\j-mai\\Documents\\CBLXToolPFP\\frontend\\src\\app\\pipes\\form-error.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\n\n@Pipe({\n  name: 'formError',\n})\nexport class FormErrorPipe implements PipeTransform {\n  error_prefix = 'errors.form';\n\n  transform(value: ValidationErrors | null): string {\n    if (value) {\n      const key = Object.keys(value)[0];\n      return this.error_prefix + '.' + key;\n    }\n\n    return '';\n  }\n}\n"],"mappings":";AAMA,OAAM,MAAOA,aAAa;EAH1BC,YAAA;IAIE,KAAAC,YAAY,GAAG,aAAa;;EAE5BC,SAASA,CAACC,KAA8B;IACtC,IAAIA,KAAK,EAAE;MACT,MAAMC,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;MACjC,OAAO,IAAI,CAACF,YAAY,GAAG,GAAG,GAAGG,GAAG;;IAGtC,OAAO,EAAE;EACX;;;uBAVWL,aAAa;IAAA;EAAA;;;;YAAbA,aAAa;MAAAQ,IAAA;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
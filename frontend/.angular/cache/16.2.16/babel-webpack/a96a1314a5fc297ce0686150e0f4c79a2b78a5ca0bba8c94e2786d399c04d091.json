{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { zoomInAnimation } from '@animations/route-animation';\nimport { ForgotPasswordComponent } from '@app/components/modals/forgot-password/forgot-password.component';\nimport { CookiesLoginComponent } from '@components/modals/cookies-login/cookies-login.component';\nimport { environment } from '@env';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@services/storage.service\";\nimport * as i4 from \"@services/auth.service\";\nimport * as i5 from \"@angular/router\";\nexport class LoginComponent {\n  constructor(fb, dialog, storage, authService, router) {\n    this.fb = fb;\n    this.dialog = dialog;\n    this.storage = storage;\n    this.authService = authService;\n    this.router = router;\n    this.loading = false;\n    this.view_pass = false;\n    this.version = environment.version;\n    this.login_form = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      remember: [false]\n    });\n  }\n  ngOnInit() {\n    this.awaitRemember();\n  }\n  loginSubmitHandler() {\n    if (this.login_form.invalid) {\n      this.login_form.markAllAsTouched();\n      return;\n    }\n    this.loading = true;\n    // Extraindo os valores de email, password e remember do formulário\n    const email = this.login_form.get('email')?.value ?? ''; // Garante que email nunca seja null ou undefined\n    const password = this.login_form.get('password')?.value ?? ''; // Garante que password nunca seja null ou undefined\n    const remember = this.login_form.get('remember')?.value;\n    // Passando email e password como argumentos separados para o login\n    this.authService.login(email, password).subscribe({\n      next: response => {\n        this.loading = false;\n        this.authService.setToken(response.token, remember); // `remember` já foi extraído\n        this.router.navigate(['/']);\n      },\n      error: () => {\n        this.loading = false;\n      }\n    });\n  }\n  awaitRemember() {\n    this.login_form.get('remember')?.valueChanges.subscribe(value => {\n      if (!value) return;\n      if (!this.storage.cookies) {\n        this.openCookieDialog();\n      }\n    });\n  }\n  handleOpenForgotPasswordModal() {\n    this.dialog.open(ForgotPasswordComponent, {\n      data: {\n        email: this.login_form.get('email')?.value\n      }\n    });\n  }\n  openCookieDialog() {\n    const dialogRef = this.dialog.open(CookiesLoginComponent, {\n      panelClass: 'cookies-dialog',\n      disableClose: true\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.storage.cookies = true;\n      } else {\n        this.login_form.get('remember')?.setValue(false);\n      }\n    });\n  }\n  static {\n    this.ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.AuthService), i0.ɵɵdirectiveInject(i5.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      decls: 2,\n      vars: 0,\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"body\");\n          i0.ɵɵelement(1, \"main\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"#login[_ngcontent-%COMP%] {\\n  min-height: 100vh;\\n  width: 100%;\\n  background-color: var(--main-color);\\n  overflow: hidden;\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%] {\\n  padding: 2rem 8%;\\n  width: 100%;\\n  height: 100vh;\\n  display: flex;\\n  justify-content: center;\\n  position: relative;\\n}\\n@media (max-width: 768px) {\\n  #login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%] {\\n    gap: 2rem;\\n    flex-direction: column;\\n  }\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .lang[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 1rem;\\n  left: 1rem;\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .version[_ngcontent-%COMP%] {\\n  position: absolute;\\n  bottom: 1rem;\\n  right: 1rem;\\n  color: var(--primary-bg);\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   .logo[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   .logo[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n  width: 100%;\\n  max-width: 350px;\\n}\\n@media (max-width: 768px) {\\n  #login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   .logo[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n    max-width: 250px;\\n    width: 50%;\\n  }\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   .form[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  flex-direction: column;\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   .form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%] {\\n  background-color: var(--primary-bg);\\n  padding: 2rem;\\n  border-radius: var(--br);\\n  width: 100%;\\n  max-width: 350px;\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   .form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%] {\\n  text-align: center;\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   .form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  margin: 0.2rem 0 0.5rem;\\n  text-align: center;\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   .form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\\n  color: var(--text-color);\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   .form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   .forgot-password[_ngcontent-%COMP%] {\\n  text-align: end;\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   .form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   .forgot-password[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\\n  color: var(--main-color);\\n  text-decoration: none;\\n}\\n#login[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   .form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   .forgot-password[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover {\\n  text-decoration: underline;\\n}\\n\\nbody[_ngcontent-%COMP%] {\\n  background-color: black;\\n  background-image: url('cbl-back.png');\\n  background-repeat: no-repeat;\\n  background-size: cover;\\n  background-blend-mode: overlay;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"],\n      data: {\n        animation: [zoomInAnimation]\n      }\n    });\n  }\n}","map":{"version":3,"names":["Validators","zoomInAnimation","ForgotPasswordComponent","CookiesLoginComponent","environment","LoginComponent","constructor","fb","dialog","storage","authService","router","loading","view_pass","version","login_form","group","email","required","password","remember","ngOnInit","awaitRemember","loginSubmitHandler","invalid","markAllAsTouched","get","value","login","subscribe","next","response","setToken","token","navigate","error","valueChanges","cookies","openCookieDialog","handleOpenForgotPasswordModal","open","data","dialogRef","panelClass","disableClose","afterClosed","result","setValue","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","MatDialog","i3","StorageService","i4","AuthService","i5","Router","selectors","decls","vars","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd"],"sources":["C:\\Users\\j-mai\\Documents\\CBLXToolPFP\\frontend\\src\\app\\pages\\login\\login.component.ts","C:\\Users\\j-mai\\Documents\\CBLXToolPFP\\frontend\\src\\app\\pages\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { zoomInAnimation } from '@animations/route-animation';\r\nimport { ForgotPasswordComponent } from '@app/components/modals/forgot-password/forgot-password.component';\r\nimport { CookiesLoginComponent } from '@components/modals/cookies-login/cookies-login.component';\r\nimport { environment } from '@env';\r\nimport { AuthService } from '@services/auth.service';\r\nimport { BodyJson } from '@services/http.service';\r\nimport { StorageService } from '@services/storage.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  animations: [zoomInAnimation],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    public dialog: MatDialog,\r\n    public storage: StorageService,\r\n    private authService: AuthService,\r\n    public router: Router\r\n  ) {}\r\n\r\n  loading = false;\r\n  view_pass = false;\r\n\r\n  version = environment.version;\r\n\r\n  login_form = this.fb.group({\r\n    email: ['', [Validators.required, Validators.email]],\r\n    password: ['', Validators.required],\r\n    remember: [false],\r\n  });\r\n\r\n  ngOnInit(): void {\r\n    this.awaitRemember();\r\n  }\r\n\r\n  loginSubmitHandler() {\r\n    if (this.login_form.invalid) {\r\n      this.login_form.markAllAsTouched();\r\n      return;\r\n    }\r\n  \r\n    this.loading = true;\r\n  \r\n    // Extraindo os valores de email, password e remember do formulário\r\n    const email = this.login_form.get('email')?.value ?? '';  // Garante que email nunca seja null ou undefined\r\n    const password = this.login_form.get('password')?.value ?? '';  // Garante que password nunca seja null ou undefined\r\n    const remember = this.login_form.get('remember')?.value;\r\n    // Passando email e password como argumentos separados para o login\r\n    this.authService.login(email, password).subscribe({\r\n      next: (response) => {\r\n        this.loading = false;\r\n        this.authService.setToken(response.token, remember as boolean);  // `remember` já foi extraído\r\n        this.router.navigate(['/']);\r\n      },\r\n      error: () => {\r\n        this.loading = false;\r\n      },\r\n    });\r\n  }\r\n  \r\n\r\n  awaitRemember() {\r\n    this.login_form.get('remember')?.valueChanges.subscribe((value) => {\r\n      if (!value) return;\r\n\r\n      if (!this.storage.cookies) {\r\n        this.openCookieDialog();\r\n      }\r\n    });\r\n  }\r\n\r\n  handleOpenForgotPasswordModal() {\r\n    this.dialog.open(ForgotPasswordComponent, {\r\n      data: { email: this.login_form.get('email')?.value },\r\n    });\r\n  }\r\n\r\n  openCookieDialog() {\r\n    const dialogRef = this.dialog.open(CookiesLoginComponent, {\r\n      panelClass: 'cookies-dialog',\r\n      disableClose: true,\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result: boolean) => {\r\n      if (result) {\r\n        this.storage.cookies = true;\r\n      } else {\r\n        this.login_form.get('remember')?.setValue(false);\r\n      }\r\n    });\r\n  }\r\n}\r\n","<body>\n  <main>\n    \n  </main>\n  <!-- <main id=\"login\">\n    <div class=\"row\">\n      <div class=\"lang\">\n        <lang-select></lang-select>\n      </div>\n      <div class=\"col\">\n        <div class=\"logo\">\n          <img src=\"assets/images/logocblxtool.png\" alt=\"Logo\" />\n        </div>\n      </div>\n      <div class=\"col\">\n        <div class=\"form\">\n          <form (ngSubmit)=\"loginSubmitHandler()\" [formGroup]=\"login_form\">\n            <h1>{{ 'login-register.login-title' | translate }}</h1>\n            <p>\n              {{ 'login-register.not-registered' | translate }}\n              <a routerLink=\"/register\">{{\n                'login-register.go-register' | translate\n              }}</a>\n            </p>\n\n            <mat-form-field appearance=\"outline\">\n              <mat-label>\n                {{ 'login-register.email' | translate }}\n              </mat-label>\n              <input\n                matInput\n                type=\"email\"\n                formControlName=\"email\"\n                autocomplete=\"username\"\n              />\n              <mat-error>\n                {{ login_form.controls.email.errors | formError | translate }}\n              </mat-error>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n              <mat-label>\n                {{ 'login-register.password' | translate }}\n              </mat-label>\n              <input\n                matInput\n                [type]=\"view_pass ? 'text' : 'password'\"\n                formControlName=\"password\"\n                autocomplete=\"current-password\"\n              />\n\n              <button\n                type=\"button\"\n                mat-icon-button\n                matSuffix\n                aria-label=\"Ver senha\"\n                (click)=\"view_pass = !view_pass\"\n              >\n                <i icon=\"view_pass\" *ngIf=\"!view_pass\"></i>\n                <i icon=\"hide_pass\" *ngIf=\"view_pass\"></i>\n              </button>\n\n              <mat-error>\n                {{ login_form.controls.password.errors | formError | translate }}\n              </mat-error>\n            </mat-form-field>\n\n            <div class=\"forgot-password\">\n              <a class=\"f-12\" (click)=\"handleOpenForgotPasswordModal()\">\n                {{ 'login-register.forgot-password' | translate }}\n              </a>\n            </div>\n\n            <mat-checkbox formControlName=\"remember\">\n              {{ 'login-register.remember-me' | translate }}\n            </mat-checkbox>\n\n            <div class=\"buttons full\">\n              <button\n                mat-button\n                type=\"submit\"\n                class=\"primary\"\n                [disabled]=\"loading\"\n              >\n                {{ 'login-register.login-title' | translate }}\n                <loading *ngIf=\"loading\"></loading>\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n\n      <div class=\"version\">v{{ version }}</div>\n    </div>\n  </main> -->\n</body>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
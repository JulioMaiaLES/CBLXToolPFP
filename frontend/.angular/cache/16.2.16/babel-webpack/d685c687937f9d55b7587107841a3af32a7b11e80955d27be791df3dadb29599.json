{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nimport * as i2 from \"@ngx-translate/core\";\nexport class StorageService {\n  constructor(cookieService, translate) {\n    this.cookieService = cookieService;\n    this.translate = translate;\n    this.UserSubject = new Subject();\n    this.myUser = {};\n  }\n  get myself() {\n    return this.myUser;\n  }\n  set myself(user) {\n    this.myUser = user;\n  }\n  watchUser() {\n    return this.UserSubject.asObservable();\n  }\n  changeUser() {\n    this.UserSubject.next();\n  }\n  get token() {\n    if (this.cookies) {\n      return this.cookieService.get('token');\n    } else {\n      return sessionStorage.getItem('token');\n    }\n  }\n  get cookies() {\n    return localStorage.getItem('cookies') === 'true';\n  }\n  set cookies(value) {\n    localStorage.setItem('cookies', value.toString());\n  }\n  static {\n    this.ɵfac = function StorageService_Factory(t) {\n      return new (t || StorageService)(i0.ɵɵinject(i1.CookieService), i0.ɵɵinject(i2.TranslateService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StorageService,\n      factory: StorageService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Subject","StorageService","constructor","cookieService","translate","UserSubject","myUser","myself","user","watchUser","asObservable","changeUser","next","token","cookies","get","sessionStorage","getItem","localStorage","value","setItem","toString","i0","ɵɵinject","i1","CookieService","i2","TranslateService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\j-mai\\Documents\\CBLXToolPFP\\frontend\\src\\app\\services\\storage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { IUser } from '@models/user';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StorageService {\n  constructor(\n    private cookieService: CookieService,\n    private translate: TranslateService\n  ) {}\n\n  UserSubject = new Subject<void>();\n  myUser: IUser = {} as IUser;\n\n  get myself() {\n    return this.myUser;\n  }\n\n  set myself(user: IUser) {\n    this.myUser = user;\n  }\n\n  watchUser() {\n    return this.UserSubject.asObservable();\n  }\n\n  changeUser(): void {\n    this.UserSubject.next();\n  }\n\n  get token() {\n    if (this.cookies) {\n      return this.cookieService.get('token');\n    } else {\n      return sessionStorage.getItem('token');\n    }\n  }\n\n  get cookies() {\n    return localStorage.getItem('cookies') === 'true';\n  }\n\n  set cookies(value: boolean) {\n    localStorage.setItem('cookies', value.toString());\n  }\n}\n"],"mappings":"AAIA,SAASA,OAAO,QAAQ,MAAM;;;;AAK9B,OAAM,MAAOC,cAAc;EACzBC,YACUC,aAA4B,EAC5BC,SAA2B;IAD3B,KAAAD,aAAa,GAAbA,aAAa;IACb,KAAAC,SAAS,GAATA,SAAS;IAGnB,KAAAC,WAAW,GAAG,IAAIL,OAAO,EAAQ;IACjC,KAAAM,MAAM,GAAU,EAAW;EAHxB;EAKH,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAACD,MAAM;EACpB;EAEA,IAAIC,MAAMA,CAACC,IAAW;IACpB,IAAI,CAACF,MAAM,GAAGE,IAAI;EACpB;EAEAC,SAASA,CAAA;IACP,OAAO,IAAI,CAACJ,WAAW,CAACK,YAAY,EAAE;EACxC;EAEAC,UAAUA,CAAA;IACR,IAAI,CAACN,WAAW,CAACO,IAAI,EAAE;EACzB;EAEA,IAAIC,KAAKA,CAAA;IACP,IAAI,IAAI,CAACC,OAAO,EAAE;MAChB,OAAO,IAAI,CAACX,aAAa,CAACY,GAAG,CAAC,OAAO,CAAC;KACvC,MAAM;MACL,OAAOC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE1C;EAEA,IAAIH,OAAOA,CAAA;IACT,OAAOI,YAAY,CAACD,OAAO,CAAC,SAAS,CAAC,KAAK,MAAM;EACnD;EAEA,IAAIH,OAAOA,CAACK,KAAc;IACxBD,YAAY,CAACE,OAAO,CAAC,SAAS,EAAED,KAAK,CAACE,QAAQ,EAAE,CAAC;EACnD;;;uBAvCWpB,cAAc,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,gBAAA;IAAA;EAAA;;;aAAd1B,cAAc;MAAA2B,OAAA,EAAd3B,cAAc,CAAA4B,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class GeolocationService {\n  constructor() {}\n  getCurrentPosition() {\n    return new Observable(observer => {\n      if ('geolocation' in navigator) {\n        navigator.geolocation.getCurrentPosition(position => {\n          observer.next(position);\n          observer.complete();\n        }, error => {\n          observer.error(error);\n        });\n      } else {\n        const error = {\n          code: 0,\n          message: 'Navegador incompatível, atualize-o ou tente com outro.'\n        };\n        observer.error(error);\n      }\n    });\n  }\n  static {\n    this.ɵfac = function GeolocationService_Factory(t) {\n      return new (t || GeolocationService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GeolocationService,\n      factory: GeolocationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Observable","GeolocationService","constructor","getCurrentPosition","observer","navigator","geolocation","position","next","complete","error","code","message","factory","ɵfac","providedIn"],"sources":["C:\\Users\\j-mai\\Documents\\CBLXToolPFP\\frontend\\src\\app\\services\\geolocation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeolocationService {\n  constructor() {}\n  getCurrentPosition(): Observable<GeolocationPosition> {\n    return new Observable((observer) => {\n      if ('geolocation' in navigator) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            observer.next(position);\n            observer.complete();\n          },\n          (error) => {\n            observer.error(error);\n          }\n        );\n      } else {\n        const error = {\n          code: 0,\n          message: 'Navegador incompatível, atualize-o ou tente com outro.',\n        } as GeolocationPositionError;\n        observer.error(error);\n      }\n    });\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,MAAM;;AAKjC,OAAM,MAAOC,kBAAkB;EAC7BC,YAAA,GAAe;EACfC,kBAAkBA,CAAA;IAChB,OAAO,IAAIH,UAAU,CAAEI,QAAQ,IAAI;MACjC,IAAI,aAAa,IAAIC,SAAS,EAAE;QAC9BA,SAAS,CAACC,WAAW,CAACH,kBAAkB,CACrCI,QAAQ,IAAI;UACXH,QAAQ,CAACI,IAAI,CAACD,QAAQ,CAAC;UACvBH,QAAQ,CAACK,QAAQ,EAAE;QACrB,CAAC,EACAC,KAAK,IAAI;UACRN,QAAQ,CAACM,KAAK,CAACA,KAAK,CAAC;QACvB,CAAC,CACF;OACF,MAAM;QACL,MAAMA,KAAK,GAAG;UACZC,IAAI,EAAE,CAAC;UACPC,OAAO,EAAE;SACkB;QAC7BR,QAAQ,CAACM,KAAK,CAACA,KAAK,CAAC;;IAEzB,CAAC,CAAC;EACJ;;;uBAtBWT,kBAAkB;IAAA;EAAA;;;aAAlBA,kBAAkB;MAAAY,OAAA,EAAlBZ,kBAAkB,CAAAa,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}